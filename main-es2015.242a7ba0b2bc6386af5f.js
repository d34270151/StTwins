(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(t,e,n){t.exports=n("zUnb")},1:function(t,e){},"1uat":function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("MlIO"),function(){var t=r,e=t.lib.Hasher,n=t.x64,i=n.Word,s=n.WordArray,o=t.algo;function l(){return i.create.apply(i,arguments)}var a=[l(1116352408,3609767458),l(1899447441,602891725),l(3049323471,3964484399),l(3921009573,2173295548),l(961987163,4081628472),l(1508970993,3053834265),l(2453635748,2937671579),l(2870763221,3664609560),l(3624381080,2734883394),l(310598401,1164996542),l(607225278,1323610764),l(1426881987,3590304994),l(1925078388,4068182383),l(2162078206,991336113),l(2614888103,633803317),l(3248222580,3479774868),l(3835390401,2666613458),l(4022224774,944711139),l(264347078,2341262773),l(604807628,2007800933),l(770255983,1495990901),l(1249150122,1856431235),l(1555081692,3175218132),l(1996064986,2198950837),l(2554220882,3999719339),l(2821834349,766784016),l(2952996808,2566594879),l(3210313671,3203337956),l(3336571891,1034457026),l(3584528711,2466948901),l(113926993,3758326383),l(338241895,168717936),l(666307205,1188179964),l(773529912,1546045734),l(1294757372,1522805485),l(1396182291,2643833823),l(1695183700,2343527390),l(1986661051,1014477480),l(2177026350,1206759142),l(2456956037,344077627),l(2730485921,1290863460),l(2820302411,3158454273),l(3259730800,3505952657),l(3345764771,106217008),l(3516065817,3606008344),l(3600352804,1432725776),l(4094571909,1467031594),l(275423344,851169720),l(430227734,3100823752),l(506948616,1363258195),l(659060556,3750685593),l(883997877,3785050280),l(958139571,3318307427),l(1322822218,3812723403),l(1537002063,2003034995),l(1747873779,3602036899),l(1955562222,1575990012),l(2024104815,1125592928),l(2227730452,2716904306),l(2361852424,442776044),l(2428436474,593698344),l(2756734187,3733110249),l(3204031479,2999351573),l(3329325298,3815920427),l(3391569614,3928383900),l(3515267271,566280711),l(3940187606,3454069534),l(4118630271,4000239992),l(116418474,1914138554),l(174292421,2731055270),l(289380356,3203993006),l(460393269,320620315),l(685471733,587496836),l(852142971,1086792851),l(1017036298,365543100),l(1126000580,2618297676),l(1288033470,3409855158),l(1501505948,4234509866),l(1607167915,987167468),l(1816402316,1246189591)],u=[];!function(){for(var t=0;t<80;t++)u[t]=l()}();var c=o.SHA512=e.extend({_doReset:function(){this._hash=new s.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],s=n[2],o=n[3],l=n[4],c=n[5],h=n[6],d=n[7],f=r.high,p=r.low,g=i.high,y=i.low,m=s.high,v=s.low,b=o.high,w=o.low,C=l.high,k=l.low,A=c.high,x=c.low,E=h.high,T=h.low,S=d.high,I=d.low,O=f,N=p,D=g,P=y,M=m,V=v,R=b,j=w,z=C,F=k,B=A,H=x,G=E,L=T,q=S,X=I,Z=0;Z<80;Z++){var K,Y,Q=u[Z];if(Z<16)Y=Q.high=0|t[e+2*Z],K=Q.low=0|t[e+2*Z+1];else{var W=u[Z-15],J=W.high,U=W.low,_=(U>>>1|J<<31)^(U>>>8|J<<24)^(U>>>7|J<<25),$=u[Z-2],tt=$.high,et=$.low,nt=(et>>>19|tt<<13)^(et<<3|tt>>>29)^(et>>>6|tt<<26),rt=u[Z-7],it=u[Z-16],st=it.low;Q.high=Y=(Y=(Y=((J>>>1|U<<31)^(J>>>8|U<<24)^J>>>7)+rt.high+((K=_+rt.low)>>>0<_>>>0?1:0))+((tt>>>19|et<<13)^(tt<<3|et>>>29)^tt>>>6)+((K+=nt)>>>0<nt>>>0?1:0))+it.high+((K+=st)>>>0<st>>>0?1:0),Q.low=K}var ot,lt=z&B^~z&G,at=F&H^~F&L,ut=O&D^O&M^D&M,ct=(N>>>28|O<<4)^(N<<30|O>>>2)^(N<<25|O>>>7),ht=a[Z],dt=ht.low,ft=q+((z>>>14|F<<18)^(z>>>18|F<<14)^(z<<23|F>>>9))+((ot=X+((F>>>14|z<<18)^(F>>>18|z<<14)^(F<<23|z>>>9)))>>>0<X>>>0?1:0),pt=ct+(N&P^N&V^P&V);q=G,X=L,G=B,L=H,B=z,H=F,z=R+(ft=(ft=(ft=ft+lt+((ot+=at)>>>0<at>>>0?1:0))+ht.high+((ot+=dt)>>>0<dt>>>0?1:0))+Y+((ot+=K)>>>0<K>>>0?1:0))+((F=j+ot|0)>>>0<j>>>0?1:0)|0,R=M,j=V,M=D,V=P,D=O,P=N,O=ft+(((O>>>28|N<<4)^(O<<30|N>>>2)^(O<<25|N>>>7))+ut+(pt>>>0<ct>>>0?1:0))+((N=ot+pt|0)>>>0<ot>>>0?1:0)|0}p=r.low=p+N,r.high=f+O+(p>>>0<N>>>0?1:0),y=i.low=y+P,i.high=g+D+(y>>>0<P>>>0?1:0),v=s.low=v+V,s.high=m+M+(v>>>0<V>>>0?1:0),w=o.low=w+j,o.high=b+R+(w>>>0<j>>>0?1:0),k=l.low=k+F,l.high=C+z+(k>>>0<F>>>0?1:0),x=c.low=x+H,c.high=A+B+(x>>>0<H>>>0?1:0),T=h.low=T+L,h.high=E+G+(T>>>0<L>>>0?1:0),I=d.low=I+X,d.high=S+q+(I>>>0<X>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[30+(r+128>>>10<<5)]=Math.floor(n/4294967296),e[31+(r+128>>>10<<5)]=n,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(c),t.HmacSHA512=e._createHmacHelper(c)}(),r.SHA512)},"3y9D":function(t,e,n){var r,i,s,o,l,a,u;t.exports=(u=n("Ib8C"),s=(i=(r=u).lib).WordArray,l=[],a=r.algo.SHA1=(o=i.Hasher).extend({_doReset:function(){this._hash=new s.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],s=n[2],o=n[3],a=n[4],u=0;u<80;u++){if(u<16)l[u]=0|t[e+u];else{var c=l[u-3]^l[u-8]^l[u-14]^l[u-16];l[u]=c<<1|c>>>31}var h=(r<<5|r>>>27)+a+l[u];h+=u<20?1518500249+(i&s|~i&o):u<40?1859775393+(i^s^o):u<60?(i&s|i&o|s&o)-1894007588:(i^s^o)-899497514,a=o,o=s,s=i<<30|i>>>2,i=r,r=h}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+s|0,n[3]=n[3]+o|0,n[4]=n[4]+a|0},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),e[15+(r+64>>>9<<4)]=n,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}}),r.SHA1=o._createHelper(a),r.HmacSHA1=o._createHmacHelper(a),u.SHA1)},"5hvy":function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("MlIO"),function(t){var e=r,n=e.lib,i=n.WordArray,s=n.Hasher,o=e.x64.Word,l=e.algo,a=[],u=[],c=[];!function(){for(var t=1,e=0,n=0;n<24;n++){a[t+5*e]=(n+1)*(n+2)/2%64;var r=(2*t+3*e)%5;t=e%5,e=r}for(t=0;t<5;t++)for(e=0;e<5;e++)u[t+5*e]=e+(2*t+3*e)%5*5;for(var i=1,s=0;s<24;s++){for(var l=0,h=0,d=0;d<7;d++){if(1&i){var f=(1<<d)-1;f<32?h^=1<<f:l^=1<<f-32}128&i?i=i<<1^113:i<<=1}c[s]=o.create(l,h)}}();var h=[];!function(){for(var t=0;t<25;t++)h[t]=o.create()}();var d=l.SHA3=s.extend({cfg:s.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var n=this._state,r=this.blockSize/2,i=0;i<r;i++){var s=t[e+2*i],o=t[e+2*i+1];s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),(D=n[i]).high^=o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),D.low^=s}for(var l=0;l<24;l++){for(var d=0;d<5;d++){for(var f=0,p=0,g=0;g<5;g++)f^=(D=n[d+5*g]).high,p^=D.low;var y=h[d];y.high=f,y.low=p}for(d=0;d<5;d++){var m=h[(d+4)%5],v=h[(d+1)%5],b=v.high,w=v.low;for(f=m.high^(b<<1|w>>>31),p=m.low^(w<<1|b>>>31),g=0;g<5;g++)(D=n[d+5*g]).high^=f,D.low^=p}for(var C=1;C<25;C++){var k=(D=n[C]).high,A=D.low,x=a[C];x<32?(f=k<<x|A>>>32-x,p=A<<x|k>>>32-x):(f=A<<x-32|k>>>64-x,p=k<<x-32|A>>>64-x);var E=h[u[C]];E.high=f,E.low=p}var T=h[0],S=n[0];for(T.high=S.high,T.low=S.low,d=0;d<5;d++)for(g=0;g<5;g++){var I=h[C=d+5*g],O=h[(d+1)%5+5*g],N=h[(d+2)%5+5*g];(D=n[C]).high=I.high^~O.high&N.high,D.low=I.low^~O.low&N.low}var D,P=c[l];(D=n[0]).high^=P.high,D.low^=P.low}},_doFinalize:function(){var e=this._data,n=e.words,r=8*e.sigBytes,s=32*this.blockSize;n[r>>>5]|=1<<24-r%32,n[(t.ceil((r+1)/s)*s>>>5)-1]|=128,e.sigBytes=4*n.length,this._process();for(var o=this._state,l=this.cfg.outputLength/8,a=l/8,u=[],c=0;c<a;c++){var h=o[c],d=h.high,f=h.low;d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),u.push(f=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8)),u.push(d)}return new i.init(u,l)},clone:function(){for(var t=s.clone.call(this),e=t._state=this._state.slice(0),n=0;n<25;n++)e[n]=e[n].clone();return t}});e.SHA3=s._createHelper(d),e.HmacSHA3=s._createHmacHelper(d)}(Math),r.SHA3)},"9OqN":function(t,e,n){var r,i,s;t.exports=(s=n("Ib8C"),n("OLod"),s.mode.CTR=(i=(r=s.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize,i=this._iv,s=this._counter;i&&(s=this._counter=i.slice(0),this._iv=void 0);var o=s.slice(0);n.encryptBlock(o,0),s[r-1]=s[r-1]+1|0;for(var l=0;l<r;l++)t[e+l]^=o[l]}}),r.Decryptor=i,r),s.mode.CTR)},ALsQ:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.mode.CFB=function(){var t=r.lib.BlockCipherMode.extend();function e(t,e,n,r){var i,s=this._iv;s?(i=s.slice(0),this._iv=void 0):i=this._prevBlock,r.encryptBlock(i,0);for(var o=0;o<n;o++)t[e+o]^=i[o]}return t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,i=r.blockSize;e.call(this,t,n,i,r),this._prevBlock=t.slice(n,n+i)}}),t.Decryptor=t.extend({processBlock:function(t,n){var r=this._cipher,i=r.blockSize,s=t.slice(n,n+i);e.call(this,t,n,i,r),this._prevBlock=s}}),t}(),r.mode.CFB)},E4JC:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("ETIr"),n("cv67"),n("K3mO"),n("OLod"),function(){var t=r,e=t.lib.StreamCipher,n=[],i=[],s=[],o=t.algo.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,n=0;n<4;n++)t[n]=16711935&(t[n]<<8|t[n]>>>24)|4278255360&(t[n]<<24|t[n]>>>8);var r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],i=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,n=0;n<4;n++)l.call(this);for(n=0;n<8;n++)i[n]^=r[n+4&7];if(e){var s=e.words,o=s[0],a=s[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(i[0]^=u,i[1]^=h,i[2]^=c,i[3]^=d,i[4]^=u,i[5]^=h,i[6]^=c,i[7]^=d,n=0;n<4;n++)l.call(this)}},_doProcessBlock:function(t,e){var r=this._X;l.call(this),n[0]=r[0]^r[5]>>>16^r[3]<<16,n[1]=r[2]^r[7]>>>16^r[5]<<16,n[2]=r[4]^r[1]>>>16^r[7]<<16,n[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)n[i]=16711935&(n[i]<<8|n[i]>>>24)|4278255360&(n[i]<<24|n[i]>>>8),t[e+i]^=n[i]},blockSize:4,ivSize:2});function l(){for(var t=this._X,e=this._C,n=0;n<8;n++)i[n]=e[n];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<i[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<i[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<i[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<i[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<i[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<i[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<i[6]>>>0?1:0)|0,this._b=e[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var r=t[n]+e[n],o=65535&r,l=r>>>16;s[n]=((o*o>>>17)+o*l>>>15)+l*l^((4294901760&r)*r|0)+((65535&r)*r|0)}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}t.Rabbit=e._createHelper(o)}(),r.Rabbit)},ELcG:function(t,e,n){var r;t.exports=(r=n("Ib8C"),function(t){var e=r,n=e.lib,i=n.WordArray,s=n.Hasher,o=e.algo,l=i.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),a=i.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),u=i.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),c=i.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),h=i.create([0,1518500249,1859775393,2400959708,2840853838]),d=i.create([1352829926,1548603684,1836072691,2053994217,0]),f=o.RIPEMD160=s.extend({_doReset:function(){this._hash=i.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=0;n<16;n++){var r=e+n,i=t[r];t[r]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var s,o,f,w,C,k,A,x,E,T,S,I=this._hash.words,O=h.words,N=d.words,D=l.words,P=a.words,M=u.words,V=c.words;for(k=s=I[0],A=o=I[1],x=f=I[2],E=w=I[3],T=C=I[4],n=0;n<80;n+=1)S=s+t[e+D[n]]|0,S+=n<16?p(o,f,w)+O[0]:n<32?g(o,f,w)+O[1]:n<48?y(o,f,w)+O[2]:n<64?m(o,f,w)+O[3]:v(o,f,w)+O[4],S=(S=b(S|=0,M[n]))+C|0,s=C,C=w,w=b(f,10),f=o,o=S,S=k+t[e+P[n]]|0,S+=n<16?v(A,x,E)+N[0]:n<32?m(A,x,E)+N[1]:n<48?y(A,x,E)+N[2]:n<64?g(A,x,E)+N[3]:p(A,x,E)+N[4],S=(S=b(S|=0,V[n]))+T|0,k=T,T=E,E=b(x,10),x=A,A=S;S=I[1]+f+E|0,I[1]=I[2]+w+T|0,I[2]=I[3]+C+k|0,I[3]=I[4]+s+A|0,I[4]=I[0]+o+x|0,I[0]=S},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),t.sigBytes=4*(e.length+1),this._process();for(var i=this._hash,s=i.words,o=0;o<5;o++){var l=s[o];s[o]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return i},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}});function p(t,e,n){return t^e^n}function g(t,e,n){return t&e|~t&n}function y(t,e,n){return(t|~e)^n}function m(t,e,n){return t&n|e&~n}function v(t,e,n){return t^(e|~n)}function b(t,e){return t<<e|t>>>32-e}e.RIPEMD160=s._createHelper(f),e.HmacRIPEMD160=s._createHmacHelper(f)}(Math),r.RIPEMD160)},ETIr:function(t,e,n){var r,i;t.exports=(i=n("Ib8C"),r=i.lib.WordArray,i.enc.Base64={stringify:function(t){var e=t.words,n=t.sigBytes,r=this._map;t.clamp();for(var i=[],s=0;s<n;s+=3)for(var o=(e[s>>>2]>>>24-s%4*8&255)<<16|(e[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|e[s+2>>>2]>>>24-(s+2)%4*8&255,l=0;l<4&&s+.75*l<n;l++)i.push(r.charAt(o>>>6*(3-l)&63));var a=r.charAt(64);if(a)for(;i.length%4;)i.push(a);return i.join("")},parse:function(t){var e=t.length,n=this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var s=0;s<n.length;s++)i[n.charCodeAt(s)]=s}var o=n.charAt(64);if(o){var l=t.indexOf(o);-1!==l&&(e=l)}return function(t,e,n){for(var i=[],s=0,o=0;o<e;o++)if(o%4){var l=n[t.charCodeAt(o-1)]<<o%4*2,a=n[t.charCodeAt(o)]>>>6-o%4*2;i[s>>>2]|=(l|a)<<24-s%4*8,s++}return r.create(i,s)}(t,e,i)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},i.enc.Base64)},"F+F2":function(t,e,n){var r;t.exports=(r=n("Ib8C"),function(){if("function"==typeof ArrayBuffer){var t=r.lib.WordArray,e=t.init;(t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var n=t.byteLength,r=[],i=0;i<n;i++)r[i>>>2]|=t[i]<<24-i%4*8;e.call(this,r,n)}else e.apply(this,arguments)}).prototype=t}}(),r.lib.WordArray)},GRuw:function(t,e,n){var r,i,s,o,l,a;t.exports=(a=n("Ib8C"),n("lPiR"),i=(r=a).lib.WordArray,l=(s=r.algo).SHA224=(o=s.SHA256).extend({_doReset:function(){this._hash=new i.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=o._doFinalize.call(this);return t.sigBytes-=4,t}}),r.SHA224=o._createHelper(l),r.HmacSHA224=o._createHmacHelper(l),a.SHA224)},Ib8C:function(t,e,n){var r;t.exports=r=r||function(t,e){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&"undefined"!=typeof global&&global.crypto&&(r=global.crypto),!r)try{r=n(1)}catch(y){}var i=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(y){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(y){}}throw new Error("Native crypto module could not be used to get secure random number.")},s=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),o={},l=o.lib={},a=l.Base={extend:function(t){var e=s(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},u=l.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||h).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,i=t.sigBytes;if(this.clamp(),r%4)for(var s=0;s<i;s++)e[r+s>>>2]|=(n[s>>>2]>>>24-s%4*8&255)<<24-(r+s)%4*8;else for(s=0;s<i;s+=4)e[r+s>>>2]=n[s>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=a.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],n=0;n<t;n+=4)e.push(i());return new u.init(e,t)}}),c=o.enc={},h=c.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var s=e[i>>>2]>>>24-i%4*8&255;r.push((s>>>4).toString(16)),r.push((15&s).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new u.init(n,e/2)}},d=c.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++)r.push(String.fromCharCode(e[i>>>2]>>>24-i%4*8&255));return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new u.init(n,e)}},f=c.Utf8={stringify:function(t){try{return decodeURIComponent(escape(d.stringify(t)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(t){return d.parse(unescape(encodeURIComponent(t)))}},p=l.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n,r=this._data,i=r.words,s=r.sigBytes,o=this.blockSize,l=s/(4*o),a=(l=e?t.ceil(l):t.max((0|l)-this._minBufferSize,0))*o,c=t.min(4*a,s);if(a){for(var h=0;h<a;h+=o)this._doProcessBlock(i,h);n=i.splice(0,a),r.sigBytes-=c}return new u.init(n,c)},clone:function(){var t=a.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),g=(l.Hasher=p.extend({cfg:a.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){p.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new g.HMAC.init(t,n).finalize(e)}}}),o.algo={});return o}(Math)},K3mO:function(t,e,n){var r,i,s,o,l,a,u;t.exports=(u=n("Ib8C"),n("3y9D"),n("WYAk"),o=(i=(r=u).lib).WordArray,a=(l=r.algo).EvpKDF=(s=i.Base).extend({cfg:s.extend({keySize:4,hasher:l.MD5,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var n,r=this.cfg,i=r.hasher.create(),s=o.create(),l=s.words,a=r.keySize,u=r.iterations;l.length<a;){n&&i.update(n),n=i.update(t).finalize(e),i.reset();for(var c=1;c<u;c++)n=i.finalize(n),i.reset();s.concat(n)}return s.sigBytes=4*a,s}}),r.EvpKDF=function(t,e,n){return a.create(n).compute(t,e)},u.EvpKDF)},KmYQ:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.pad.ZeroPadding={pad:function(t,e){var n=4*e;t.clamp(),t.sigBytes+=n-(t.sigBytes%n||n)},unpad:function(t){var e=t.words,n=t.sigBytes-1;for(n=t.sigBytes-1;n>=0;n--)if(e[n>>>2]>>>24-n%4*8&255){t.sigBytes=n+1;break}}},r.pad.ZeroPadding)},MlIO:function(t,e,n){var r,i,s,o,l;t.exports=(l=n("Ib8C"),i=(r=l.lib).Base,s=r.WordArray,(o=l.x64={}).Word=i.extend({init:function(t,e){this.high=t,this.low=e}}),o.WordArray=i.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,n=[],r=0;r<e;r++){var i=t[r];n.push(i.high),n.push(i.low)}return s.create(n,this.sigBytes)},clone:function(){for(var t=i.clone.call(this),e=t.words=this.words.slice(0),n=e.length,r=0;r<n;r++)e[r]=e[r].clone();return t}}),l)},NFKh:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("MlIO"),n("F+F2"),n("qM6L"),n("ETIr"),n("cv67"),n("3y9D"),n("lPiR"),n("GRuw"),n("1uat"),n("uGsb"),n("5hvy"),n("ELcG"),n("WYAk"),n("e7zE"),n("K3mO"),n("OLod"),n("ALsQ"),n("9OqN"),n("qu8F"),n("S6kV"),n("gb/T"),n("qBft"),n("oRuE"),n("jO9C"),n("KmYQ"),n("uGxW"),n("bQjk"),n("wZgz"),n("pA7S"),n("w7YG"),n("E4JC"),n("PVpz"),r)},OLod:function(t,e,n){var r,i,s,o,l,a,u,c,h,d,f,p,g,y,m,v,b,w,C;t.exports=(r=n("Ib8C"),n("K3mO"),void(r.lib.Cipher||(i=r,s=i.lib,o=s.Base,l=s.WordArray,a=s.BufferedBlockAlgorithm,u=i.enc,c=u.Base64,h=i.algo.EvpKDF,d=s.Cipher=a.extend({cfg:o.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,n){this.cfg=this.cfg.extend(n),this._xformMode=t,this._key=e,this.reset()},reset:function(){a.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?C:b}return function(e){return{encrypt:function(n,r,i){return t(r).encrypt(e,n,r,i)},decrypt:function(n,r,i){return t(r).decrypt(e,n,r,i)}}}}()}),s.StreamCipher=d.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),f=i.mode={},p=s.BlockCipherMode=o.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),g=f.CBC=function(){var t=p.extend();function e(t,e,n){var r,i=this._iv;i?(r=i,this._iv=void 0):r=this._prevBlock;for(var s=0;s<n;s++)t[e+s]^=r[s]}return t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,i=r.blockSize;e.call(this,t,n,i),r.encryptBlock(t,n),this._prevBlock=t.slice(n,n+i)}}),t.Decryptor=t.extend({processBlock:function(t,n){var r=this._cipher,i=r.blockSize,s=t.slice(n,n+i);r.decryptBlock(t,n),e.call(this,t,n,i),this._prevBlock=s}}),t}(),y=(i.pad={}).Pkcs7={pad:function(t,e){for(var n=4*e,r=n-t.sigBytes%n,i=r<<24|r<<16|r<<8|r,s=[],o=0;o<r;o+=4)s.push(i);var a=l.create(s,r);t.concat(a)},unpad:function(t){t.sigBytes-=255&t.words[t.sigBytes-1>>>2]}},s.BlockCipher=d.extend({cfg:d.cfg.extend({mode:g,padding:y}),reset:function(){var t;d.reset.call(this);var e=this.cfg,n=e.iv,r=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=r.createEncryptor:(t=r.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,n&&n.words):(this._mode=t.call(r,this,n&&n.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),m=s.CipherParams=o.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),v=(i.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,n=t.salt;return(n?l.create([1398893684,1701076831]).concat(n).concat(e):e).toString(c)},parse:function(t){var e,n=c.parse(t),r=n.words;return 1398893684==r[0]&&1701076831==r[1]&&(e=l.create(r.slice(2,4)),r.splice(0,4),n.sigBytes-=16),m.create({ciphertext:n,salt:e})}},b=s.SerializableCipher=o.extend({cfg:o.extend({format:v}),encrypt:function(t,e,n,r){r=this.cfg.extend(r);var i=t.createEncryptor(n,r),s=i.finalize(e),o=i.cfg;return m.create({ciphertext:s,key:n,iv:o.iv,algorithm:t,mode:o.mode,padding:o.padding,blockSize:t.blockSize,formatter:r.format})},decrypt:function(t,e,n,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),t.createDecryptor(n,r).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),w=(i.kdf={}).OpenSSL={execute:function(t,e,n,r){r||(r=l.random(8));var i=h.create({keySize:e+n}).compute(t,r),s=l.create(i.words.slice(e),4*n);return i.sigBytes=4*e,m.create({key:i,iv:s,salt:r})}},C=s.PasswordBasedCipher=b.extend({cfg:b.cfg.extend({kdf:w}),encrypt:function(t,e,n,r){var i=(r=this.cfg.extend(r)).kdf.execute(n,t.keySize,t.ivSize);r.iv=i.iv;var s=b.encrypt.call(this,t,e,i.key,r);return s.mixIn(i),s},decrypt:function(t,e,n,r){r=this.cfg.extend(r),e=this._parse(e,r.format);var i=r.kdf.execute(n,t.keySize,t.ivSize,e.salt);return r.iv=i.iv,b.decrypt.call(this,t,e,i.key,r)}}))))},PVpz:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("ETIr"),n("cv67"),n("K3mO"),n("OLod"),function(){var t=r,e=t.lib.StreamCipher,n=[],i=[],s=[],o=t.algo.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,n=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],r=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var i=0;i<4;i++)l.call(this);for(i=0;i<8;i++)r[i]^=n[i+4&7];if(e){var s=e.words,o=s[0],a=s[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(r[0]^=u,r[1]^=h,r[2]^=c,r[3]^=d,r[4]^=u,r[5]^=h,r[6]^=c,r[7]^=d,i=0;i<4;i++)l.call(this)}},_doProcessBlock:function(t,e){var r=this._X;l.call(this),n[0]=r[0]^r[5]>>>16^r[3]<<16,n[1]=r[2]^r[7]>>>16^r[5]<<16,n[2]=r[4]^r[1]>>>16^r[7]<<16,n[3]=r[6]^r[3]>>>16^r[1]<<16;for(var i=0;i<4;i++)n[i]=16711935&(n[i]<<8|n[i]>>>24)|4278255360&(n[i]<<24|n[i]>>>8),t[e+i]^=n[i]},blockSize:4,ivSize:2});function l(){for(var t=this._X,e=this._C,n=0;n<8;n++)i[n]=e[n];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<i[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<i[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<i[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<i[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<i[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<i[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<i[6]>>>0?1:0)|0,this._b=e[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var r=t[n]+e[n],o=65535&r,l=r>>>16;s[n]=((o*o>>>17)+o*l>>>15)+l*l^((4294901760&r)*r|0)+((65535&r)*r|0)}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}t.RabbitLegacy=e._createHelper(o)}(),r.RabbitLegacy)},S6kV:function(t,e,n){var r,i,s;t.exports=(s=n("Ib8C"),n("OLod"),s.mode.OFB=(i=(r=s.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize,i=this._iv,s=this._keystream;i&&(s=this._keystream=i.slice(0),this._iv=void 0),n.encryptBlock(s,0);for(var o=0;o<r;o++)t[e+o]^=s[o]}}),r.Decryptor=i,r),s.mode.OFB)},WYAk:function(t,e,n){var r,i;t.exports=(r=n("Ib8C"),i=r.enc.Utf8,void(r.algo.HMAC=r.lib.Base.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=i.parse(e));var n=t.blockSize,r=4*n;e.sigBytes>r&&(e=t.finalize(e)),e.clamp();for(var s=this._oKey=e.clone(),o=this._iKey=e.clone(),l=s.words,a=o.words,u=0;u<n;u++)l[u]^=1549556828,a[u]^=909522486;s.sigBytes=o.sigBytes=r,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,n=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(n))}})))},bQjk:function(t,e,n){var r,i,s;t.exports=(s=n("Ib8C"),n("OLod"),r=s.lib.CipherParams,i=s.enc.Hex,s.format.Hex={stringify:function(t){return t.ciphertext.toString(i)},parse:function(t){var e=i.parse(t);return r.create({ciphertext:e})}},s.format.Hex)},cv67:function(t,e,n){var r;t.exports=(r=n("Ib8C"),function(t){var e=r,n=e.lib,i=n.WordArray,s=n.Hasher,o=e.algo,l=[];!function(){for(var e=0;e<64;e++)l[e]=4294967296*t.abs(t.sin(e+1))|0}();var a=o.MD5=s.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var n=0;n<16;n++){var r=e+n,i=t[r];t[r]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var s=this._hash.words,o=t[e+0],a=t[e+1],f=t[e+2],p=t[e+3],g=t[e+4],y=t[e+5],m=t[e+6],v=t[e+7],b=t[e+8],w=t[e+9],C=t[e+10],k=t[e+11],A=t[e+12],x=t[e+13],E=t[e+14],T=t[e+15],S=s[0],I=s[1],O=s[2],N=s[3];S=u(S,I,O,N,o,7,l[0]),N=u(N,S,I,O,a,12,l[1]),O=u(O,N,S,I,f,17,l[2]),I=u(I,O,N,S,p,22,l[3]),S=u(S,I,O,N,g,7,l[4]),N=u(N,S,I,O,y,12,l[5]),O=u(O,N,S,I,m,17,l[6]),I=u(I,O,N,S,v,22,l[7]),S=u(S,I,O,N,b,7,l[8]),N=u(N,S,I,O,w,12,l[9]),O=u(O,N,S,I,C,17,l[10]),I=u(I,O,N,S,k,22,l[11]),S=u(S,I,O,N,A,7,l[12]),N=u(N,S,I,O,x,12,l[13]),O=u(O,N,S,I,E,17,l[14]),S=c(S,I=u(I,O,N,S,T,22,l[15]),O,N,a,5,l[16]),N=c(N,S,I,O,m,9,l[17]),O=c(O,N,S,I,k,14,l[18]),I=c(I,O,N,S,o,20,l[19]),S=c(S,I,O,N,y,5,l[20]),N=c(N,S,I,O,C,9,l[21]),O=c(O,N,S,I,T,14,l[22]),I=c(I,O,N,S,g,20,l[23]),S=c(S,I,O,N,w,5,l[24]),N=c(N,S,I,O,E,9,l[25]),O=c(O,N,S,I,p,14,l[26]),I=c(I,O,N,S,b,20,l[27]),S=c(S,I,O,N,x,5,l[28]),N=c(N,S,I,O,f,9,l[29]),O=c(O,N,S,I,v,14,l[30]),S=h(S,I=c(I,O,N,S,A,20,l[31]),O,N,y,4,l[32]),N=h(N,S,I,O,b,11,l[33]),O=h(O,N,S,I,k,16,l[34]),I=h(I,O,N,S,E,23,l[35]),S=h(S,I,O,N,a,4,l[36]),N=h(N,S,I,O,g,11,l[37]),O=h(O,N,S,I,v,16,l[38]),I=h(I,O,N,S,C,23,l[39]),S=h(S,I,O,N,x,4,l[40]),N=h(N,S,I,O,o,11,l[41]),O=h(O,N,S,I,p,16,l[42]),I=h(I,O,N,S,m,23,l[43]),S=h(S,I,O,N,w,4,l[44]),N=h(N,S,I,O,A,11,l[45]),O=h(O,N,S,I,T,16,l[46]),S=d(S,I=h(I,O,N,S,f,23,l[47]),O,N,o,6,l[48]),N=d(N,S,I,O,v,10,l[49]),O=d(O,N,S,I,E,15,l[50]),I=d(I,O,N,S,y,21,l[51]),S=d(S,I,O,N,A,6,l[52]),N=d(N,S,I,O,p,10,l[53]),O=d(O,N,S,I,C,15,l[54]),I=d(I,O,N,S,a,21,l[55]),S=d(S,I,O,N,b,6,l[56]),N=d(N,S,I,O,T,10,l[57]),O=d(O,N,S,I,m,15,l[58]),I=d(I,O,N,S,x,21,l[59]),S=d(S,I,O,N,g,6,l[60]),N=d(N,S,I,O,k,10,l[61]),O=d(O,N,S,I,f,15,l[62]),I=d(I,O,N,S,w,21,l[63]),s[0]=s[0]+S|0,s[1]=s[1]+I|0,s[2]=s[2]+O|0,s[3]=s[3]+N|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;n[i>>>5]|=128<<24-i%32;var s=t.floor(r/4294967296),o=r;n[15+(i+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),n[14+(i+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),e.sigBytes=4*(n.length+1),this._process();for(var l=this._hash,a=l.words,u=0;u<4;u++){var c=a[u];a[u]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return l},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}});function u(t,e,n,r,i,s,o){var l=t+(e&n|~e&r)+i+o;return(l<<s|l>>>32-s)+e}function c(t,e,n,r,i,s,o){var l=t+(e&r|n&~r)+i+o;return(l<<s|l>>>32-s)+e}function h(t,e,n,r,i,s,o){var l=t+(e^n^r)+i+o;return(l<<s|l>>>32-s)+e}function d(t,e,n,r,i,s,o){var l=t+(n^(e|~r))+i+o;return(l<<s|l>>>32-s)+e}e.MD5=s._createHelper(a),e.HmacMD5=s._createHmacHelper(a)}(Math),r.MD5)},e7zE:function(t,e,n){var r,i,s,o,l,a,u,c;t.exports=(c=n("Ib8C"),n("3y9D"),n("WYAk"),o=(i=(r=c).lib).WordArray,a=(l=r.algo).HMAC,u=l.PBKDF2=(s=i.Base).extend({cfg:s.extend({keySize:4,hasher:l.SHA1,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var n=this.cfg,r=a.create(n.hasher,t),i=o.create(),s=o.create([1]),l=i.words,u=s.words,c=n.keySize,h=n.iterations;l.length<c;){var d=r.update(e).finalize(s);r.reset();for(var f=d.words,p=f.length,g=d,y=1;y<h;y++){g=r.finalize(g),r.reset();for(var m=g.words,v=0;v<p;v++)f[v]^=m[v]}i.concat(d),u[0]++}return i.sigBytes=4*c,i}}),r.PBKDF2=function(t,e,n){return u.create(n).compute(t,e)},c.PBKDF2)},"gb/T":function(t,e,n){var r,i;t.exports=(i=n("Ib8C"),n("OLod"),i.mode.ECB=((r=i.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),r.Decryptor=r.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),r),i.mode.ECB)},jO9C:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.pad.Iso97971={pad:function(t,e){t.concat(r.lib.WordArray.create([2147483648],1)),r.pad.ZeroPadding.pad(t,e)},unpad:function(t){r.pad.ZeroPadding.unpad(t),t.sigBytes--}},r.pad.Iso97971)},lPiR:function(t,e,n){var r;t.exports=(r=n("Ib8C"),function(t){var e=r,n=e.lib,i=n.WordArray,s=n.Hasher,o=e.algo,l=[],a=[];!function(){function e(e){for(var n=t.sqrt(e),r=2;r<=n;r++)if(!(e%r))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var r=2,i=0;i<64;)e(r)&&(i<8&&(l[i]=n(t.pow(r,.5))),a[i]=n(t.pow(r,1/3)),i++),r++}();var u=[],c=o.SHA256=s.extend({_doReset:function(){this._hash=new i.init(l.slice(0))},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],s=n[2],o=n[3],l=n[4],c=n[5],h=n[6],d=n[7],f=0;f<64;f++){if(f<16)u[f]=0|t[e+f];else{var p=u[f-15],g=u[f-2];u[f]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+u[f-7]+((g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10)+u[f-16]}var y=r&i^r&s^i&s,m=d+((l<<26|l>>>6)^(l<<21|l>>>11)^(l<<7|l>>>25))+(l&c^~l&h)+a[f]+u[f];d=h,h=c,c=l,l=o+m|0,o=s,s=i,i=r,r=m+(((r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22))+y)|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+s|0,n[3]=n[3]+o|0,n[4]=n[4]+l|0,n[5]=n[5]+c|0,n[6]=n[6]+h|0,n[7]=n[7]+d|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=t.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=s._createHelper(c),e.HmacSHA256=s._createHmacHelper(c)}(Math),r.SHA256)},oRuE:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.pad.Iso10126={pad:function(t,e){var n=4*e,i=n-t.sigBytes%n;t.concat(r.lib.WordArray.random(i-1)).concat(r.lib.WordArray.create([i<<24],1))},unpad:function(t){t.sigBytes-=255&t.words[t.sigBytes-1>>>2]}},r.pad.Iso10126)},pA7S:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("ETIr"),n("cv67"),n("K3mO"),n("OLod"),function(){var t=r,e=t.lib,n=e.WordArray,i=e.BlockCipher,s=t.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],l=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],a=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],c=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],h=s.DES=i.extend({_doReset:function(){for(var t=this._key.words,e=[],n=0;n<56;n++){var r=o[n]-1;e[n]=t[r>>>5]>>>31-r%32&1}for(var i=this._subKeys=[],s=0;s<16;s++){var u=i[s]=[],c=a[s];for(n=0;n<24;n++)u[n/6|0]|=e[(l[n]-1+c)%28]<<31-n%6,u[4+(n/6|0)]|=e[28+(l[n+24]-1+c)%28]<<31-n%6;for(u[0]=u[0]<<1|u[0]>>>31,n=1;n<7;n++)u[n]=u[n]>>>4*(n-1)+3;u[7]=u[7]<<5|u[7]>>>27}var h=this._invSubKeys=[];for(n=0;n<16;n++)h[n]=i[15-n]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,n){this._lBlock=t[e],this._rBlock=t[e+1],d.call(this,4,252645135),d.call(this,16,65535),f.call(this,2,858993459),f.call(this,8,16711935),d.call(this,1,1431655765);for(var r=0;r<16;r++){for(var i=n[r],s=this._lBlock,o=this._rBlock,l=0,a=0;a<8;a++)l|=u[a][((o^i[a])&c[a])>>>0];this._lBlock=o,this._rBlock=s^l}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,d.call(this,1,1431655765),f.call(this,8,16711935),f.call(this,2,858993459),d.call(this,16,65535),d.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function d(t,e){var n=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=n,this._lBlock^=n<<t}function f(t,e){var n=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=n,this._rBlock^=n<<t}t.DES=i._createHelper(h);var p=s.TripleDES=i.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),i=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=h.createEncryptor(n.create(e)),this._des2=h.createEncryptor(n.create(r)),this._des3=h.createEncryptor(n.create(i))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=i._createHelper(p)}(),r.TripleDES)},qBft:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.pad.AnsiX923={pad:function(t,e){var n=t.sigBytes,r=4*e,i=r-n%r,s=n+i-1;t.clamp(),t.words[s>>>2]|=i<<24-s%4*8,t.sigBytes+=i},unpad:function(t){t.sigBytes-=255&t.words[t.sigBytes-1>>>2]}},r.pad.Ansix923)},qM6L:function(t,e,n){var r;t.exports=(r=n("Ib8C"),function(){var t=r.lib.WordArray,e=r.enc;function n(t){return t<<8&4278255360|t>>>8&16711935}e.Utf16=e.Utf16BE={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i+=2)r.push(String.fromCharCode(e[i>>>2]>>>16-i%4*8&65535));return r.join("")},parse:function(e){for(var n=e.length,r=[],i=0;i<n;i++)r[i>>>1]|=e.charCodeAt(i)<<16-i%2*16;return t.create(r,2*n)}},e.Utf16LE={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],s=0;s<r;s+=2){var o=n(e[s>>>2]>>>16-s%4*8&65535);i.push(String.fromCharCode(o))}return i.join("")},parse:function(e){for(var r=e.length,i=[],s=0;s<r;s++)i[s>>>1]|=n(e.charCodeAt(s)<<16-s%2*16);return t.create(i,2*r)}}}(),r.enc.Utf16)},qu8F:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.mode.CTRGladman=function(){var t=r.lib.BlockCipherMode.extend();function e(t){if(255==(t>>24&255)){var e=t>>16&255,n=t>>8&255,r=255&t;255===e?(e=0,255===n?(n=0,255===r?r=0:++r):++n):++e,t=0,t+=e<<16,t+=n<<8,t+=r}else t+=1<<24;return t}var n=t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,i=r.blockSize,s=this._iv,o=this._counter;s&&(o=this._counter=s.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(o);var l=o.slice(0);r.encryptBlock(l,0);for(var a=0;a<i;a++)t[n+a]^=l[a]}});return t.Decryptor=n,t}(),r.mode.CTRGladman)},uGsb:function(t,e,n){var r,i,s,o,l,a,u,c;t.exports=(c=n("Ib8C"),n("MlIO"),n("1uat"),s=(i=(r=c).x64).Word,o=i.WordArray,u=(l=r.algo).SHA384=(a=l.SHA512).extend({_doReset:function(){this._hash=new o.init([new s.init(3418070365,3238371032),new s.init(1654270250,914150663),new s.init(2438529370,812702999),new s.init(355462360,4144912697),new s.init(1731405415,4290775857),new s.init(2394180231,1750603025),new s.init(3675008525,1694076839),new s.init(1203062813,3204075428)])},_doFinalize:function(){var t=a._doFinalize.call(this);return t.sigBytes-=16,t}}),r.SHA384=a._createHelper(u),r.HmacSHA384=a._createHmacHelper(u),c.SHA384)},uGxW:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("OLod"),r.pad.NoPadding={pad:function(){},unpad:function(){}},r.pad.NoPadding)},w7YG:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("ETIr"),n("cv67"),n("K3mO"),n("OLod"),function(){var t=r,e=t.lib.StreamCipher,n=t.algo,i=n.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,n=t.sigBytes,r=this._S=[],i=0;i<256;i++)r[i]=i;i=0;for(var s=0;i<256;i++){var o=i%n,l=r[i];r[i]=r[s=(s+r[i]+(e[o>>>2]>>>24-o%4*8&255))%256],r[s]=l}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=s.call(this)},keySize:8,ivSize:0});function s(){for(var t=this._S,e=this._i,n=this._j,r=0,i=0;i<4;i++){var s=t[e=(e+1)%256];t[e]=t[n=(n+t[e])%256],t[n]=s,r|=t[(t[e]+t[n])%256]<<24-8*i}return this._i=e,this._j=n,r}t.RC4=e._createHelper(i);var o=n.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)s.call(this)}});t.RC4Drop=e._createHelper(o)}(),r.RC4)},wZgz:function(t,e,n){var r;t.exports=(r=n("Ib8C"),n("ETIr"),n("cv67"),n("K3mO"),n("OLod"),function(){var t=r,e=t.lib.BlockCipher,n=t.algo,i=[],s=[],o=[],l=[],a=[],u=[],c=[],h=[],d=[],f=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var n=0,r=0;for(e=0;e<256;e++){var p=r^r<<1^r<<2^r<<3^r<<4;i[n]=p=p>>>8^255&p^99,s[p]=n;var g,y=t[n],m=t[y],v=t[m];o[n]=(g=257*t[p]^16843008*p)<<24|g>>>8,l[n]=g<<16|g>>>16,a[n]=g<<8|g>>>24,u[n]=g,c[p]=(g=16843009*v^65537*m^257*y^16843008*n)<<24|g>>>8,h[p]=g<<16|g>>>16,d[p]=g<<8|g>>>24,f[p]=g,n?(n=y^t[t[t[v^y]]],r^=t[t[r]]):n=r=1}}();var p=[0,1,2,4,8,16,32,64,128,27,54],g=n.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,n=t.sigBytes/4,r=4*((this._nRounds=n+6)+1),s=this._keySchedule=[],o=0;o<r;o++)o<n?s[o]=e[o]:(u=s[o-1],o%n?n>6&&o%n==4&&(u=i[u>>>24]<<24|i[u>>>16&255]<<16|i[u>>>8&255]<<8|i[255&u]):(u=i[(u=u<<8|u>>>24)>>>24]<<24|i[u>>>16&255]<<16|i[u>>>8&255]<<8|i[255&u],u^=p[o/n|0]<<24),s[o]=s[o-n]^u);for(var l=this._invKeySchedule=[],a=0;a<r;a++){if(o=r-a,a%4)var u=s[o];else u=s[o-4];l[a]=a<4||o<=4?u:c[i[u>>>24]]^h[i[u>>>16&255]]^d[i[u>>>8&255]]^f[i[255&u]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,o,l,a,u,i)},decryptBlock:function(t,e){var n=t[e+1];t[e+1]=t[e+3],t[e+3]=n,this._doCryptBlock(t,e,this._invKeySchedule,c,h,d,f,s),n=t[e+1],t[e+1]=t[e+3],t[e+3]=n},_doCryptBlock:function(t,e,n,r,i,s,o,l){for(var a=this._nRounds,u=t[e]^n[0],c=t[e+1]^n[1],h=t[e+2]^n[2],d=t[e+3]^n[3],f=4,p=1;p<a;p++){var g=r[u>>>24]^i[c>>>16&255]^s[h>>>8&255]^o[255&d]^n[f++],y=r[c>>>24]^i[h>>>16&255]^s[d>>>8&255]^o[255&u]^n[f++],m=r[h>>>24]^i[d>>>16&255]^s[u>>>8&255]^o[255&c]^n[f++],v=r[d>>>24]^i[u>>>16&255]^s[c>>>8&255]^o[255&h]^n[f++];u=g,c=y,h=m,d=v}g=(l[u>>>24]<<24|l[c>>>16&255]<<16|l[h>>>8&255]<<8|l[255&d])^n[f++],y=(l[c>>>24]<<24|l[h>>>16&255]<<16|l[d>>>8&255]<<8|l[255&u])^n[f++],m=(l[h>>>24]<<24|l[d>>>16&255]<<16|l[u>>>8&255]<<8|l[255&c])^n[f++],v=(l[d>>>24]<<24|l[u>>>16&255]<<16|l[c>>>8&255]<<8|l[255&h])^n[f++],t[e]=g,t[e+1]=y,t[e+2]=m,t[e+3]=v},keySize:8});t.AES=e._createHelper(g)}(),r.AES)},zUnb:function(t,e,n){"use strict";function r(t){return"function"==typeof t}n.r(e);let i=!1;const s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){if(t){const t=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+t.stack)}else i&&console.log("RxJS: Back to a better error behavior. Thank you. <3");i=t},get useDeprecatedSynchronousErrorHandling(){return i}};function o(t){setTimeout(()=>{throw t},0)}const l={closed:!0,next(t){},error(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;o(t)},complete(){}},a=(()=>Array.isArray||(t=>t&&"number"==typeof t.length))();function u(t){return null!==t&&"object"==typeof t}const c=(()=>{function t(t){return Error.call(this),this.message=t?`${t.length} errors occurred during unsubscription:\n${t.map((t,e)=>`${e+1}) ${t.toString()}`).join("\n  ")}`:"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t})();let h=(()=>{class t{constructor(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}unsubscribe(){let e;if(this.closed)return;let{_parentOrParents:n,_unsubscribe:i,_subscriptions:s}=this;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(let t=0;t<n.length;++t)n[t].remove(this);if(r(i))try{i.call(this)}catch(o){e=o instanceof c?d(o.errors):[o]}if(a(s)){let t=-1,n=s.length;for(;++t<n;){const n=s[t];if(u(n))try{n.unsubscribe()}catch(o){e=e||[],o instanceof c?e=e.concat(d(o.errors)):e.push(o)}}}if(e)throw new c(e)}add(e){let n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){const e=n;n=new t,n._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}let{_parentOrParents:r}=n;if(null===r)n._parentOrParents=this;else if(r instanceof t){if(r===this)return n;n._parentOrParents=[r,this]}else{if(-1!==r.indexOf(this))return n;r.push(this)}const i=this._subscriptions;return null===i?this._subscriptions=[n]:i.push(n),n}remove(t){const e=this._subscriptions;if(e){const n=e.indexOf(t);-1!==n&&e.splice(n,1)}}}return t.EMPTY=function(t){return t.closed=!0,t}(new t),t})();function d(t){return t.reduce((t,e)=>t.concat(e instanceof c?e.errors:e),[])}const f=(()=>"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random())();class p extends h{constructor(t,e,n){switch(super(),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=l;break;case 1:if(!t){this.destination=l;break}if("object"==typeof t){t instanceof p?(this.syncErrorThrowable=t.syncErrorThrowable,this.destination=t,t.add(this)):(this.syncErrorThrowable=!0,this.destination=new g(this,t));break}default:this.syncErrorThrowable=!0,this.destination=new g(this,t,e,n)}}[f](){return this}static create(t,e,n){const r=new p(t,e,n);return r.syncErrorThrowable=!1,r}next(t){this.isStopped||this._next(t)}error(t){this.isStopped||(this.isStopped=!0,this._error(t))}complete(){this.isStopped||(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe())}_next(t){this.destination.next(t)}_error(t){this.destination.error(t),this.unsubscribe()}_complete(){this.destination.complete(),this.unsubscribe()}_unsubscribeAndRecycle(){const{_parentOrParents:t}=this;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this}}class g extends p{constructor(t,e,n,i){let s;super(),this._parentSubscriber=t;let o=this;r(e)?s=e:e&&(s=e.next,n=e.error,i=e.complete,e!==l&&(o=Object.create(e),r(o.unsubscribe)&&this.add(o.unsubscribe.bind(o)),o.unsubscribe=this.unsubscribe.bind(this))),this._context=o,this._next=s,this._error=n,this._complete=i}next(t){if(!this.isStopped&&this._next){const{_parentSubscriber:e}=this;s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}}error(t){if(!this.isStopped){const{_parentSubscriber:e}=this,{useDeprecatedSynchronousErrorHandling:n}=s;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):o(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;o(t)}}}complete(){if(!this.isStopped){const{_parentSubscriber:t}=this;if(this._complete){const e=()=>this._complete.call(this._context);s.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}}__tryOrUnsub(t,e){try{t.call(this._context,e)}catch(n){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw n;o(n)}}__tryOrSetError(t,e,n){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(r){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=r,t.syncErrorThrown=!0,!0):(o(r),!0)}return!1}_unsubscribe(){const{_parentSubscriber:t}=this;this._context=null,this._parentSubscriber=null,t.unsubscribe()}}const y=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")();function m(){}let v=(()=>{class t{constructor(t){this._isScalar=!1,t&&(this._subscribe=t)}lift(e){const n=new t;return n.source=this,n.operator=e,n}subscribe(t,e,n){const{operator:r}=this,i=function(t,e,n){if(t){if(t instanceof p)return t;if(t[f])return t[f]()}return t||e||n?new p(t,e,n):new p(l)}(t,e,n);if(i.add(r?r.call(i,this.source):this.source||s.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),s.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i}_trySubscribe(t){try{return this._subscribe(t)}catch(e){s.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),function(t){for(;t;){const{closed:e,destination:n,isStopped:r}=t;if(e||r)return!1;t=n&&n instanceof p?n:null}return!0}(t)?t.error(e):console.warn(e)}}forEach(t,e){return new(e=b(e))((e,n)=>{let r;r=this.subscribe(e=>{try{t(e)}catch(i){n(i),r&&r.unsubscribe()}},n,e)})}_subscribe(t){const{source:e}=this;return e&&e.subscribe(t)}[y](){return this}pipe(...t){return 0===t.length?this:((e=t)?1===e.length?e[0]:function(t){return e.reduce((t,e)=>e(t),t)}:m)(this);var e}toPromise(t){return new(t=b(t))((t,e)=>{let n;this.subscribe(t=>n=t,t=>e(t),()=>t(n))})}}return t.create=e=>new t(e),t})();function b(t){if(t||(t=s.Promise||Promise),!t)throw new Error("no Promise impl found");return t}const w=(()=>{function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t})();class C extends h{constructor(t,e){super(),this.subject=t,this.subscriber=e,this.closed=!1}unsubscribe(){if(this.closed)return;this.closed=!0;const t=this.subject,e=t.observers;if(this.subject=null,!e||0===e.length||t.isStopped||t.closed)return;const n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}class k extends p{constructor(t){super(t),this.destination=t}}let A=(()=>{class t extends v{constructor(){super(),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}[f](){return new k(this)}lift(t){const e=new x(this,this);return e.operator=t,e}next(t){if(this.closed)throw new w;if(!this.isStopped){const{observers:e}=this,n=e.length,r=e.slice();for(let i=0;i<n;i++)r[i].next(t)}}error(t){if(this.closed)throw new w;this.hasError=!0,this.thrownError=t,this.isStopped=!0;const{observers:e}=this,n=e.length,r=e.slice();for(let i=0;i<n;i++)r[i].error(t);this.observers.length=0}complete(){if(this.closed)throw new w;this.isStopped=!0;const{observers:t}=this,e=t.length,n=t.slice();for(let r=0;r<e;r++)n[r].complete();this.observers.length=0}unsubscribe(){this.isStopped=!0,this.closed=!0,this.observers=null}_trySubscribe(t){if(this.closed)throw new w;return super._trySubscribe(t)}_subscribe(t){if(this.closed)throw new w;return this.hasError?(t.error(this.thrownError),h.EMPTY):this.isStopped?(t.complete(),h.EMPTY):(this.observers.push(t),new C(this,t))}asObservable(){const t=new v;return t.source=this,t}}return t.create=(t,e)=>new x(t,e),t})();class x extends A{constructor(t,e){super(),this.destination=t,this.source=e}next(t){const{destination:e}=this;e&&e.next&&e.next(t)}error(t){const{destination:e}=this;e&&e.error&&this.destination.error(t)}complete(){const{destination:t}=this;t&&t.complete&&this.destination.complete()}_subscribe(t){const{source:e}=this;return e?this.source.subscribe(t):h.EMPTY}}class E extends p{constructor(t,e,n){super(),this.parent=t,this.outerValue=e,this.outerIndex=n,this.index=0}_next(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)}_error(t){this.parent.notifyError(t,this),this.unsubscribe()}_complete(){this.parent.notifyComplete(this),this.unsubscribe()}}const T=t=>e=>{for(let n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()};function S(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}const I=S(),O=t=>t&&"number"==typeof t.length&&"function"!=typeof t;function N(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}const D=t=>{if(t&&"function"==typeof t[y])return r=t,t=>{const e=r[y]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(O(t))return T(t);if(N(t))return n=t,t=>(n.then(e=>{t.closed||(t.next(e),t.complete())},e=>t.error(e)).then(null,o),t);if(t&&"function"==typeof t[I])return e=t,t=>{const n=e[I]();for(;;){const e=n.next();if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return"function"==typeof n.return&&t.add(()=>{n.return&&n.return()}),t};{const e=u(t)?"an invalid object":`'${t}'`;throw new TypeError(`You provided ${e} where a stream was expected.`+" You can provide an Observable, Promise, Array, or Iterable.")}var e,n,r};class P extends p{notifyNext(t,e,n,r,i){this.destination.next(e)}notifyError(t,e){this.destination.error(t)}notifyComplete(t){this.destination.complete()}}function M(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new V(t,e))}}class V{constructor(t,e){this.project=t,this.thisArg=e}call(t,e){return e.subscribe(new R(t,this.project,this.thisArg))}}class R extends p{constructor(t,e,n){super(t),this.project=e,this.count=0,this.thisArg=n||this}_next(t){let e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(n){return void this.destination.error(n)}this.destination.next(e)}}function j(t,e){return new v(n=>{const r=new h;let i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r})}function z(t,e){return e?function(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[y]}(t))return function(t,e){return new v(n=>{const r=new h;return r.add(e.schedule(()=>{const i=t[y]();r.add(i.subscribe({next(t){r.add(e.schedule(()=>n.next(t)))},error(t){r.add(e.schedule(()=>n.error(t)))},complete(){r.add(e.schedule(()=>n.complete()))}}))})),r})}(t,e);if(N(t))return function(t,e){return new v(n=>{const r=new h;return r.add(e.schedule(()=>t.then(t=>{r.add(e.schedule(()=>{n.next(t),r.add(e.schedule(()=>n.complete()))}))},t=>{r.add(e.schedule(()=>n.error(t)))}))),r})}(t,e);if(O(t))return j(t,e);if(function(t){return t&&"function"==typeof t[I]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new v(n=>{const r=new h;let i;return r.add(()=>{i&&"function"==typeof i.return&&i.return()}),r.add(e.schedule(()=>{i=t[I](),r.add(e.schedule((function(){if(n.closed)return;let t,e;try{const n=i.next();t=n.value,e=n.done}catch(r){return void n.error(r)}e?n.complete():(n.next(t),this.schedule())})))})),r})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}(t,e):t instanceof v?t:new v(D(t))}class F{constructor(t,e=Number.POSITIVE_INFINITY){this.project=t,this.concurrent=e}call(t,e){return e.subscribe(new B(t,this.project,this.concurrent))}}class B extends P{constructor(t,e,n=Number.POSITIVE_INFINITY){super(t),this.project=e,this.concurrent=n,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}_next(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)}_tryNext(t){let e;const n=this.index++;try{e=this.project(t,n)}catch(r){return void this.destination.error(r)}this.active++,this._innerSub(e,t,n)}_innerSub(t,e,n){const r=new E(this,e,n),i=this.destination;i.add(r);const s=function(t,e,n,r,i=new E(t,n,r)){if(!i.closed)return e instanceof v?e.subscribe(i):D(e)(i)}(this,t,void 0,void 0,r);s!==r&&i.add(s)}_complete(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}notifyNext(t,e,n,r,i){this.destination.next(e)}notifyComplete(t){const e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}function H(t){return t}function G(){return function(t){return t.lift(new L(t))}}class L{constructor(t){this.connectable=t}call(t,e){const{connectable:n}=this;n._refCount++;const r=new q(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i}}class q extends p{constructor(t,e){super(t),this.connectable=e}_unsubscribe(){const{connectable:t}=this;if(!t)return void(this.connection=null);this.connectable=null;const e=t._refCount;if(e<=0)return void(this.connection=null);if(t._refCount=e-1,e>1)return void(this.connection=null);const{connection:n}=this,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}class X extends v{constructor(t,e){super(),this.source=t,this.subjectFactory=e,this._refCount=0,this._isComplete=!1}_subscribe(t){return this.getSubject().subscribe(t)}getSubject(){const t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject}connect(){let t=this._connection;return t||(this._isComplete=!1,t=this._connection=new h,t.add(this.source.subscribe(new K(this.getSubject(),this))),t.closed&&(this._connection=null,t=h.EMPTY)),t}refCount(){return G()(this)}}const Z=(()=>{const t=X.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}})();class K extends k{constructor(t,e){super(t),this.connectable=e}_error(t){this._unsubscribe(),super._error(t)}_complete(){this.connectable._isComplete=!0,this._unsubscribe(),super._complete()}_unsubscribe(){const t=this.connectable;if(t){this.connectable=null;const e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}}}function Y(){return new A}function Q(t){return{toString:t}.toString()}function W(t,e,n){return Q(()=>{const r=function(t){return function(...e){if(t){const n=t(...e);for(const t in n)this[t]=n[t]}}}(e);function i(...t){if(this instanceof i)return r.apply(this,t),this;const e=new i(...t);return n.annotation=e,n;function n(t,n,r){const i=t.hasOwnProperty("__parameters__")?t.__parameters__:Object.defineProperty(t,"__parameters__",{value:[]}).__parameters__;for(;i.length<=r;)i.push(null);return(i[r]=i[r]||[]).push(e),t}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=t,i.annotationCls=i,i})}const J=W("Inject",t=>({token:t})),U=W("Optional"),_=W("Self"),tt=W("SkipSelf");var et=function(t){return t[t.Default=0]="Default",t[t.Host=1]="Host",t[t.Self=2]="Self",t[t.SkipSelf=4]="SkipSelf",t[t.Optional=8]="Optional",t}({});function nt(t){for(let e in t)if(t[e]===nt)return e;throw Error("Could not find renamed property on target object.")}function rt(t,e){for(const n in e)e.hasOwnProperty(n)&&!t.hasOwnProperty(n)&&(t[n]=e[n])}function it(t){return{token:t.token,providedIn:t.providedIn||null,factory:t.factory,value:void 0}}function st(t){return{factory:t.factory,providers:t.providers||[],imports:t.imports||[]}}function ot(t){return lt(t,t[ut])||lt(t,t[dt])}function lt(t,e){return e&&e.token===t?e:null}function at(t){return t&&(t.hasOwnProperty(ct)||t.hasOwnProperty(ft))?t[ct]:null}const ut=nt({"\u0275prov":nt}),ct=nt({"\u0275inj":nt}),ht=nt({"\u0275provFallback":nt}),dt=nt({ngInjectableDef:nt}),ft=nt({ngInjectorDef:nt});function pt(t){if("string"==typeof t)return t;if(Array.isArray(t))return"["+t.map(pt).join(", ")+"]";if(null==t)return""+t;if(t.overriddenName)return`${t.overriddenName}`;if(t.name)return`${t.name}`;const e=t.toString();if(null==e)return""+e;const n=e.indexOf("\n");return-1===n?e:e.substring(0,n)}function gt(t,e){return null==t||""===t?null===e?"":e:null==e||""===e?t:t+" "+e}const yt=nt({__forward_ref__:nt});function mt(t){return t.__forward_ref__=mt,t.toString=function(){return pt(this())},t}function vt(t){return bt(t)?t():t}function bt(t){return"function"==typeof t&&t.hasOwnProperty(yt)&&t.__forward_ref__===mt}const wt="undefined"!=typeof globalThis&&globalThis,Ct="undefined"!=typeof window&&window,kt="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,At="undefined"!=typeof global&&global,xt=wt||At||Ct||kt,Et=nt({"\u0275cmp":nt}),Tt=nt({"\u0275dir":nt}),St=nt({"\u0275pipe":nt}),It=nt({"\u0275mod":nt}),Ot=nt({"\u0275loc":nt}),Nt=nt({"\u0275fac":nt}),Dt=nt({__NG_ELEMENT_ID__:nt});class Pt{constructor(t,e){this._desc=t,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,"number"==typeof e?this.__NG_ELEMENT_ID__=e:void 0!==e&&(this.\u0275prov=it({token:this,providedIn:e.providedIn||"root",factory:e.factory}))}toString(){return`InjectionToken ${this._desc}`}}const Mt=new Pt("INJECTOR",-1),Vt={},Rt=/\n/gm,jt=nt({provide:String,useValue:nt});let zt,Ft=void 0;function Bt(t){const e=Ft;return Ft=t,e}function Ht(t){const e=zt;return zt=t,e}function Gt(t,e=et.Default){if(void 0===Ft)throw new Error("inject() must be called from an injection context");return null===Ft?qt(t,void 0,e):Ft.get(t,e&et.Optional?null:void 0,e)}function Lt(t,e=et.Default){return(zt||Gt)(vt(t),e)}function qt(t,e,n){const r=ot(t);if(r&&"root"==r.providedIn)return void 0===r.value?r.value=r.factory():r.value;if(n&et.Optional)return null;if(void 0!==e)return e;throw new Error(`Injector: NOT_FOUND [${pt(t)}]`)}function Xt(t){const e=[];for(let n=0;n<t.length;n++){const r=vt(t[n]);if(Array.isArray(r)){if(0===r.length)throw new Error("Arguments array must have arguments.");let t=void 0,n=et.Default;for(let e=0;e<r.length;e++){const i=r[e];i instanceof U||"Optional"===i.ngMetadataName||i===U?n|=et.Optional:i instanceof tt||"SkipSelf"===i.ngMetadataName||i===tt?n|=et.SkipSelf:i instanceof _||"Self"===i.ngMetadataName||i===_?n|=et.Self:t=i instanceof J||i===J?i.token:i}e.push(Lt(t,n))}else e.push(Lt(r))}return e}class Zt{get(t,e=Vt){if(e===Vt){const e=new Error(`NullInjectorError: No provider for ${pt(t)}!`);throw e.name="NullInjectorError",e}return e}}class Kt{}function Yt(t,e){t.forEach(t=>Array.isArray(t)?Yt(t,e):e(t))}function Qt(t,e,n){e>=t.length?t.push(n):t.splice(e,0,n)}function Wt(t,e){return e>=t.length-1?t.pop():t.splice(e,1)[0]}function Jt(t,e,n){let r=_t(t,e);return r>=0?t[1|r]=n:(r=~r,function(t,e,n,r){let i=t.length;if(i==e)t.push(n,r);else if(1===i)t.push(r,t[0]),t[0]=n;else{for(i--,t.push(t[i-1],t[i]);i>e;)t[i]=t[i-2],i--;t[e]=n,t[e+1]=r}}(t,r,e,n)),r}function Ut(t,e){const n=_t(t,e);if(n>=0)return t[1|n]}function _t(t,e){return function(t,e,n){let r=0,i=t.length>>1;for(;i!==r;){const n=r+(i-r>>1),s=t[n<<1];if(e===s)return n<<1;s>e?i=n:r=n+1}return~(i<<1)}(t,e)}const $t=function(){var t={OnPush:0,Default:1};return t[t.OnPush]="OnPush",t[t.Default]="Default",t}(),te=function(){var t={Emulated:0,Native:1,None:2,ShadowDom:3};return t[t.Emulated]="Emulated",t[t.Native]="Native",t[t.None]="None",t[t.ShadowDom]="ShadowDom",t}(),ee={},ne=[];let re=0;function ie(t){return Q(()=>{const e=t.type,n=e.prototype,r={},i={type:e,providersResolver:null,decls:t.decls,vars:t.vars,factory:null,template:t.template||null,consts:t.consts||null,ngContentSelectors:t.ngContentSelectors,hostBindings:t.hostBindings||null,hostVars:t.hostVars||0,hostAttrs:t.hostAttrs||null,contentQueries:t.contentQueries||null,declaredInputs:r,inputs:null,outputs:null,exportAs:t.exportAs||null,onChanges:null,onInit:n.ngOnInit||null,doCheck:n.ngDoCheck||null,afterContentInit:n.ngAfterContentInit||null,afterContentChecked:n.ngAfterContentChecked||null,afterViewInit:n.ngAfterViewInit||null,afterViewChecked:n.ngAfterViewChecked||null,onDestroy:n.ngOnDestroy||null,onPush:t.changeDetection===$t.OnPush,directiveDefs:null,pipeDefs:null,selectors:t.selectors||ne,viewQuery:t.viewQuery||null,features:t.features||null,data:t.data||{},encapsulation:t.encapsulation||te.Emulated,id:"c",styles:t.styles||ne,_:null,setInput:null,schemas:t.schemas||null,tView:null},s=t.directives,o=t.features,l=t.pipes;return i.id+=re++,i.inputs=ue(t.inputs,r),i.outputs=ue(t.outputs),o&&o.forEach(t=>t(i)),i.directiveDefs=s?()=>("function"==typeof s?s():s).map(se):null,i.pipeDefs=l?()=>("function"==typeof l?l():l).map(oe):null,i})}function se(t){return he(t)||function(t){return t[Tt]||null}(t)}function oe(t){return function(t){return t[St]||null}(t)}const le={};function ae(t){const e={type:t.type,bootstrap:t.bootstrap||ne,declarations:t.declarations||ne,imports:t.imports||ne,exports:t.exports||ne,transitiveCompileScopes:null,schemas:t.schemas||null,id:t.id||null};return null!=t.id&&Q(()=>{le[t.id]=t.type}),e}function ue(t,e){if(null==t)return ee;const n={};for(const r in t)if(t.hasOwnProperty(r)){let i=t[r],s=i;Array.isArray(i)&&(s=i[1],i=i[0]),n[i]=r,e&&(e[i]=s)}return n}const ce=ie;function he(t){return t[Et]||null}function de(t,e){return t.hasOwnProperty(Nt)?t[Nt]:null}function fe(t,e){const n=t[It]||null;if(!n&&!0===e)throw new Error(`Type ${pt(t)} does not have '\u0275mod' property.`);return n}function pe(t){return Array.isArray(t)&&"object"==typeof t[1]}function ge(t){return Array.isArray(t)&&!0===t[1]}function ye(t){return 0!=(8&t.flags)}function me(t){return 2==(2&t.flags)}function ve(t){return 1==(1&t.flags)}function be(t){return null!==t.template}function we(t){return 0!=(512&t[2])}let Ce=void 0;function ke(t){return!!t.listen}const Ae={createRenderer:(t,e)=>void 0!==Ce?Ce:"undefined"!=typeof document?document:void 0};function xe(t){for(;Array.isArray(t);)t=t[0];return t}function Ee(t,e){return xe(e[t+19])}function Te(t,e){return xe(e[t.index])}function Se(t,e){return t.data[e+19]}function Ie(t,e){const n=e[t];return pe(n)?n:n[0]}function Oe(t){const e=function(t){return t.__ngContext__||null}(t);return e?Array.isArray(e)?e:e.lView:null}function Ne(t){return 128==(128&t[2])}function De(t,e){return null===t||null==e?null:t[e]}function Pe(t){t[18]=0}const Me={lFrame:Qe(null),bindingsEnabled:!0,checkNoChangesMode:!1};function Ve(){return Me.bindingsEnabled}function Re(){return Me.lFrame.lView}function je(){return Me.lFrame.tView}function ze(){return Me.lFrame.previousOrParentTNode}function Fe(t,e){Me.lFrame.previousOrParentTNode=t,Me.lFrame.isParent=e}function Be(){return Me.lFrame.isParent}function He(){return Me.checkNoChangesMode}function Ge(t){Me.checkNoChangesMode=t}function Le(){return Me.lFrame.bindingIndex++}function qe(t,e){const n=Me.lFrame;n.bindingIndex=n.bindingRootIndex=t,n.currentDirectiveIndex=e}function Xe(t){Me.lFrame.currentQueryIndex=t}function Ze(t,e){const n=Ye();Me.lFrame=n,n.previousOrParentTNode=e,n.lView=t}function Ke(t,e){const n=Ye(),r=t[1];Me.lFrame=n,n.previousOrParentTNode=e,n.lView=t,n.tView=r,n.contextLView=t,n.bindingIndex=r.bindingStartIndex}function Ye(){const t=Me.lFrame,e=null===t?null:t.child;return null===e?Qe(t):e}function Qe(t){const e={previousOrParentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:0,contextLView:null,elementDepthCount:0,currentNamespace:null,currentSanitizer:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:t,child:null};return null!==t&&(t.child=e),e}function We(){const t=Me.lFrame;return Me.lFrame=t.parent,t.previousOrParentTNode=null,t.lView=null,t}const Je=We;function Ue(){const t=We();t.isParent=!0,t.tView=null,t.selectedIndex=0,t.contextLView=null,t.elementDepthCount=0,t.currentDirectiveIndex=-1,t.currentNamespace=null,t.currentSanitizer=null,t.bindingRootIndex=-1,t.bindingIndex=-1,t.currentQueryIndex=0}function _e(){return Me.lFrame.selectedIndex}function $e(t){Me.lFrame.selectedIndex=t}function tn(){const t=Me.lFrame;return Se(t.tView,t.selectedIndex)}function en(t,e){for(let n=e.directiveStart,r=e.directiveEnd;n<r;n++){const e=t.data[n];e.afterContentInit&&(t.contentHooks||(t.contentHooks=[])).push(-n,e.afterContentInit),e.afterContentChecked&&((t.contentHooks||(t.contentHooks=[])).push(n,e.afterContentChecked),(t.contentCheckHooks||(t.contentCheckHooks=[])).push(n,e.afterContentChecked)),e.afterViewInit&&(t.viewHooks||(t.viewHooks=[])).push(-n,e.afterViewInit),e.afterViewChecked&&((t.viewHooks||(t.viewHooks=[])).push(n,e.afterViewChecked),(t.viewCheckHooks||(t.viewCheckHooks=[])).push(n,e.afterViewChecked)),null!=e.onDestroy&&(t.destroyHooks||(t.destroyHooks=[])).push(n,e.onDestroy)}}function nn(t,e,n){on(t,e,3,n)}function rn(t,e,n,r){(3&t[2])===n&&on(t,e,n,r)}function sn(t,e){let n=t[2];(3&n)===e&&(n&=1023,n+=1,t[2]=n)}function on(t,e,n,r){const i=null!=r?r:-1;let s=0;for(let o=void 0!==r?65535&t[18]:0;o<e.length;o++)if("number"==typeof e[o+1]){if(s=e[o],null!=r&&s>=r)break}else e[o]<0&&(t[18]+=65536),(s<i||-1==i)&&(ln(t,n,e,o),t[18]=(4294901760&t[18])+o+2),o++}function ln(t,e,n,r){const i=n[r]<0,s=n[r+1],o=t[i?-n[r]:n[r]];i?t[2]>>10<t[18]>>16&&(3&t[2])===e&&(t[2]+=1024,s.call(o)):s.call(o)}class an{constructor(t,e,n){this.factory=t,this.resolving=!1,this.canSeeViewProviders=e,this.injectImpl=n}}function un(t,e,n){const r=ke(t);let i=0;for(;i<n.length;){const s=n[i];if("number"==typeof s){if(0!==s)break;i++;const o=n[i++],l=n[i++],a=n[i++];r?t.setAttribute(e,l,a,o):e.setAttributeNS(o,l,a)}else{const o=s,l=n[++i];cn(o)?r&&t.setProperty(e,o,l):r?t.setAttribute(e,o,l):e.setAttribute(o,l),i++}}return i}function cn(t){return 64===t.charCodeAt(0)}function hn(t,e){if(null===e||0===e.length);else if(null===t||0===t.length)t=e.slice();else{let n=-1;for(let r=0;r<e.length;r++){const i=e[r];"number"==typeof i?n=i:0===n||dn(t,n,i,null,-1===n||2===n?e[++r]:null)}}return t}function dn(t,e,n,r,i){let s=0,o=t.length;if(-1===e)o=-1;else for(;s<t.length;){const n=t[s++];if("number"==typeof n){if(n===e){o=-1;break}if(n>e){o=s-1;break}}}for(;s<t.length;){const e=t[s];if("number"==typeof e)break;if(e===n){if(null===r)return void(null!==i&&(t[s+1]=i));if(r===t[s+1])return void(t[s+2]=i)}s++,null!==r&&s++,null!==i&&s++}-1!==o&&(t.splice(o,0,e),s=o+1),t.splice(s++,0,n),null!==r&&t.splice(s++,0,r),null!==i&&t.splice(s++,0,i)}function fn(t){return-1!==t}function pn(t){return 32767&t}function gn(t){return t>>16}function yn(t,e){let n=gn(t),r=e;for(;n>0;)r=r[15],n--;return r}function mn(t){return"string"==typeof t?t:null==t?"":""+t}function vn(t){return"function"==typeof t?t.name||t.toString():"object"==typeof t&&null!=t&&"function"==typeof t.type?t.type.name||t.type.toString():mn(t)}const bn=(()=>("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(xt))();function wn(t){return t instanceof Function?t():t}let Cn=!0;function kn(t){const e=Cn;return Cn=t,e}let An=0;function xn(t,e){const n=Tn(t,e);if(-1!==n)return n;const r=e[1];r.firstCreatePass&&(t.injectorIndex=e.length,En(r.data,t),En(e,null),En(r.blueprint,null));const i=Sn(t,e),s=t.injectorIndex;if(fn(i)){const t=pn(i),n=yn(i,e),r=n[1].data;for(let i=0;i<8;i++)e[s+i]=n[t+i]|r[t+i]}return e[s+8]=i,s}function En(t,e){t.push(0,0,0,0,0,0,0,0,e)}function Tn(t,e){return-1===t.injectorIndex||t.parent&&t.parent.injectorIndex===t.injectorIndex||null==e[t.injectorIndex+8]?-1:t.injectorIndex}function Sn(t,e){if(t.parent&&-1!==t.parent.injectorIndex)return t.parent.injectorIndex;let n=e[6],r=1;for(;n&&-1===n.injectorIndex;)n=(e=e[15])?e[6]:null,r++;return n?n.injectorIndex|r<<16:-1}function In(t,e,n){!function(t,e,n){let r="string"!=typeof n?n[Dt]:n.charCodeAt(0)||0;null==r&&(r=n[Dt]=An++);const i=255&r,s=1<<i,o=64&i,l=32&i,a=e.data;128&i?o?l?a[t+7]|=s:a[t+6]|=s:l?a[t+5]|=s:a[t+4]|=s:o?l?a[t+3]|=s:a[t+2]|=s:l?a[t+1]|=s:a[t]|=s}(t,e,n)}function On(t,e,n,r=et.Default,i){if(null!==t){const i=function(t){if("string"==typeof t)return t.charCodeAt(0)||0;const e=t[Dt];return"number"==typeof e&&e>0?255&e:e}(n);if("function"==typeof i){Ze(e,t);try{const t=i();if(null!=t||r&et.Optional)return t;throw new Error(`No provider for ${vn(n)}!`)}finally{Je()}}else if("number"==typeof i){if(-1===i)return new Rn(t,e);let s=null,o=Tn(t,e),l=-1,a=r&et.Host?e[16][6]:null;for((-1===o||r&et.SkipSelf)&&(l=-1===o?Sn(t,e):e[o+8],Vn(r,!1)?(s=e[1],o=pn(l),e=yn(l,e)):o=-1);-1!==o;){l=e[o+8];const t=e[1];if(Mn(i,o,t.data)){const t=Dn(o,e,n,s,r,a);if(t!==Nn)return t}Vn(r,e[1].data[o+8]===a)&&Mn(i,o,e)?(s=t,o=pn(l),e=yn(l,e)):o=-1}}}if(r&et.Optional&&void 0===i&&(i=null),0==(r&(et.Self|et.Host))){const t=e[9],s=Ht(void 0);try{return t?t.get(n,i,r&et.Optional):qt(n,i,r&et.Optional)}finally{Ht(s)}}if(r&et.Optional)return i;throw new Error(`NodeInjector: NOT_FOUND [${vn(n)}]`)}const Nn={};function Dn(t,e,n,r,i,s){const o=e[1],l=o.data[t+8],a=function(t,e,n,r,i){const s=t.providerIndexes,o=e.data,l=65535&s,a=t.directiveStart,u=s>>16,c=i?l+u:t.directiveEnd;for(let h=r?l:l+u;h<c;h++){const t=o[h];if(h<a&&n===t||h>=a&&t.type===n)return h}if(i){const t=o[a];if(t&&be(t)&&t.type===n)return a}return null}(l,o,n,null==r?me(l)&&Cn:r!=o&&3===l.type,i&et.Host&&s===l);return null!==a?Pn(e,o,a,l):Nn}function Pn(t,e,n,r){let i=t[n];const s=e.data;if(i instanceof an){const o=i;if(o.resolving)throw new Error(`Circular dep for ${vn(s[n])}`);const l=kn(o.canSeeViewProviders);let a;o.resolving=!0,o.injectImpl&&(a=Ht(o.injectImpl)),Ze(t,r);try{i=t[n]=o.factory(void 0,s,t,r),e.firstCreatePass&&n>=r.directiveStart&&function(t,e,n){const{onChanges:r,onInit:i,doCheck:s}=e;r&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,r)),i&&(n.preOrderHooks||(n.preOrderHooks=[])).push(-t,i),s&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t,s),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t,s))}(n,s[n],e)}finally{o.injectImpl&&Ht(a),kn(l),o.resolving=!1,Je()}}return i}function Mn(t,e,n){const r=64&t,i=32&t;let s;return s=128&t?r?i?n[e+7]:n[e+6]:i?n[e+5]:n[e+4]:r?i?n[e+3]:n[e+2]:i?n[e+1]:n[e],!!(s&1<<t)}function Vn(t,e){return!(t&et.Self||t&et.Host&&e)}class Rn{constructor(t,e){this._tNode=t,this._lView=e}get(t,e){return On(this._tNode,this._lView,t,void 0,e)}}function jn(t){return Q(()=>{const e=Object.getPrototypeOf(t.prototype).constructor,n=e[Nt]||function t(e){const n=e;if(bt(e))return()=>{const e=t(vt(n));return e?e():null};let r=de(n);if(null===r){const t=at(n);r=t&&t.factory}return r||null}(e);return null!==n?n:t=>new t})}function zn(t){return t.ngDebugContext}function Fn(t){return t.ngOriginalError}function Bn(t,...e){t.error(...e)}class Hn{constructor(){this._console=console}handleError(t){const e=this._findOriginalError(t),n=this._findContext(t),r=function(t){return t.ngErrorLogger||Bn}(t);r(this._console,"ERROR",t),e&&r(this._console,"ORIGINAL ERROR",e),n&&r(this._console,"ERROR CONTEXT",n)}_findContext(t){return t?zn(t)?zn(t):this._findContext(Fn(t)):null}_findOriginalError(t){let e=Fn(t);for(;e&&Fn(e);)e=Fn(e);return e}}let Gn=!0,Ln=!1;function qn(){return Ln=!0,Gn}function Xn(t,e){t.__ngContext__=e}function Zn(t){throw new Error(`Multiple components match node with tagname ${t.tagName}`)}function Kn(){throw new Error("Cannot mix multi providers and regular providers")}function Yn(t,e,n){let r=t.length;for(;;){const i=t.indexOf(e,n);if(-1===i)return i;if(0===i||t.charCodeAt(i-1)<=32){const n=e.length;if(i+n===r||t.charCodeAt(i+n)<=32)return i}n=i+1}}function Qn(t,e,n){let r=0;for(;r<t.length;){let i=t[r++];if(n&&"class"===i){if(i=t[r],-1!==Yn(i.toLowerCase(),e,0))return!0}else if(1===i){for(;r<t.length&&"string"==typeof(i=t[r++]);)if(i.toLowerCase()===e)return!0;return!1}}return!1}function Wn(t,e,n){return e===(0!==t.type||n?t.tagName:"ng-template")}function Jn(t,e,n){let r=4;const i=t.attrs||[],s=function(t){for(let n=0;n<t.length;n++)if(3===(e=t[n])||4===e||6===e)return n;var e;return t.length}(i);let o=!1;for(let l=0;l<e.length;l++){const a=e[l];if("number"!=typeof a){if(!o)if(4&r){if(r=2|1&r,""!==a&&!Wn(t,a,n)||""===a&&1===e.length){if(Un(r))return!1;o=!0}}else{const u=8&r?a:e[++l];if(8&r&&null!==t.attrs){if(!Qn(t.attrs,u,n)){if(Un(r))return!1;o=!0}continue}const c=_n(8&r?"class":a,i,0==t.type&&"ng-template"!==t.tagName,n);if(-1===c){if(Un(r))return!1;o=!0;continue}if(""!==u){let t;t=c>s?"":i[c+1].toLowerCase();const e=8&r?t:null;if(e&&-1!==Yn(e,u,0)||2&r&&u!==t){if(Un(r))return!1;o=!0}}}}else{if(!o&&!Un(r)&&!Un(a))return!1;if(o&&Un(a))continue;o=!1,r=a|1&r}}return Un(r)||o}function Un(t){return 0==(1&t)}function _n(t,e,n,r){if(null===e)return-1;let i=0;if(r||!n){let n=!1;for(;i<e.length;){const r=e[i];if(r===t)return i;if(3===r||6===r)n=!0;else{if(1===r||2===r){let t=e[++i];for(;"string"==typeof t;)t=e[++i];continue}if(4===r)break;if(0===r){i+=4;continue}}i+=n?1:2}return-1}return function(t,e){let n=t.indexOf(4);if(n>-1)for(n++;n<t.length;){if(t[n]===e)return n;n++}return-1}(e,t)}function $n(t,e,n=!1){for(let r=0;r<e.length;r++)if(Jn(t,e[r],n))return!0;return!1}function tr(t,e){return t?":not("+e.trim()+")":e}function er(t){let e=t[0],n=1,r=2,i="",s=!1;for(;n<t.length;){let o=t[n];if("string"==typeof o)if(2&r){const e=t[++n];i+="["+o+(e.length>0?'="'+e+'"':"")+"]"}else 8&r?i+="."+o:4&r&&(i+=" "+o);else""===i||Un(o)||(e+=tr(s,i),i=""),r=o,s=s||!Un(r);n++}return""!==i&&(e+=tr(s,i)),e}const nr={};function rr(t){const e=t[3];return ge(e)?e[3]:e}function ir(t){sr(je(),Re(),_e()+t,He())}function sr(t,e,n,r){if(!r)if(3==(3&e[2])){const r=t.preOrderCheckHooks;null!==r&&nn(e,r,n)}else{const r=t.preOrderHooks;null!==r&&rn(e,r,0,n)}$e(n)}function or(t,e){return t<<17|e<<2}function lr(t){return t>>17&32767}function ar(t){return 2|t}function ur(t){return(131068&t)>>2}function cr(t,e){return-131069&t|e<<2}function hr(t){return 1|t}function dr(t,e){const n=t.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const i=n[r],s=n[r+1];if(-1!==s){const n=t.data[s];Xe(i),n.contentQueries(2,e[s],s)}}}function fr(t,e,n){return ke(e)?e.createElement(t,n):null===n?e.createElement(t):e.createElementNS(n,t)}function pr(t,e,n,r,i,s,o,l,a,u){const c=e.blueprint.slice();return c[0]=i,c[2]=140|r,Pe(c),c[3]=c[15]=t,c[8]=n,c[10]=o||t&&t[10],c[11]=l||t&&t[11],c[12]=a||t&&t[12]||null,c[9]=u||t&&t[9]||null,c[6]=s,c[16]=2==e.type?t[16]:c,c}function gr(t,e,n,r,i,s){const o=n+19,l=t.data[o]||function(t,e,n,r,i,s){const o=ze(),l=Be(),a=l?o:o&&o.parent,u=t.data[n]=xr(0,a&&a!==e?a:null,r,n,i,s);return null===t.firstChild&&(t.firstChild=u),o&&(!l||null!=o.child||null===u.parent&&2!==o.type?l||(o.next=u):o.child=u),u}(t,e,o,r,i,s);return Fe(l,!0),l}function yr(t,e,n){Ke(e,e[6]);try{const r=t.viewQuery;null!==r&&Yr(1,r,n);const i=t.template;null!==i&&br(t,e,i,1,n),t.firstCreatePass&&(t.firstCreatePass=!1),t.staticContentQueries&&dr(t,e),t.staticViewQueries&&Yr(2,t.viewQuery,n);const s=t.components;null!==s&&function(t,e){for(let n=0;n<e.length;n++)Lr(t,e[n])}(e,s)}finally{e[2]&=-5,Ue()}}function mr(t,e,n,r){const i=e[2];if(256==(256&i))return;Ke(e,e[6]);const s=He();try{Pe(e),Me.lFrame.bindingIndex=t.bindingStartIndex,null!==n&&br(t,e,n,2,r);const o=3==(3&i);if(!s)if(o){const n=t.preOrderCheckHooks;null!==n&&nn(e,n,null)}else{const n=t.preOrderHooks;null!==n&&rn(e,n,0,null),sn(e,0)}if(function(t){let e=t[13];for(;null!==e;){let n;if(ge(e)&&(n=e[2])>>1==-1){for(let t=9;t<e.length;t++){const n=e[t],r=n[1];Ne(n)&&mr(r,n,r.template,n[8])}0!=(1&n)&&Hr(e,t[16])}e=e[4]}}(e),null!==t.contentQueries&&dr(t,e),!s)if(o){const n=t.contentCheckHooks;null!==n&&nn(e,n)}else{const n=t.contentHooks;null!==n&&rn(e,n,1),sn(e,1)}!function(t,e){try{const n=t.expandoInstructions;if(null!==n){let r=t.expandoStartIndex,i=-1,s=-1;for(let t=0;t<n.length;t++){const o=n[t];"number"==typeof o?o<=0?(s=0-o,$e(s),r+=9+n[++t],i=r):r+=o:(null!==o&&(qe(r,i),o(2,e[i])),i++)}}}finally{$e(-1)}}(t,e);const l=t.components;null!==l&&function(t,e){for(let n=0;n<e.length;n++)Gr(t,e[n])}(e,l);const a=t.viewQuery;if(null!==a&&Yr(2,a,r),!s)if(o){const n=t.viewCheckHooks;null!==n&&nn(e,n)}else{const n=t.viewHooks;null!==n&&rn(e,n,2),sn(e,2)}!0===t.firstUpdatePass&&(t.firstUpdatePass=!1),s||(e[2]&=-73)}finally{Ue()}}function vr(t,e,n,r){const i=e[10],s=!He(),o=4==(4&e[2]);try{s&&!o&&i.begin&&i.begin(),o&&yr(t,e,r),mr(t,e,n,r)}finally{s&&!o&&i.end&&i.end()}}function br(t,e,n,r,i){const s=_e();try{$e(-1),2&r&&e.length>19&&sr(t,e,0,He()),n(r,i)}finally{$e(s)}}function wr(t,e,n){Ve()&&(function(t,e,n,r){const i=n.directiveStart,s=n.directiveEnd;t.firstCreatePass||xn(n,e),Xn(r,e);const o=n.initialInputs;for(let l=i;l<s;l++){const r=t.data[l],s=be(r);s&&jr(e,n,r);const a=Pn(e,t,l,n);Xn(a,e),null!==o&&zr(0,l-i,a,r,0,o),s&&(Ie(n.index,e)[8]=a)}}(t,e,n,Te(n,e)),128==(128&n.flags)&&function(t,e,n){const r=n.directiveStart,i=n.directiveEnd,s=t.expandoInstructions,o=t.firstCreatePass,l=n.index-19;try{$e(l);for(let n=r;n<i;n++){const r=t.data[n],i=e[n];null!==r.hostBindings||0!==r.hostVars||null!==r.hostAttrs?Nr(r,i):o&&s.push(null)}}finally{$e(-1)}}(t,e,n))}function Cr(t,e,n=Te){const r=e.localNames;if(null!==r){let i=e.index+1;for(let s=0;s<r.length;s+=2){const o=r[s+1],l=-1===o?n(e,t):t[o];t[i++]=l}}}function kr(t){return t.tView||(t.tView=Ar(1,-1,t.template,t.decls,t.vars,t.directiveDefs,t.pipeDefs,t.viewQuery,t.schemas,t.consts))}function Ar(t,e,n,r,i,s,o,l,a,u){const c=19+r,h=c+i,d=function(t,e){const n=[];for(let r=0;r<e;r++)n.push(r<t?null:nr);return n}(c,h);return d[1]={type:t,id:e,blueprint:d,template:n,queries:null,viewQuery:l,node:null,data:d.slice().fill(null,c),bindingStartIndex:c,expandoStartIndex:h,expandoInstructions:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof s?s():s,pipeRegistry:"function"==typeof o?o():o,firstChild:null,schemas:a,consts:u}}function xr(t,e,n,r,i,s){return{type:n,index:r,injectorIndex:e?e.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,tagName:i,attrs:s,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:e,projection:null,styles:null,residualStyles:void 0,classes:null,residualClasses:void 0,classBindings:0,styleBindings:0}}function Er(t,e,n){for(let r in t)if(t.hasOwnProperty(r)){const i=t[r];(n=null===n?{}:n).hasOwnProperty(r)?n[r].push(e,i):n[r]=[e,i]}return n}function Tr(t,e,n,r,i,s,o,l){const a=Te(e,n);let u,c=e.inputs;var h;!l&&null!=c&&(u=c[r])?(Ur(t,n,u,r,i),me(e)&&function(t,e){const n=Ie(e,t);16&n[2]||(n[2]|=64)}(n,e.index)):3===e.type&&(r="class"===(h=r)?"className":"for"===h?"htmlFor":"formaction"===h?"formAction":"innerHtml"===h?"innerHTML":"readonly"===h?"readOnly":"tabindex"===h?"tabIndex":h,i=null!=o?o(i,e.tagName||"",r):i,ke(s)?s.setProperty(a,r,i):cn(r)||(a.setProperty?a.setProperty(r,i):a[r]=i))}function Sr(t,e,n,r){let i=!1;if(Ve()){const s=function(t,e,n){const r=t.directiveRegistry;let i=null;if(r)for(let s=0;s<r.length;s++){const o=r[s];$n(n,o.selectors,!1)&&(i||(i=[]),In(xn(n,e),t,o.type),be(o)?(2&n.flags&&Zn(n),Pr(t,n),i.unshift(o)):i.push(o))}return i}(t,e,n),o=null===r?null:{"":-1};if(null!==s){let r=0;i=!0,Vr(n,t.data.length,s.length);for(let t=0;t<s.length;t++){const e=s[t];e.providersResolver&&e.providersResolver(e)}Dr(t,n,s.length);let l=!1,a=!1;for(let i=0;i<s.length;i++){const u=s[i];n.mergedAttrs=hn(n.mergedAttrs,u.hostAttrs),Rr(t,e,u),Mr(t.data.length-1,u,o),null!==u.contentQueries&&(n.flags|=8),null===u.hostBindings&&null===u.hostAttrs&&0===u.hostVars||(n.flags|=128),!l&&(u.onChanges||u.onInit||u.doCheck)&&((t.preOrderHooks||(t.preOrderHooks=[])).push(n.index-19),l=!0),a||!u.onChanges&&!u.doCheck||((t.preOrderCheckHooks||(t.preOrderCheckHooks=[])).push(n.index-19),a=!0),Ir(t,u),r+=u.hostVars}!function(t,e){const n=e.directiveEnd,r=t.data,i=e.attrs,s=[];let o=null,l=null;for(let a=e.directiveStart;a<n;a++){const t=r[a],e=t.inputs;s.push(null!==i?Fr(e,i):null),o=Er(e,a,o),l=Er(t.outputs,a,l)}null!==o&&(o.hasOwnProperty("class")&&(e.flags|=16),o.hasOwnProperty("style")&&(e.flags|=32)),e.initialInputs=s,e.inputs=o,e.outputs=l}(t,n),Or(t,e,r)}o&&function(t,e,n){if(e){const r=t.localNames=[];for(let t=0;t<e.length;t+=2){const i=n[e[t+1]];if(null==i)throw new Error(`Export of name '${e[t+1]}' not found!`);r.push(e[t],i)}}}(n,r,o)}return n.mergedAttrs=hn(n.mergedAttrs,n.attrs),i}function Ir(t,e){const n=t.expandoInstructions;n.push(e.hostBindings),0!==e.hostVars&&n.push(e.hostVars)}function Or(t,e,n){for(let r=0;r<n;r++)e.push(nr),t.blueprint.push(nr),t.data.push(null)}function Nr(t,e){null!==t.hostBindings&&t.hostBindings(1,e)}function Dr(t,e,n){const r=19-e.index,i=t.data.length-(65535&e.providerIndexes);(t.expandoInstructions||(t.expandoInstructions=[])).push(r,i,n)}function Pr(t,e){e.flags|=2,(t.components||(t.components=[])).push(e.index)}function Mr(t,e,n){if(n){if(e.exportAs)for(let r=0;r<e.exportAs.length;r++)n[e.exportAs[r]]=t;be(e)&&(n[""]=t)}}function Vr(t,e,n){t.flags|=1,t.directiveStart=e,t.directiveEnd=e+n,t.providerIndexes=e}function Rr(t,e,n){t.data.push(n);const r=n.factory||(n.factory=de(n.type)),i=new an(r,be(n),null);t.blueprint.push(i),e.push(i)}function jr(t,e,n){const r=Te(e,t),i=kr(n),s=t[10],o=qr(t,pr(t,i,null,n.onPush?64:16,r,e,s,s.createRenderer(r,n)));t[e.index]=o}function zr(t,e,n,r,i,s){const o=s[e];if(null!==o){const t=r.setInput;for(let e=0;e<o.length;){const i=o[e++],s=o[e++],l=o[e++];null!==t?r.setInput(n,l,i,s):n[s]=l}}}function Fr(t,e){let n=null,r=0;for(;r<e.length;){const i=e[r];if(0!==i)if(5!==i){if("number"==typeof i)break;t.hasOwnProperty(i)&&(null===n&&(n=[]),n.push(i,t[i],e[r+1])),r+=2}else r+=2;else r+=4}return n}function Br(t,e,n,r){return new Array(t,!0,-2,e,null,null,r,n,null)}function Hr(t,e){const n=t[5];for(let r=0;r<n.length;r++){const t=n[r],i=t[3][3][16];if(i!==e&&0==(16&i[2])){const e=t[1];mr(e,t,e.template,t[8])}}}function Gr(t,e){const n=Ie(e,t);if(Ne(n)&&80&n[2]){const t=n[1];mr(t,n,t.template,n[8])}}function Lr(t,e){const n=Ie(e,t),r=n[1];!function(t,e){for(let n=e.length;n<t.blueprint.length;n++)e.push(t.blueprint[n])}(r,n),yr(r,n,n[8])}function qr(t,e){return t[13]?t[14][4]=e:t[13]=e,t[14]=e,e}function Xr(t){for(;t;){t[2]|=64;const e=rr(t);if(we(t)&&!e)return t;t=e}return null}function Zr(t,e,n){const r=e[10];r.begin&&r.begin();try{mr(t,e,t.template,n)}catch(i){throw Jr(e,i),i}finally{r.end&&r.end()}}function Kr(t){!function(t){for(let e=0;e<t.components.length;e++){const n=t.components[e],r=Oe(n),i=r[1];vr(i,r,i.template,n)}}(t[8])}function Yr(t,e,n){Xe(0),e(t,n)}const Qr=(()=>Promise.resolve(null))();function Wr(t){return t[7]||(t[7]=[])}function Jr(t,e){const n=t[9],r=n?n.get(Hn,null):null;r&&r.handleError(e)}function Ur(t,e,n,r,i){for(let s=0;s<n.length;){const o=n[s++],l=n[s++],a=e[o],u=t.data[o];null!==u.setInput?u.setInput(a,i,r,l):a[l]=i}}function _r(t,e){const n=e[3];return-1===t.index?ge(n)?n:null:n}function $r(t,e){const n=_r(t,e);return n?ci(e[11],n[7]):null}function ti(t,e,n,r,i){if(null!=r){let s,o=!1;ge(r)?s=r:pe(r)&&(o=!0,r=r[0]);const l=xe(r);0===t&&null!==n?null==i?ai(e,n,l):li(e,n,l,i||null):1===t&&null!==n?li(e,n,l,i||null):2===t?function(t,e,n){const r=ci(t,e);r&&function(t,e,n,r){ke(t)?t.removeChild(e,n,r):e.removeChild(n)}(t,r,e,n)}(e,l,o):3===t&&e.destroyNode(l),null!=s&&function(t,e,n,r,i){const s=n[7];s!==xe(n)&&ti(e,t,r,s,i);for(let o=9;o<n.length;o++){const i=n[o];pi(i[1],i,t,e,r,s)}}(e,t,s,n,i)}}function ei(t,e,n,r){const i=$r(t.node,e);i&&pi(t,e,e[11],n?1:2,i,r)}function ni(t,e){const n=t[5],r=n.indexOf(e);n.splice(r,1)}function ri(t,e){if(t.length<=9)return;const n=9+e,r=t[n];if(r){const i=r[17];null!==i&&i!==t&&ni(i,r),e>0&&(t[n-1][4]=r[4]);const s=Wt(t,9+e);ei(r[1],r,!1,null);const o=s[5];null!==o&&o.detachView(s[1]),r[3]=null,r[4]=null,r[2]&=-129}return r}function ii(t,e){if(!(256&e[2])){const n=e[11];ke(n)&&n.destroyNode&&pi(t,e,n,3,null,null),function(t){let e=t[13];if(!e)return oi(t[1],t);for(;e;){let n=null;if(pe(e))n=e[13];else{const t=e[9];t&&(n=t)}if(!n){for(;e&&!e[4]&&e!==t;)pe(e)&&oi(e[1],e),e=si(e,t);null===e&&(e=t),pe(e)&&oi(e[1],e),n=e&&e[4]}e=n}}(e)}}function si(t,e){let n;return pe(t)&&(n=t[6])&&2===n.type?_r(n,t):t[3]===e?null:t[3]}function oi(t,e){if(!(256&e[2])){e[2]&=-129,e[2]|=256,function(t,e){let n;if(null!=t&&null!=(n=t.destroyHooks))for(let r=0;r<n.length;r+=2){const t=e[n[r]];t instanceof an||n[r+1].call(t)}}(t,e),function(t,e){const n=t.cleanup;if(null!==n){const t=e[7];for(let r=0;r<n.length-1;r+=2)if("string"==typeof n[r]){const i=n[r+1],s="function"==typeof i?i(e):xe(e[i]),o=t[n[r+2]],l=n[r+3];"boolean"==typeof l?s.removeEventListener(n[r],o,l):l>=0?t[l]():t[-l].unsubscribe(),r+=2}else n[r].call(t[n[r+1]]);e[7]=null}}(t,e);const n=e[6];n&&3===n.type&&ke(e[11])&&e[11].destroy();const r=e[17];if(null!==r&&ge(e[3])){r!==e[3]&&ni(r,e);const n=e[5];null!==n&&n.detachView(t)}}}function li(t,e,n,r){ke(t)?t.insertBefore(e,n,r):e.insertBefore(n,r,!0)}function ai(t,e,n){ke(t)?t.appendChild(e,n):e.appendChild(n)}function ui(t,e,n,r){null!==r?li(t,e,n,r):ai(t,e,n)}function ci(t,e){return ke(t)?t.parentNode(e):e.parentNode}function hi(t,e,n,r){const i=function(t,e,n){let r=e.parent;for(;null!=r&&(4===r.type||5===r.type);)r=(e=r).parent;if(null==r){const t=n[6];return 2===t.type?$r(t,n):n[0]}if(e&&5===e.type&&4&e.flags)return Te(e,n).parentNode;if(2&r.flags){const e=t.data,n=e[e[r.index].directiveStart].encapsulation;if(n!==te.ShadowDom&&n!==te.Native)return null}return Te(r,n)}(t,r,e);if(null!=i){const t=e[11],s=function(t,e){if(2===t.type){const n=_r(t,e);return null===n?null:di(n.indexOf(e,9)-9,n)}return 4===t.type||5===t.type?Te(t,e):null}(r.parent||e[6],e);if(Array.isArray(n))for(let e=0;e<n.length;e++)ui(t,i,n[e],s);else ui(t,i,n,s)}}function di(t,e){const n=9+t+1;if(n<e.length){const t=e[n],r=t[1].firstChild;if(null!==r)return function t(e,n){if(null!==n){const r=n.type;if(3===r)return Te(n,e);if(0===r)return di(-1,e[n.index]);if(4===r||5===r){const r=n.child;if(null!==r)return t(e,r);{const t=e[n.index];return ge(t)?di(-1,t):xe(t)}}{const r=e[16],i=r[6],s=rr(r),o=i.projection[n.projection];return null!=o?t(s,o):t(e,n.next)}}return null}(t,r)}return e[7]}function fi(t,e,n,r,i,s,o){for(;null!=n;){const l=r[n.index],a=n.type;o&&0===e&&(l&&Xn(xe(l),r),n.flags|=4),64!=(64&n.flags)&&(4===a||5===a?(fi(t,e,n.child,r,i,s,!1),ti(e,t,i,l,s)):1===a?gi(t,e,r,n,i,s):ti(e,t,i,l,s)),n=o?n.projectionNext:n.next}}function pi(t,e,n,r,i,s){fi(n,r,t.node.child,e,i,s,!1)}function gi(t,e,n,r,i,s){const o=n[16],l=o[6].projection[r.projection];if(Array.isArray(l))for(let a=0;a<l.length;a++)ti(e,t,i,l[a],s);else fi(t,e,l,o[3],i,s,!0)}function yi(t,e,n){ke(t)?t.setAttribute(e,"style",n):e.style.cssText=n}function mi(t,e,n){ke(t)?""===n?t.removeAttribute(e,"class"):t.setAttribute(e,"class",n):e.className=n}class vi{constructor(t,e){this._lView=t,this._cdRefInjectingView=e,this._appRef=null,this._viewContainerRef=null,this._tViewNode=null}get rootNodes(){const t=this._lView;return null==t[0]?function t(e,n,r,i,s=!1){for(;null!==r;){const o=n[r.index];if(null!==o&&i.push(xe(o)),ge(o))for(let e=9;e<o.length;e++){const n=o[e],r=n[1].firstChild;null!==r&&t(n[1],n,r,i)}const l=r.type;if(4===l||5===l)t(e,n,r.child,i);else if(1===l){const e=n[16],s=e[6],o=rr(e);let l=s.projection[r.projection];null!==l&&null!==o&&t(o[1],o,l,i,!0)}r=s?r.projectionNext:r.next}return i}(t[1],t,t[6].child,[]):[]}get context(){return this._lView[8]}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._viewContainerRef){const t=this._viewContainerRef.indexOf(this);t>-1&&this._viewContainerRef.detach(t),this._viewContainerRef=null}ii(this._lView[1],this._lView)}onDestroy(t){var e,n,r;e=this._lView[1],r=t,Wr(n=this._lView).push(r),e.firstCreatePass&&function(t){return t.cleanup||(t.cleanup=[])}(e).push(n[7].length-1,null)}markForCheck(){Xr(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){Zr(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(t,e,n){Ge(!0);try{Zr(t,e,n)}finally{Ge(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(t){if(this._appRef)throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef=t}detachFromAppRef(){var t;this._appRef=null,pi(this._lView[1],t=this._lView,t[11],2,null,null)}attachToAppRef(t){if(this._viewContainerRef)throw new Error("This view is already attached to a ViewContainer!");this._appRef=t}}class bi extends vi{constructor(t){super(t),this._view=t}detectChanges(){Kr(this._view)}checkNoChanges(){!function(t){Ge(!0);try{Kr(t)}finally{Ge(!1)}}(this._view)}get context(){return null}}let wi,Ci,ki;function Ai(t,e,n){return wi||(wi=class extends t{}),new wi(Te(e,n))}function xi(t,e,n,r){return Ci||(Ci=class extends t{constructor(t,e,n){super(),this._declarationView=t,this._declarationTContainer=e,this.elementRef=n}createEmbeddedView(t){const e=this._declarationTContainer.tViews,n=pr(this._declarationView,e,t,16,null,e.node);n[17]=this._declarationView[this._declarationTContainer.index];const r=this._declarationView[5];null!==r&&(n[5]=r.createEmbeddedView(e)),yr(e,n,t);const i=new vi(n);return i._tViewNode=n[6],i}}),0===n.type?new Ci(r,n,Ai(e,n,r)):null}const Ei=new Pt("Set Injector scope."),Ti={},Si={},Ii=[];let Oi=void 0;function Ni(){return void 0===Oi&&(Oi=new Zt),Oi}function Di(t,e=null,n=null,r){return new Pi(t,n,e||Ni(),r)}class Pi{constructor(t,e,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const i=[];e&&Yt(e,n=>this.processProvider(n,t,e)),Yt([t],t=>this.processInjectorType(t,[],i)),this.records.set(Mt,Ri(void 0,this));const s=this.records.get(Ei);this.scope=null!=s?s.value:null,this.source=r||("object"==typeof t?null:pt(t))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach(t=>t.ngOnDestroy())}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(t,e=Vt,n=et.Default){this.assertNotDestroyed();const r=Bt(this);try{if(!(n&et.SkipSelf)){let e=this.records.get(t);if(void 0===e){const n=("function"==typeof(i=t)||"object"==typeof i&&i instanceof Pt)&&ot(t);e=n&&this.injectableDefInScope(n)?Ri(Mi(t),Ti):null,this.records.set(t,e)}if(null!=e)return this.hydrate(t,e)}return(n&et.Self?Ni():this.parent).get(t,e=n&et.Optional&&e===Vt?null:e)}catch(s){if("NullInjectorError"===s.name){if((s.ngTempTokenPath=s.ngTempTokenPath||[]).unshift(pt(t)),r)throw s;return function(t,e,n,r){const i=t.ngTempTokenPath;throw e.__source&&i.unshift(e.__source),t.message=function(t,e,n,r=null){t=t&&"\n"===t.charAt(0)&&"\u0275"==t.charAt(1)?t.substr(2):t;let i=pt(e);if(Array.isArray(e))i=e.map(pt).join(" -> ");else if("object"==typeof e){let t=[];for(let n in e)if(e.hasOwnProperty(n)){let r=e[n];t.push(n+":"+("string"==typeof r?JSON.stringify(r):pt(r)))}i=`{${t.join(", ")}}`}return`${n}${r?"("+r+")":""}[${i}]: ${t.replace(Rt,"\n  ")}`}("\n"+t.message,i,n,r),t.ngTokenPath=i,t.ngTempTokenPath=null,t}(s,t,"R3InjectorError",this.source)}throw s}finally{Bt(r)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach(t=>this.get(t))}toString(){const t=[];return this.records.forEach((e,n)=>t.push(pt(n))),`R3Injector[${t.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new Error("Injector has already been destroyed.")}processInjectorType(t,e,n){if(!(t=vt(t)))return!1;let r=at(t);const i=null==r&&t.ngModule||void 0,s=void 0===i?t:i,o=-1!==n.indexOf(s);if(void 0!==i&&(r=at(i)),null==r)return!1;if(null!=r.imports&&!o){let t;n.push(s);try{Yt(r.imports,r=>{this.processInjectorType(r,e,n)&&(void 0===t&&(t=[]),t.push(r))})}finally{}if(void 0!==t)for(let e=0;e<t.length;e++){const{ngModule:n,providers:r}=t[e];Yt(r,t=>this.processProvider(t,n,r||Ii))}}this.injectorDefTypes.add(s),this.records.set(s,Ri(r.factory,Ti));const l=r.providers;if(null!=l&&!o){const e=t;Yt(l,t=>this.processProvider(t,e,l))}return void 0!==i&&void 0!==t.providers}processProvider(t,e,n){let r=zi(t=vt(t))?t:vt(t&&t.provide);const i=function(t,e,n){return ji(t)?Ri(void 0,t.useValue):Ri(Vi(t,e,n),Ti)}(t,e,n);if(zi(t)||!0!==t.multi){const t=this.records.get(r);t&&void 0!==t.multi&&Kn()}else{let e=this.records.get(r);e?void 0===e.multi&&Kn():(e=Ri(void 0,Ti,!0),e.factory=()=>Xt(e.multi),this.records.set(r,e)),r=t,e.multi.push(t)}this.records.set(r,i)}hydrate(t,e){var n;return e.value===Si?function(t){throw new Error(`Cannot instantiate cyclic dependency! ${t}`)}(pt(t)):e.value===Ti&&(e.value=Si,e.value=e.factory()),"object"==typeof e.value&&e.value&&null!==(n=e.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(e.value),e.value}injectableDefInScope(t){return!!t.providedIn&&("string"==typeof t.providedIn?"any"===t.providedIn||t.providedIn===this.scope:this.injectorDefTypes.has(t.providedIn))}}function Mi(t){const e=ot(t),n=null!==e?e.factory:de(t);if(null!==n)return n;const r=at(t);if(null!==r)return r.factory;if(t instanceof Pt)throw new Error(`Token ${pt(t)} is missing a \u0275prov definition.`);if(t instanceof Function)return function(t){const e=t.length;if(e>0){const n=function(t,e){const n=[];for(let r=0;r<t;r++)n.push("?");return n}(e);throw new Error(`Can't resolve all parameters for ${pt(t)}: (${n.join(", ")}).`)}const n=function(t){const e=t&&(t[ut]||t[dt]||t[ht]&&t[ht]());if(e){const n=function(t){if(t.hasOwnProperty("name"))return t.name;const e=(""+t).match(/^function\s*([^\s(]+)/);return null===e?"":e[1]}(t);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\n`+`This will become an error in v10. Please add @Injectable() to the "${n}" class.`),e}return null}(t);return null!==n?()=>n.factory(t):()=>new t}(t);throw new Error("unreachable")}function Vi(t,e,n){let r=void 0;if(zi(t)){const e=vt(t);return de(e)||Mi(e)}if(ji(t))r=()=>vt(t.useValue);else if((i=t)&&i.useFactory)r=()=>t.useFactory(...Xt(t.deps||[]));else if(function(t){return!(!t||!t.useExisting)}(t))r=()=>Lt(vt(t.useExisting));else{const i=vt(t&&(t.useClass||t.provide));if(i||function(t,e,n){let r="";throw t&&e&&(r=` - only instances of Provider and Type are allowed, got: [${e.map(t=>t==n?"?"+n+"?":"...").join(", ")}]`),new Error(`Invalid provider for the NgModule '${pt(t)}'`+r)}(e,n,t),!function(t){return!!t.deps}(t))return de(i)||Mi(i);r=()=>new i(...Xt(t.deps))}var i;return r}function Ri(t,e,n=!1){return{factory:t,value:e,multi:n?[]:void 0}}function ji(t){return null!==t&&"object"==typeof t&&jt in t}function zi(t){return"function"==typeof t}const Fi=function(t,e,n){return function(t,e=null,n=null,r){const i=Di(t,e,n,r);return i._resolveInjectorDefTypes(),i}({name:n},e,t,n)};let Bi=(()=>{class t{static create(t,e){return Array.isArray(t)?Fi(t,e,""):Fi(t.providers,t.parent,t.name||"")}}return t.THROW_IF_NOT_FOUND=Vt,t.NULL=new Zt,t.\u0275prov=it({token:t,providedIn:"any",factory:()=>Lt(Mt)}),t.__NG_ELEMENT_ID__=-1,t})(),Hi=new Map;const Gi=new Set;function Li(t){return"string"==typeof t?t:t.text()}function qi(t,e){let n=t.styles,r=t.classes,i=0;for(let s=0;s<e.length;s++){const t=e[s];"number"==typeof t?i=t:1==i?r=gt(r,t):2==i&&(n=gt(n,t+": "+e[++s]+";"))}null!==n&&(t.styles=n),null!==r&&(t.classes=r)}let Xi=null;function Zi(){if(!Xi){const t=xt.Symbol;if(t&&t.iterator)Xi=t.iterator;else{const t=Object.getOwnPropertyNames(Map.prototype);for(let e=0;e<t.length;++e){const n=t[e];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Xi=n)}}}return Xi}function Ki(t,e){return t===e||"number"==typeof t&&"number"==typeof e&&isNaN(t)&&isNaN(e)}function Yi(t){return!!Qi(t)&&(Array.isArray(t)||!(t instanceof Map)&&Zi()in t)}function Qi(t){return null!==t&&("function"==typeof t||"object"==typeof t)}function Wi(t,e,n){return!Object.is(t[e],n)&&(t[e]=n,!0)}function Ji(t,e,n,r){const i=Re();return Wi(i,Le(),e)&&(je(),function(t,e,n,r,i,s){const o=Te(t,e),l=e[11];if(null==r)ke(l)?l.removeAttribute(o,n,s):o.removeAttribute(n);else{const e=null==i?mn(r):i(r,t.tagName||"",n);ke(l)?l.setAttribute(o,n,e,s):s?o.setAttributeNS(s,n,e):o.setAttribute(n,e)}}(tn(),i,t,e,n,r)),Ji}function Ui(t,e,n,r){return Wi(t,Le(),n)?e+mn(n)+r:nr}function _i(t,e,n,r,i,s,o,l){const a=Re(),u=je(),c=t+19,h=u.firstCreatePass?function(t,e,n,r,i,s,o,l,a){const u=e.consts,c=gr(e,n[6],t,0,o||null,De(u,l));Sr(e,n,c,De(u,a)),en(e,c);const h=c.tViews=Ar(2,-1,r,i,s,e.directiveRegistry,e.pipeRegistry,null,e.schemas,u),d=xr(0,null,2,-1,null,null);return d.injectorIndex=c.injectorIndex,h.node=d,null!==e.queries&&(e.queries.template(e,c),h.queries=e.queries.embeddedTView(c)),c}(t,u,a,e,n,r,i,s,o):u.data[c];Fe(h,!1);const d=a[11].createComment("");hi(u,a,d,h),Xn(d,a),qr(a,a[c]=Br(d,a,d,h)),ve(h)&&wr(u,a,h),null!=o&&Cr(a,h,l)}function $i(t){return function(t,e){return t[e+19]}(Me.lFrame.contextLView,t)}function ts(t,e=et.Default){const n=Re();return null==n?Lt(t,e):On(ze(),n,vt(t),e)}function es(t,e,n){const r=Re();return Wi(r,Le(),e)&&Tr(je(),tn(),r,t,e,r[11],n,!1),es}function ns(t,e,n,r,i){const s=i?"class":"style";Ur(t,n,e.inputs[s],s,r)}function rs(t,e,n,r){const i=Re(),s=je(),o=19+t,l=i[11],a=i[o]=fr(e,l,Me.lFrame.currentNamespace),u=s.firstCreatePass?function(t,e,n,r,i,s,o){const l=e.consts,a=De(l,s),u=gr(e,n[6],t,3,i,a);return Sr(e,n,u,De(l,o)),null!==u.mergedAttrs&&qi(u,u.mergedAttrs),null!==e.queries&&e.queries.elementStart(e,u),u}(t,s,i,0,e,n,r):s.data[o];Fe(u,!0);const c=u.mergedAttrs;null!==c&&un(l,a,c);const h=u.classes;null!==h&&mi(l,a,h);const d=u.styles;null!==d&&yi(l,a,d),hi(s,i,a,u),0===Me.lFrame.elementDepthCount&&Xn(a,i),Me.lFrame.elementDepthCount++,ve(u)&&(wr(s,i,u),function(t,e,n){if(ye(e)){const r=e.directiveEnd;for(let i=e.directiveStart;i<r;i++){const e=t.data[i];e.contentQueries&&e.contentQueries(1,n[i],i)}}}(s,u,i)),null!==r&&Cr(i,u)}function is(){let t=ze();Be()?Me.lFrame.isParent=!1:(t=t.parent,Fe(t,!1));const e=t;Me.lFrame.elementDepthCount--;const n=je();n.firstCreatePass&&(en(n,t),ye(t)&&n.queries.elementEnd(t)),null!==e.classes&&function(t){return 0!=(16&t.flags)}(e)&&ns(n,e,Re(),e.classes,!0),null!==e.styles&&function(t){return 0!=(32&t.flags)}(e)&&ns(n,e,Re(),e.styles,!1)}function ss(t,e,n,r){rs(t,e,n,r),is()}function os(t){return!!t&&"function"==typeof t.then}function ls(t,e,n=!1,r){const i=Re(),s=je(),o=ze();return function(t,e,n,r,i,s,o=!1,l){const a=ve(r),u=t.firstCreatePass&&(t.cleanup||(t.cleanup=[])),c=Wr(e);let h=!0;if(3===r.type){const d=Te(r,e),f=l?l(d):ee,p=f.target||d,g=c.length,y=l?t=>l(xe(t[r.index])).target:r.index;if(ke(n)){let o=null;if(!l&&a&&(o=function(t,e,n,r){const i=t.cleanup;if(null!=i)for(let s=0;s<i.length-1;s+=2){const t=i[s];if(t===n&&i[s+1]===r){const t=e[7],n=i[s+2];return t.length>n?t[n]:null}"string"==typeof t&&(s+=2)}return null}(t,e,i,r.index)),null!==o)(o.__ngLastListenerFn__||o).__ngNextListenerFn__=s,o.__ngLastListenerFn__=s,h=!1;else{s=us(r,e,s,!1);const t=n.listen(f.name||p,i,s);c.push(s,t),u&&u.push(i,y,g,g+1)}}else s=us(r,e,s,!0),p.addEventListener(i,s,o),c.push(s),u&&u.push(i,y,g,o)}const d=r.outputs;let f;if(h&&null!==d&&(f=d[i])){const t=f.length;if(t)for(let n=0;n<t;n+=2){const t=e[f[n]][f[n+1]].subscribe(s),o=c.length;c.push(s,t),u&&u.push(i,r.index,o,-(o+1))}}}(s,i,i[11],o,t,e,n,r),ls}function as(t,e,n){try{return!1!==e(n)}catch(r){return Jr(t,r),!1}}function us(t,e,n,r){return function i(s){if(s===Function)return n;const o=2&t.flags?Ie(t.index,e):e;0==(32&e[2])&&Xr(o);let l=as(e,n,s),a=i.__ngNextListenerFn__;for(;a;)l=as(e,a,s)&&l,a=a.__ngNextListenerFn__;return r&&!1===l&&(s.preventDefault(),s.returnValue=!1),l}}function cs(t=1){return function(t){return(Me.lFrame.contextLView=function(t,e){for(;t>0;)e=e[15],t--;return e}(t,Me.lFrame.contextLView))[8]}(t)}function hs(t,e,n){return ds(t,"",e,"",n),hs}function ds(t,e,n,r,i){const s=Re(),o=Ui(s,e,n,r);return o!==nr&&Tr(je(),tn(),s,t,o,s[11],i,!1),ds}const fs=[];function ps(t,e,n,r,i){const s=t[n+1],o=null===e;let l=r?lr(s):ur(s),a=!1;for(;0!==l&&(!1===a||o);){const n=t[l+1];gs(t[l],e)&&(a=!0,t[l+1]=r?hr(n):ar(n)),l=r?lr(n):ur(n)}a&&(t[n+1]=r?ar(s):hr(s))}function gs(t,e){return null===t||null==e||(Array.isArray(t)?t[1]:t)===e||!(!Array.isArray(t)||"string"!=typeof e)&&_t(t,e)>=0}function ys(t,e){return function(t,e,n,r){const i=Re(),s=je(),o=function(t){const e=Me.lFrame,n=e.bindingIndex;return e.bindingIndex=e.bindingIndex+2,n}();if(s.firstUpdatePass&&function(t,e,n,r){const i=t.data;if(null===i[n+1]){const r=i[_e()+19],s=function(t,e){return e>=t.expandoStartIndex}(t,n);(function(t,e){return 0!=(16&t.flags)})(r)&&null===e&&!s&&(e=!1),e=function(t,e,n,r){const i=function(t){const e=Me.lFrame.currentDirectiveIndex;return-1===e?null:t[e]}(t);let s=e.residualClasses;if(null===i)0===e.classBindings&&(n=vs(n=ms(null,t,e,n,!0),e.attrs,!0),s=null);else{const r=e.directiveStylingLast;if(-1===r||t[r]!==i)if(n=ms(i,t,e,n,!0),null===s){let n=function(t,e,n){const r=e.classBindings;if(0!==ur(r))return t[lr(r)]}(t,e);void 0!==n&&Array.isArray(n)&&(n=ms(null,t,e,n[1],!0),n=vs(n,e.attrs,!0),function(t,e,n,r){t[lr(e.classBindings)]=r}(t,e,0,n))}else s=function(t,e,n){let r=void 0;const i=e.directiveEnd;for(let s=1+e.directiveStylingLast;s<i;s++)r=vs(r,t[s].hostAttrs,!0);return vs(r,e.attrs,!0)}(t,e)}return void 0!==s&&(e.residualClasses=s),n}(i,r,e),function(t,e,n,r,i,s){let o=e.classBindings,l=lr(o),a=ur(o);t[r]=n;let u,c=!1;if(Array.isArray(n)){const t=n;u=t[1],(null===u||_t(t,u)>0)&&(c=!0)}else u=n;if(i)if(0!==a){const e=lr(t[l+1]);t[r+1]=or(e,l),0!==e&&(t[e+1]=cr(t[e+1],r)),t[l+1]=131071&t[l+1]|r<<17}else t[r+1]=or(l,0),0!==l&&(t[l+1]=cr(t[l+1],r)),l=r;else t[r+1]=or(a,0),0===l?l=r:t[a+1]=cr(t[a+1],r),a=r;c&&(t[r+1]=ar(t[r+1])),ps(t,u,r,!0),ps(t,u,r,!1),function(t,e,n,r,i){const s=t.residualClasses;null!=s&&"string"==typeof e&&_t(s,e)>=0&&(n[r+1]=hr(n[r+1]))}(e,u,t,r),o=or(l,a),e.classBindings=o}(i,r,e,n,s)}}(s,t,o),e!==nr&&Wi(i,o,e)){let r;null==n&&(r=function(){const t=Me.lFrame;return null===t?null:t.currentSanitizer}())&&(n=r),function(t,e,n,r,i,s,o,l){if(3!==e.type)return;const a=t.data,u=a[l+1];ws(1==(1&u)?bs(a,e,n,i,ur(u),!0):void 0)||(ws(s)||function(t){return 2==(2&t)}(u)&&(s=bs(a,null,n,i,l,!0)),function(t,e,n,r,i){const s=ke(t);i?s?t.addClass(n,r):n.classList.add(r):s?t.removeClass(n,r):n.classList.remove(r)}(r,0,Ee(_e(),n),i,s))}(s,s.data[_e()+19],i,i[11],t,i[o+1]=function(t,e){return null==t||("function"==typeof e?t=e(t):"string"==typeof e?t+=e:"object"==typeof t&&(t=pt(function(t){return t instanceof class{constructor(t){this.changingThisBreaksApplicationSecurity=t}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}`+" (see http://g.co/ng/security#xss)"}}?t.changingThisBreaksApplicationSecurity:t}(t)))),t}(e,n),0,o)}}(t,e,null),ys}function ms(t,e,n,r,i){let s=null;const o=n.directiveEnd;let l=n.directiveStylingLast;for(-1===l?l=n.directiveStart:l++;l<o&&(s=e[l],r=vs(r,s.hostAttrs,i),s!==t);)l++;return null!==t&&(n.directiveStylingLast=l),r}function vs(t,e,n){const r=n?1:2;let i=-1;if(null!==e)for(let s=0;s<e.length;s++){const o=e[s];"number"==typeof o?i=o:i===r&&(Array.isArray(t)||(t=void 0===t?[]:["",t]),Jt(t,o,!!n||e[++s]))}return void 0===t?null:t}function bs(t,e,n,r,i,s){const o=null===e;let l=void 0;for(;i>0;){const e=t[i],s=Array.isArray(e),a=s?e[1]:e,u=null===a;let c=n[i+1];c===nr&&(c=u?fs:void 0);let h=u?Ut(c,r):a===r?c:void 0;if(s&&!ws(h)&&(h=Ut(e,r)),ws(h)&&(l=h,o))return l;const d=t[i+1];i=o?lr(d):ur(d)}if(null!==e){let t=s?e.residualClasses:e.residualStyles;null!=t&&(l=Ut(t,r))}return l}function ws(t){return void 0!==t}function Cs(t,e=""){const n=Re(),r=je(),i=t+19,s=r.firstCreatePass?gr(r,n[6],t,3,null,null):r.data[i],o=n[i]=function(t,e){return ke(e)?e.createText(t):e.createTextNode(t)}(e,n[11]);hi(r,n,o,s),Fe(s,!1)}function ks(t){return As("",t,""),ks}function As(t,e,n){const r=Re(),i=Ui(r,t,e,n);return i!==nr&&function(t,e,n){const r=Ee(e,t),i=t[11];ke(i)?i.setValue(r,n):r.textContent=n}(r,_e(),i),As}function xs(t,e){const n=Oe(t)[1],r=n.data.length-1;en(n,{directiveStart:r,directiveEnd:r+1})}function Es(t){let e=Object.getPrototypeOf(t.type.prototype).constructor,n=!0;const r=[t];for(;e;){let i=void 0;if(be(t))i=e.\u0275cmp||e.\u0275dir;else{if(e.\u0275cmp)throw new Error("Directives cannot inherit Components");i=e.\u0275dir}if(i){if(n){r.push(i);const e=t;e.inputs=Ts(t.inputs),e.declaredInputs=Ts(t.declaredInputs),e.outputs=Ts(t.outputs);const n=i.hostBindings;n&&Os(t,n);const s=i.viewQuery,o=i.contentQueries;if(s&&Ss(t,s),o&&Is(t,o),rt(t.inputs,i.inputs),rt(t.declaredInputs,i.declaredInputs),rt(t.outputs,i.outputs),be(i)&&i.data.animation){const e=t.data;e.animation=(e.animation||[]).concat(i.data.animation)}e.afterContentChecked=e.afterContentChecked||i.afterContentChecked,e.afterContentInit=t.afterContentInit||i.afterContentInit,e.afterViewChecked=t.afterViewChecked||i.afterViewChecked,e.afterViewInit=t.afterViewInit||i.afterViewInit,e.doCheck=t.doCheck||i.doCheck,e.onDestroy=t.onDestroy||i.onDestroy,e.onInit=t.onInit||i.onInit}const e=i.features;if(e)for(let r=0;r<e.length;r++){const i=e[r];i&&i.ngInherit&&i(t),i===Es&&(n=!1)}}e=Object.getPrototypeOf(e)}!function(t){let e=0,n=null;for(let r=t.length-1;r>=0;r--){const i=t[r];i.hostVars=e+=i.hostVars,i.hostAttrs=hn(i.hostAttrs,n=hn(n,i.hostAttrs))}}(r)}function Ts(t){return t===ee?{}:t===ne?[]:t}function Ss(t,e){const n=t.viewQuery;t.viewQuery=n?(t,r)=>{e(t,r),n(t,r)}:e}function Is(t,e){const n=t.contentQueries;t.contentQueries=n?(t,r,i)=>{e(t,r,i),n(t,r,i)}:e}function Os(t,e){const n=t.hostBindings;t.hostBindings=n?(t,r)=>{e(t,r),n(t,r)}:e}class Ns{constructor(t,e,n){this.previousValue=t,this.currentValue=e,this.firstChange=n}isFirstChange(){return this.firstChange}}function Ds(t){t.type.prototype.ngOnChanges&&(t.setInput=Ps,t.onChanges=function(){const t=Ms(this),e=t&&t.current;if(e){const n=t.previous;if(n===ee)t.previous=e;else for(let t in e)n[t]=e[t];t.current=null,this.ngOnChanges(e)}})}function Ps(t,e,n,r){const i=Ms(t)||function(t,e){return t.__ngSimpleChanges__=e}(t,{previous:ee,current:null}),s=i.current||(i.current={}),o=i.previous,l=this.declaredInputs[n],a=o[l];s[l]=new Ns(a&&a.currentValue,e,o===ee),t[r]=e}function Ms(t){return t.__ngSimpleChanges__||null}function Vs(t,e,n,r,i){if(t=vt(t),Array.isArray(t))for(let s=0;s<t.length;s++)Vs(t[s],e,n,r,i);else{const s=je(),o=Re();let l=zi(t)?t:vt(t.provide),a=Vi(t);const u=ze(),c=65535&u.providerIndexes,h=u.directiveStart,d=u.providerIndexes>>16;if(zi(t)||!t.multi){const r=new an(a,i,ts),f=zs(l,e,i?c:c+d,h);-1===f?(In(xn(u,o),s,l),Rs(s,t,e.length),e.push(l),u.directiveStart++,u.directiveEnd++,i&&(u.providerIndexes+=65536),n.push(r),o.push(r)):(n[f]=r,o[f]=r)}else{const f=zs(l,e,c+d,h),p=zs(l,e,c,c+d),g=f>=0&&n[f],y=p>=0&&n[p];if(i&&!y||!i&&!g){In(xn(u,o),s,l);const c=function(t,e,n,r,i){const s=new an(t,n,ts);return s.multi=[],s.index=e,s.componentProviders=0,js(s,i,r&&!n),s}(i?Bs:Fs,n.length,i,r,a);!i&&y&&(n[p].providerFactory=c),Rs(s,t,e.length),e.push(l),u.directiveStart++,u.directiveEnd++,i&&(u.providerIndexes+=65536),n.push(c),o.push(c)}else Rs(s,t,f>-1?f:p),js(n[i?p:f],a,!i&&r);!i&&r&&y&&n[p].componentProviders++}}}function Rs(t,e,n){if(zi(e)||e.useClass){const r=(e.useClass||e).prototype.ngOnDestroy;r&&(t.destroyHooks||(t.destroyHooks=[])).push(n,r)}}function js(t,e,n){t.multi.push(e),n&&t.componentProviders++}function zs(t,e,n,r){for(let i=n;i<r;i++)if(e[i]===t)return i;return-1}function Fs(t,e,n,r){return Hs(this.multi,[])}function Bs(t,e,n,r){const i=this.multi;let s;if(this.providerFactory){const t=this.providerFactory.componentProviders,e=Pn(n,n[1],this.providerFactory.index,r);s=e.slice(0,t),Hs(i,s);for(let n=t;n<e.length;n++)s.push(e[n])}else s=[],Hs(i,s);return s}function Hs(t,e){for(let n=0;n<t.length;n++)e.push((0,t[n])());return e}function Gs(t,e=[]){return n=>{n.providersResolver=(n,r)=>function(t,e,n){const r=je();if(r.firstCreatePass){const i=be(t);Vs(n,r.data,r.blueprint,i,!0),Vs(e,r.data,r.blueprint,i,!1)}}(n,r?r(t):t,e)}}Ds.ngInherit=!0;class Ls{}class qs{resolveComponentFactory(t){throw function(t){const e=Error(`No component factory found for ${pt(t)}. Did you add it to @NgModule.entryComponents?`);return e.ngComponent=t,e}(t)}}let Xs=(()=>{class t{}return t.NULL=new qs,t})(),Zs=(()=>{class t{constructor(t){this.nativeElement=t}}return t.__NG_ELEMENT_ID__=()=>Ks(t),t})();const Ks=function(t){return Ai(t,ze(),Re())};class Ys{}const Qs=function(){var t={Important:1,DashCase:2};return t[t.Important]="Important",t[t.DashCase]="DashCase",t}();let Ws=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>Js(),t})();const Js=function(){const t=Re(),e=Ie(ze().index,t);return function(t){const e=t[11];if(ke(e))return e;throw new Error("Cannot inject Renderer2 when the application uses Renderer3!")}(pe(e)?e:t)};let Us=(()=>{class t{}return t.\u0275prov=it({token:t,providedIn:"root",factory:()=>null}),t})();class _s{constructor(t){this.full=t,this.major=t.split(".")[0],this.minor=t.split(".")[1],this.patch=t.split(".").slice(2).join(".")}}const $s=new _s("9.0.7");class to{constructor(){}supports(t){return Yi(t)}create(t){return new no(t)}}const eo=(t,e)=>e;class no{constructor(t){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=t||eo}forEachItem(t){let e;for(e=this._itHead;null!==e;e=e._next)t(e)}forEachOperation(t){let e=this._itHead,n=this._removalsHead,r=0,i=null;for(;e||n;){const s=!n||e&&e.currentIndex<oo(n,r,i)?e:n,o=oo(s,r,i),l=s.currentIndex;if(s===n)r--,n=n._nextRemoved;else if(e=e._next,null==s.previousIndex)r++;else{i||(i=[]);const t=o-r,e=l-r;if(t!=e){for(let n=0;n<t;n++){const r=n<i.length?i[n]:i[n]=0,s=r+n;e<=s&&s<t&&(i[n]=r+1)}i[s.previousIndex]=e-t}}o!==l&&t(s,o,l)}}forEachPreviousItem(t){let e;for(e=this._previousItHead;null!==e;e=e._nextPrevious)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachMovedItem(t){let e;for(e=this._movesHead;null!==e;e=e._nextMoved)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}forEachIdentityChange(t){let e;for(e=this._identityChangesHead;null!==e;e=e._nextIdentityChange)t(e)}diff(t){if(null==t&&(t=[]),!Yi(t))throw new Error(`Error trying to diff '${pt(t)}'. Only arrays and iterables are allowed`);return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e,n,r,i=this._itHead,s=!1;if(Array.isArray(t)){this.length=t.length;for(let e=0;e<this.length;e++)n=t[e],r=this._trackByFn(e,n),null!==i&&Ki(i.trackById,r)?(s&&(i=this._verifyReinsertion(i,n,r,e)),Ki(i.item,n)||this._addIdentityChange(i,n)):(i=this._mismatch(i,n,r,e),s=!0),i=i._next}else e=0,function(t,e){if(Array.isArray(t))for(let n=0;n<t.length;n++)e(t[n]);else{const n=t[Zi()]();let r;for(;!(r=n.next()).done;)e(r.value)}}(t,t=>{r=this._trackByFn(e,t),null!==i&&Ki(i.trackById,r)?(s&&(i=this._verifyReinsertion(i,t,r,e)),Ki(i.item,t)||this._addIdentityChange(i,t)):(i=this._mismatch(i,t,r,e),s=!0),i=i._next,e++}),this.length=e;return this._truncate(i),this.collection=t,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let t,e;for(t=this._previousItHead=this._itHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._additionsHead;null!==t;t=t._nextAdded)t.previousIndex=t.currentIndex;for(this._additionsHead=this._additionsTail=null,t=this._movesHead;null!==t;t=e)t.previousIndex=t.currentIndex,e=t._nextMoved;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(t,e,n,r){let i;return null===t?i=this._itTail:(i=t._prev,this._remove(t)),null!==(t=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Ki(t.item,e)||this._addIdentityChange(t,e),this._moveAfter(t,i,r)):null!==(t=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Ki(t.item,e)||this._addIdentityChange(t,e),this._reinsertAfter(t,i,r)):t=this._addAfter(new ro(e,n),i,r),t}_verifyReinsertion(t,e,n,r){let i=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==i?t=this._reinsertAfter(i,t._prev,r):t.currentIndex!=r&&(t.currentIndex=r,this._addToMoves(t,r)),t}_truncate(t){for(;null!==t;){const e=t._next;this._addToRemovals(this._unlink(t)),t=e}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(t,e,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(t);const r=t._prevRemoved,i=t._nextRemoved;return null===r?this._removalsHead=i:r._nextRemoved=i,null===i?this._removalsTail=r:i._prevRemoved=r,this._insertAfter(t,e,n),this._addToMoves(t,n),t}_moveAfter(t,e,n){return this._unlink(t),this._insertAfter(t,e,n),this._addToMoves(t,n),t}_addAfter(t,e,n){return this._insertAfter(t,e,n),this._additionsTail=null===this._additionsTail?this._additionsHead=t:this._additionsTail._nextAdded=t,t}_insertAfter(t,e,n){const r=null===e?this._itHead:e._next;return t._next=r,t._prev=e,null===r?this._itTail=t:r._prev=t,null===e?this._itHead=t:e._next=t,null===this._linkedRecords&&(this._linkedRecords=new so),this._linkedRecords.put(t),t.currentIndex=n,t}_remove(t){return this._addToRemovals(this._unlink(t))}_unlink(t){null!==this._linkedRecords&&this._linkedRecords.remove(t);const e=t._prev,n=t._next;return null===e?this._itHead=n:e._next=n,null===n?this._itTail=e:n._prev=e,t}_addToMoves(t,e){return t.previousIndex===e||(this._movesTail=null===this._movesTail?this._movesHead=t:this._movesTail._nextMoved=t),t}_addToRemovals(t){return null===this._unlinkedRecords&&(this._unlinkedRecords=new so),this._unlinkedRecords.put(t),t.currentIndex=null,t._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=t,t._prevRemoved=null):(t._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=t),t}_addIdentityChange(t,e){return t.item=e,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=t:this._identityChangesTail._nextIdentityChange=t,t}}class ro{constructor(t,e){this.item=t,this.trackById=e,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class io{constructor(){this._head=null,this._tail=null}add(t){null===this._head?(this._head=this._tail=t,t._nextDup=null,t._prevDup=null):(this._tail._nextDup=t,t._prevDup=this._tail,t._nextDup=null,this._tail=t)}get(t,e){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===e||e<=n.currentIndex)&&Ki(n.trackById,t))return n;return null}remove(t){const e=t._prevDup,n=t._nextDup;return null===e?this._head=n:e._nextDup=n,null===n?this._tail=e:n._prevDup=e,null===this._head}}class so{constructor(){this.map=new Map}put(t){const e=t.trackById;let n=this.map.get(e);n||(n=new io,this.map.set(e,n)),n.add(t)}get(t,e){const n=this.map.get(t);return n?n.get(t,e):null}remove(t){const e=t.trackById;return this.map.get(e).remove(t)&&this.map.delete(e),t}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function oo(t,e,n){const r=t.previousIndex;if(null===r)return r;let i=0;return n&&r<n.length&&(i=n[r]),r+e+i}class lo{constructor(){}supports(t){return t instanceof Map||Qi(t)}create(){return new ao}}class ao{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(t){let e;for(e=this._mapHead;null!==e;e=e._next)t(e)}forEachPreviousItem(t){let e;for(e=this._previousMapHead;null!==e;e=e._nextPrevious)t(e)}forEachChangedItem(t){let e;for(e=this._changesHead;null!==e;e=e._nextChanged)t(e)}forEachAddedItem(t){let e;for(e=this._additionsHead;null!==e;e=e._nextAdded)t(e)}forEachRemovedItem(t){let e;for(e=this._removalsHead;null!==e;e=e._nextRemoved)t(e)}diff(t){if(t){if(!(t instanceof Map||Qi(t)))throw new Error(`Error trying to diff '${pt(t)}'. Only maps and objects are allowed`)}else t=new Map;return this.check(t)?this:null}onDestroy(){}check(t){this._reset();let e=this._mapHead;if(this._appendAfter=null,this._forEach(t,(t,n)=>{if(e&&e.key===n)this._maybeAddToChanges(e,t),this._appendAfter=e,e=e._next;else{const r=this._getOrCreateRecordForKey(n,t);e=this._insertBeforeOrAppend(e,r)}}),e){e._prev&&(e._prev._next=null),this._removalsHead=e;for(let t=e;null!==t;t=t._nextRemoved)t===this._mapHead&&(this._mapHead=null),this._records.delete(t.key),t._nextRemoved=t._next,t.previousValue=t.currentValue,t.currentValue=null,t._prev=null,t._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(t,e){if(t){const n=t._prev;return e._next=t,e._prev=n,t._prev=e,n&&(n._next=e),t===this._mapHead&&(this._mapHead=e),this._appendAfter=t,t}return this._appendAfter?(this._appendAfter._next=e,e._prev=this._appendAfter):this._mapHead=e,this._appendAfter=e,null}_getOrCreateRecordForKey(t,e){if(this._records.has(t)){const n=this._records.get(t);this._maybeAddToChanges(n,e);const r=n._prev,i=n._next;return r&&(r._next=i),i&&(i._prev=r),n._next=null,n._prev=null,n}const n=new uo(t);return this._records.set(t,n),n.currentValue=e,this._addToAdditions(n),n}_reset(){if(this.isDirty){let t;for(this._previousMapHead=this._mapHead,t=this._previousMapHead;null!==t;t=t._next)t._nextPrevious=t._next;for(t=this._changesHead;null!==t;t=t._nextChanged)t.previousValue=t.currentValue;for(t=this._additionsHead;null!=t;t=t._nextAdded)t.previousValue=t.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(t,e){Ki(e,t.currentValue)||(t.previousValue=t.currentValue,t.currentValue=e,this._addToChanges(t))}_addToAdditions(t){null===this._additionsHead?this._additionsHead=this._additionsTail=t:(this._additionsTail._nextAdded=t,this._additionsTail=t)}_addToChanges(t){null===this._changesHead?this._changesHead=this._changesTail=t:(this._changesTail._nextChanged=t,this._changesTail=t)}_forEach(t,e){t instanceof Map?t.forEach(e):Object.keys(t).forEach(n=>e(t[n],n))}}class uo{constructor(t){this.key=t,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}let co=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(null!=n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error("Cannot extend IterableDiffers without a parent injector");return t.create(e,n)},deps:[[t,new tt,new U]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(null!=e)return e;throw new Error(`Cannot find a differ supporting object '${t}' of type '${n=t,n.name||typeof n}'`);var n}}return t.\u0275prov=it({token:t,providedIn:"root",factory:()=>new t([new to])}),t})(),ho=(()=>{class t{constructor(t){this.factories=t}static create(e,n){if(n){const t=n.factories.slice();e=e.concat(t)}return new t(e)}static extend(e){return{provide:t,useFactory:n=>{if(!n)throw new Error("Cannot extend KeyValueDiffers without a parent injector");return t.create(e,n)},deps:[[t,new tt,new U]]}}find(t){const e=this.factories.find(e=>e.supports(t));if(e)return e;throw new Error(`Cannot find a differ supporting object '${t}'`)}}return t.\u0275prov=it({token:t,providedIn:"root",factory:()=>new t([new lo])}),t})();const fo=[new lo],po=new co([new to]),go=new ho(fo);let yo=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>mo(t,Zs),t})();const mo=function(t,e){return xi(t,e,ze(),Re())};let vo=(()=>{class t{}return t.__NG_ELEMENT_ID__=()=>bo(t,Zs),t})();const bo=function(t,e){return function(t,e,n,r){let i;ki||(ki=class extends t{constructor(t,e,n){super(),this._lContainer=t,this._hostTNode=e,this._hostView=n}get element(){return Ai(e,this._hostTNode,this._hostView)}get injector(){return new Rn(this._hostTNode,this._hostView)}get parentInjector(){const t=Sn(this._hostTNode,this._hostView),e=yn(t,this._hostView),n=function(t,e,n){if(n.parent&&-1!==n.parent.injectorIndex){const t=n.parent.injectorIndex;let e=n.parent;for(;null!=e.parent&&t==e.parent.injectorIndex;)e=e.parent;return e}let r=gn(t),i=e,s=e[6];for(;r>1;)i=i[15],s=i[6],r--;return s}(t,this._hostView,this._hostTNode);return fn(t)&&null!=n?new Rn(n,e):new Rn(null,this._hostView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(t){return null!==this._lContainer[8]&&this._lContainer[8][t]||null}get length(){return this._lContainer.length-9}createEmbeddedView(t,e,n){const r=t.createEmbeddedView(e||{});return this.insert(r,n),r}createComponent(t,e,n,r,i){const s=n||this.parentInjector;if(!i&&null==t.ngModule&&s){const t=s.get(Kt,null);t&&(i=t)}const o=t.create(s,r,void 0,i);return this.insert(o.hostView,e),o}insert(t,e){const n=t._lView,r=n[1];if(t.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(this.allocateContainerIfNeeded(),ge(n[3])){const e=this.indexOf(t);if(-1!==e)this.detach(e);else{const e=n[3],r=new ki(e,e[6],e[3]);r.detach(r.indexOf(t))}}const i=this._adjustIndex(e);return function(t,e,n,r){const i=9+r,s=n.length;r>0&&(n[i-1][4]=e),r<s-9?(e[4]=n[i],Qt(n,9+r,e)):(n.push(e),e[4]=null),e[3]=n;const o=e[17];null!==o&&n!==o&&function(t,e){const n=t[5],r=e[3][3][16];16!=(16&r[2])&&e[16]!==r&&(t[2]|=1),null===n?t[5]=[e]:n.push(e)}(o,e);const l=e[5];null!==l&&l.insertView(t),e[2]|=128}(r,n,this._lContainer,i),ei(r,n,!0,di(i,this._lContainer)),t.attachToViewContainerRef(this),Qt(this._lContainer[8],i,t),t}move(t,e){if(t.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(t,e)}indexOf(t){const e=this._lContainer[8];return null!==e?e.indexOf(t):-1}remove(t){this.allocateContainerIfNeeded();const e=this._adjustIndex(t,-1);(function(t,e){const n=ri(t,e);n&&ii(n[1],n)})(this._lContainer,e),Wt(this._lContainer[8],e)}detach(t){this.allocateContainerIfNeeded();const e=this._adjustIndex(t,-1),n=ri(this._lContainer,e);return n&&null!=Wt(this._lContainer[8],e)?new vi(n):null}_adjustIndex(t,e=0){return null==t?this.length+e:t}allocateContainerIfNeeded(){null===this._lContainer[8]&&(this._lContainer[8]=[])}});const s=r[n.index];if(ge(s))i=s,function(t,e){t[2]=-2}(i);else{let t;if(4===n.type)t=xe(s);else if(t=r[11].createComment(""),we(r)){const e=r[11],i=Te(n,r);li(e,ci(e,i),t,function(t,e){return ke(t)?t.nextSibling(e):e.nextSibling}(e,i))}else hi(r[1],r,t,n);r[n.index]=i=Br(s,r,t,n),qr(r,i)}return new ki(i,n,r)}(t,e,ze(),Re())},wo={};class Co extends Xs{constructor(t){super(),this.ngModule=t}resolveComponentFactory(t){const e=he(t);return new xo(e,this.ngModule)}}function ko(t){const e=[];for(let n in t)t.hasOwnProperty(n)&&e.push({propName:t[n],templateName:n});return e}const Ao=new Pt("SCHEDULER_TOKEN",{providedIn:"root",factory:()=>bn});class xo extends Ls{constructor(t,e){super(),this.componentDef=t,this.ngModule=e,this.componentType=t.type,this.selector=t.selectors.map(er).join(","),this.ngContentSelectors=t.ngContentSelectors?t.ngContentSelectors:[],this.isBoundToModule=!!e}get inputs(){return ko(this.componentDef.inputs)}get outputs(){return ko(this.componentDef.outputs)}create(t,e,n,r){const i=(r=r||this.ngModule)?function(t,e){return{get:(n,r,i)=>{const s=t.get(n,wo,i);return s!==wo||r===wo?s:e.get(n,r,i)}}}(t,r.injector):t,s=i.get(Ys,Ae),o=i.get(Us,null),l=s.createRenderer(null,this.componentDef),a=this.componentDef.selectors[0][0]||"div",u=n?function(t,e,n){if(ke(t))return t.selectRootElement(e,n===te.ShadowDom);let r="string"==typeof e?t.querySelector(e):e;return r.textContent="",r}(l,n,this.componentDef.encapsulation):fr(a,s.createRenderer(null,this.componentDef),function(t){const e=t.toLowerCase();return"svg"===e?"http://www.w3.org/2000/svg":"math"===e?"http://www.w3.org/1998/MathML/":null}(a)),c=this.componentDef.onPush?576:528,h="string"==typeof n&&/^#root-ng-internal-isolated-\d+/.test(n),d={components:[],scheduler:bn,clean:Qr,playerHandler:null,flags:0},f=Ar(0,-1,null,1,0,null,null,null,null,null),p=pr(null,f,d,c,null,null,s,l,o,i);let g,y;Ke(p,null);try{const t=function(t,e,n,r,i,s){const o=n[1];n[19]=t;const l=gr(o,null,0,3,null,null),a=l.mergedAttrs=e.hostAttrs;null!==a&&(qi(l,a),null!==t&&(un(i,t,a),null!==l.classes&&mi(i,t,l.classes),null!==l.styles&&yi(i,t,l.styles)));const u=r.createRenderer(t,e),c=pr(n,kr(e),null,e.onPush?64:16,n[19],l,r,u,void 0);return o.firstCreatePass&&(In(xn(l,n),o,e.type),Pr(o,l),Vr(l,n.length,1)),qr(n,c),n[19]=c}(u,this.componentDef,p,s,l);if(u)if(n)un(l,u,["ng-version",$s.full]);else{const{attrs:t,classes:e}=function(t){const e=[],n=[];let r=1,i=2;for(;r<t.length;){let s=t[r];if("string"==typeof s)2===i?""!==s&&e.push(s,t[++r]):8===i&&n.push(s);else{if(!Un(i))break;i=s}r++}return{attrs:e,classes:n}}(this.componentDef.selectors[0]);t&&un(l,u,t),e&&e.length>0&&mi(l,u,e.join(" "))}y=Se(p[1],0),e&&(y.projection=e.map(t=>Array.from(t))),g=function(t,e,n,r,i){const s=n[1],o=function(t,e,n){const r=ze();t.firstCreatePass&&(n.providersResolver&&n.providersResolver(n),Dr(t,r,1),Rr(t,e,n));const i=Pn(e,t,e.length-1,r);Xn(i,e);const s=Te(r,e);return s&&Xn(s,e),i}(s,n,e);r.components.push(o),t[8]=o,i&&i.forEach(t=>t(o,e)),e.contentQueries&&e.contentQueries(1,o,n.length-1);const l=ze();if(s.firstCreatePass&&(null!==e.hostBindings||null!==e.hostAttrs)){$e(l.index-19);const t=n[1];Ir(t,e),Or(t,n,e.hostVars),Nr(e,o)}return o}(t,this.componentDef,p,d,[xs]),yr(f,p,null)}finally{Ue()}const m=new Eo(this.componentType,g,Ai(Zs,y,p),p,y);return n&&!h||(m.hostView._tViewNode.child=y),m}}class Eo extends class{}{constructor(t,e,n,r,i){super(),this.location=n,this._rootLView=r,this._tNode=i,this.destroyCbs=[],this.instance=e,this.hostView=this.changeDetectorRef=new bi(r),this.hostView._tViewNode=function(t,e,n,r){let i=t.node;return null==i&&(t.node=i=xr(0,null,2,-1,null,null)),r[6]=i}(r[1],0,0,r),this.componentType=t}get injector(){return new Rn(this._tNode,this._rootLView)}destroy(){this.destroyCbs&&(this.destroyCbs.forEach(t=>t()),this.destroyCbs=null,!this.hostView.destroyed&&this.hostView.destroy())}onDestroy(t){this.destroyCbs&&this.destroyCbs.push(t)}}const To=void 0;var So=["en",[["a","p"],["AM","PM"],To],[["AM","PM"],To,To],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],To,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],To,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",To,"{1} 'at' {0}",To],[".",",",";","%","+","-","E","\xd7","\u2030","\u221e","NaN",":"],["#,##0.###","#,##0%","\xa4#,##0.00","#E0"],"USD","$","US Dollar",{},function(t){let e=Math.floor(Math.abs(t)),n=t.toString().replace(/^[^.]*\.?/,"").length;return 1===e&&0===n?1:5}];let Io={};function Oo(t){return t in Io||(Io[t]=xt.ng&&xt.ng.common&&xt.ng.common.locales&&xt.ng.common.locales[t]),Io[t]}const No=function(){var t={LocaleId:0,DayPeriodsFormat:1,DayPeriodsStandalone:2,DaysFormat:3,DaysStandalone:4,MonthsFormat:5,MonthsStandalone:6,Eras:7,FirstDayOfWeek:8,WeekendRange:9,DateFormat:10,TimeFormat:11,DateTimeFormat:12,NumberSymbols:13,NumberFormats:14,CurrencyCode:15,CurrencySymbol:16,CurrencyName:17,Currencies:18,PluralCase:19,ExtraData:20};return t[t.LocaleId]="LocaleId",t[t.DayPeriodsFormat]="DayPeriodsFormat",t[t.DayPeriodsStandalone]="DayPeriodsStandalone",t[t.DaysFormat]="DaysFormat",t[t.DaysStandalone]="DaysStandalone",t[t.MonthsFormat]="MonthsFormat",t[t.MonthsStandalone]="MonthsStandalone",t[t.Eras]="Eras",t[t.FirstDayOfWeek]="FirstDayOfWeek",t[t.WeekendRange]="WeekendRange",t[t.DateFormat]="DateFormat",t[t.TimeFormat]="TimeFormat",t[t.DateTimeFormat]="DateTimeFormat",t[t.NumberSymbols]="NumberSymbols",t[t.NumberFormats]="NumberFormats",t[t.CurrencyCode]="CurrencyCode",t[t.CurrencySymbol]="CurrencySymbol",t[t.CurrencyName]="CurrencyName",t[t.Currencies]="Currencies",t[t.PluralCase]="PluralCase",t[t.ExtraData]="ExtraData",t}();let Do="en-US";function Po(t){var e,n;n="Expected localeId to be defined",null==(e=t)&&function(t,e,n,r){throw new Error(`ASSERTION ERROR: ${t}`+` [Expected=> null != ${e} <=Actual]`)}(n,e),"string"==typeof t&&(Do=t.toLowerCase().replace(/_/g,"-"))}const Mo=new Map;class Vo extends Kt{constructor(t,e){super(),this._parent=e,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new Co(this);const n=fe(t),r=t[Ot]||null;r&&Po(r),this._bootstrapComponents=wn(n.bootstrap),this._r3Injector=Di(t,e,[{provide:Kt,useValue:this},{provide:Xs,useValue:this.componentFactoryResolver}],pt(t)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(t)}get(t,e=Bi.THROW_IF_NOT_FOUND,n=et.Default){return t===Bi||t===Kt||t===Mt?this:this._r3Injector.get(t,e,n)}destroy(){const t=this._r3Injector;!t.destroyed&&t.destroy(),this.destroyCbs.forEach(t=>t()),this.destroyCbs=null}onDestroy(t){this.destroyCbs.push(t)}}class Ro extends class{}{constructor(t){super(),this.moduleType=t,null!==fe(t)&&function t(e){if(null!==e.\u0275mod.id){const t=e.\u0275mod.id;(function(t,e,n){if(e&&e!==n)throw new Error(`Duplicate module registered for ${t} - ${pt(e)} vs ${pt(e.name)}`)})(t,Mo.get(t),e),Mo.set(t,e)}let n=e.\u0275mod.imports;n instanceof Function&&(n=n()),n&&n.forEach(e=>t(e))}(t)}create(t){return new Vo(this.moduleType,t)}}function jo(t,e,n,r){return function(t,e,n,r,i,s){const o=e+n;return Wi(t,o,i)?function(t,e,n){return t[e]=n}(t,o+1,s?r.call(s,i):r(i)):function(t,e){const n=t[e];return n===nr?void 0:n}(t,o+1)}(Re(),function(){const t=Me.lFrame;let e=t.bindingRootIndex;return-1===e&&(e=t.bindingRootIndex=t.tView.bindingStartIndex),e}(),t,e,n,r)}class zo extends A{constructor(t=!1){super(),this.__isAsync=t}emit(t){super.next(t)}subscribe(t,e,n){let r,i=t=>null,s=()=>null;t&&"object"==typeof t?(r=this.__isAsync?e=>{setTimeout(()=>t.next(e))}:e=>{t.next(e)},t.error&&(i=this.__isAsync?e=>{setTimeout(()=>t.error(e))}:e=>{t.error(e)}),t.complete&&(s=this.__isAsync?()=>{setTimeout(()=>t.complete())}:()=>{t.complete()})):(r=this.__isAsync?e=>{setTimeout(()=>t(e))}:e=>{t(e)},e&&(i=this.__isAsync?t=>{setTimeout(()=>e(t))}:t=>{e(t)}),n&&(s=this.__isAsync?()=>{setTimeout(()=>n())}:()=>{n()}));const o=super.subscribe(r,i,s);return t instanceof h&&t.add(o),o}}function Fo(t,e){return xi(yo,Zs,t,e)}const Bo=new Pt("Application Initializer");let Ho=(()=>{class t{constructor(t){this.appInits=t,this.initialized=!1,this.done=!1,this.donePromise=new Promise((t,e)=>{this.resolve=t,this.reject=e})}runInitializers(){if(this.initialized)return;const t=[],e=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let n=0;n<this.appInits.length;n++){const e=this.appInits[n]();os(e)&&t.push(e)}Promise.all(t).then(()=>{e()}).catch(t=>{this.reject(t)}),0===t.length&&e(),this.initialized=!0}}return t.\u0275fac=function(e){return new(e||t)(Lt(Bo,8))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const Go=new Pt("AppId"),Lo={provide:Go,useFactory:function(){return`${qo()}${qo()}${qo()}`},deps:[]};function qo(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const Xo=new Pt("Platform Initializer"),Zo=new Pt("Platform ID"),Ko=new Pt("appBootstrapListener");let Yo=(()=>{class t{log(t){console.log(t)}warn(t){console.warn(t)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const Qo=new Pt("LocaleId"),Wo=new Pt("DefaultCurrencyCode");class Jo{constructor(t,e){this.ngModuleFactory=t,this.componentFactories=e}}const Uo=function(t){return new Ro(t)},_o=Uo,$o=function(t){return Promise.resolve(Uo(t))},tl=function(t){const e=Uo(t),n=wn(fe(t).declarations).reduce((t,e)=>{const n=he(e);return n&&t.push(new xo(n)),t},[]);return new Jo(e,n)},el=tl,nl=function(t){return Promise.resolve(tl(t))};let rl=(()=>{class t{constructor(){this.compileModuleSync=_o,this.compileModuleAsync=$o,this.compileModuleAndAllComponentsSync=el,this.compileModuleAndAllComponentsAsync=nl}clearCache(){}clearCacheFor(t){}getModuleId(t){}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const il=new Pt("compilerOptions"),sl=(()=>Promise.resolve(0))();function ol(t){"undefined"==typeof Zone?sl.then(()=>{t&&t.apply(null,null)}):Zone.current.scheduleMicroTask("scheduleMicrotask",t)}class ll{constructor({enableLongStackTrace:t=!1,shouldCoalesceEventChangeDetection:e=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new zo(!1),this.onMicrotaskEmpty=new zo(!1),this.onStable=new zo(!1),this.onError=new zo(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched(),this._nesting=0,this._outer=this._inner=Zone.current,Zone.wtfZoneSpec&&(this._inner=this._inner.fork(Zone.wtfZoneSpec)),Zone.TaskTrackingZoneSpec&&(this._inner=this._inner.fork(new Zone.TaskTrackingZoneSpec)),t&&Zone.longStackTraceZoneSpec&&(this._inner=this._inner.fork(Zone.longStackTraceZoneSpec)),this.shouldCoalesceEventChangeDetection=e,this.lastRequestAnimationFrameId=-1,this.nativeRequestAnimationFrame=function(){let t=xt.requestAnimationFrame,e=xt.cancelAnimationFrame;if("undefined"!=typeof Zone&&t&&e){const n=t[Zone.__symbol__("OriginalDelegate")];n&&(t=n);const r=e[Zone.__symbol__("OriginalDelegate")];r&&(e=r)}return{nativeRequestAnimationFrame:t,nativeCancelAnimationFrame:e}}().nativeRequestAnimationFrame,function(t){const e=!!t.shouldCoalesceEventChangeDetection&&t.nativeRequestAnimationFrame&&(()=>{!function(t){-1===t.lastRequestAnimationFrameId&&(t.lastRequestAnimationFrameId=t.nativeRequestAnimationFrame.call(xt,()=>{t.lastRequestAnimationFrameId=-1,hl(t),cl(t)}),hl(t))}(t)});t._inner=t._inner.fork({name:"angular",properties:{isAngularZone:!0,maybeDelayChangeDetection:e},onInvokeTask:(n,r,i,s,o,l)=>{try{return dl(t),n.invokeTask(i,s,o,l)}finally{e&&"eventTask"===s.type&&e(),fl(t)}},onInvoke:(e,n,r,i,s,o,l)=>{try{return dl(t),e.invoke(r,i,s,o,l)}finally{fl(t)}},onHasTask:(e,n,r,i)=>{e.hasTask(r,i),n===r&&("microTask"==i.change?(t._hasPendingMicrotasks=i.microTask,hl(t),cl(t)):"macroTask"==i.change&&(t.hasPendingMacrotasks=i.macroTask))},onHandleError:(e,n,r,i)=>(e.handleError(r,i),t.runOutsideAngular(()=>t.onError.emit(i)),!1)})}(this)}static isInAngularZone(){return!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!ll.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(ll.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(t,e,n){return this._inner.run(t,e,n)}runTask(t,e,n,r){const i=this._inner,s=i.scheduleEventTask("NgZoneEvent: "+r,t,ul,al,al);try{return i.runTask(s,e,n)}finally{i.cancelTask(s)}}runGuarded(t,e,n){return this._inner.runGuarded(t,e,n)}runOutsideAngular(t){return this._outer.run(t)}}function al(){}const ul={};function cl(t){if(0==t._nesting&&!t.hasPendingMicrotasks&&!t.isStable)try{t._nesting++,t.onMicrotaskEmpty.emit(null)}finally{if(t._nesting--,!t.hasPendingMicrotasks)try{t.runOutsideAngular(()=>t.onStable.emit(null))}finally{t.isStable=!0}}}function hl(t){t.hasPendingMicrotasks=!!(t._hasPendingMicrotasks||t.shouldCoalesceEventChangeDetection&&-1!==t.lastRequestAnimationFrameId)}function dl(t){t._nesting++,t.isStable&&(t.isStable=!1,t.onUnstable.emit(null))}function fl(t){t._nesting--,cl(t)}class pl{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new zo,this.onMicrotaskEmpty=new zo,this.onStable=new zo,this.onError=new zo}run(t,e,n){return t.apply(e,n)}runGuarded(t,e,n){return t.apply(e,n)}runOutsideAngular(t){return t()}runTask(t,e,n,r){return t.apply(e,n)}}let gl=(()=>{class t{constructor(t){this._ngZone=t,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),t.run(()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")})}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.subscribe({next:()=>{ll.assertNotInAngularZone(),ol(()=>{this._isZoneStable=!0,this._runCallbacksIfReady()})}})})}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())ol(()=>{for(;0!==this._callbacks.length;){let t=this._callbacks.pop();clearTimeout(t.timeoutId),t.doneCb(this._didWork)}this._didWork=!1});else{let t=this.getPendingTasks();this._callbacks=this._callbacks.filter(e=>!e.updateCb||!e.updateCb(t)||(clearTimeout(e.timeoutId),!1)),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map(t=>({source:t.source,creationLocation:t.creationLocation,data:t.data})):[]}addCallback(t,e,n){let r=-1;e&&e>0&&(r=setTimeout(()=>{this._callbacks=this._callbacks.filter(t=>t.timeoutId!==r),t(this._didWork,this.getPendingTasks())},e)),this._callbacks.push({doneCb:t,timeoutId:r,updateCb:n})}whenStable(t,e,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');this.addCallback(t,e,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(t,e,n){return[]}}return t.\u0275fac=function(e){return new(e||t)(Lt(ll))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})(),yl=(()=>{class t{constructor(){this._applications=new Map,bl.addToWindow(this)}registerApplication(t,e){this._applications.set(t,e)}unregisterApplication(t){this._applications.delete(t)}unregisterAllApplications(){this._applications.clear()}getTestability(t){return this._applications.get(t)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(t,e=!0){return bl.findTestabilityInTree(this,t,e)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();class ml{addToWindow(t){}findTestabilityInTree(t,e,n){return null}}let vl,bl=new ml,wl=function(t,e,n){const r=new Ro(n);if(0===Hi.size)return Promise.resolve(r);const i=function(t){const e=[];return t.forEach(t=>t&&e.push(...t)),e}(t.get(il,[]).concat(e).map(t=>t.providers));if(0===i.length)return Promise.resolve(r);const s=function(){const t=xt.ng;if(!t||!t.\u0275compilerFacade)throw new Error("Angular JIT compilation failed: '@angular/compiler' not loaded!\n  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.");return t.\u0275compilerFacade}(),o=Bi.create({providers:i}).get(s.ResourceLoader);return function(t){const e=[],n=new Map;function r(t){let e=n.get(t);if(!e){const r=(t=>Promise.resolve(o.get(t)))(t);n.set(t,e=r.then(Li))}return e}return Hi.forEach((t,n)=>{const i=[];t.templateUrl&&i.push(r(t.templateUrl).then(e=>{t.template=e}));const s=t.styleUrls,o=t.styles||(t.styles=[]),l=t.styles.length;s&&s.forEach((e,n)=>{o.push(""),i.push(r(e).then(r=>{o[l+n]=r,s.splice(s.indexOf(e),1),0==s.length&&(t.styleUrls=void 0)}))});const a=Promise.all(i).then(()=>function(t){Gi.delete(t)}(n));e.push(a)}),Hi=new Map,Promise.all(e).then(()=>{})}().then(()=>r)};const Cl=new Pt("AllowMultipleToken");function kl(t,e,n=[]){const r=`Platform: ${e}`,i=new Pt(r);return(e=[])=>{let s=Al();if(!s||s.injector.get(Cl,!1))if(t)t(n.concat(e).concat({provide:i,useValue:!0}));else{const t=n.concat(e).concat({provide:i,useValue:!0},{provide:Ei,useValue:"platform"});!function(t){if(vl&&!vl.destroyed&&!vl.injector.get(Cl,!1))throw new Error("There can be only one platform. Destroy the previous one to create a new one.");vl=t.get(xl);const e=t.get(Xo,null);e&&e.forEach(t=>t())}(Bi.create({providers:t,name:r}))}return function(t){const e=Al();if(!e)throw new Error("No platform exists!");if(!e.injector.get(t,null))throw new Error("A platform with a different configuration has been created. Please destroy it first.");return e}(i)}}function Al(){return vl&&!vl.destroyed?vl:null}let xl=(()=>{class t{constructor(t){this._injector=t,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(t,e){const n=function(t,e){let n;return n="noop"===t?new pl:("zone.js"===t?void 0:t)||new ll({enableLongStackTrace:qn(),shouldCoalesceEventChangeDetection:e}),n}(e?e.ngZone:void 0,e&&e.ngZoneEventCoalescing||!1),r=[{provide:ll,useValue:n}];return n.run(()=>{const e=Bi.create({providers:r,parent:this.injector,name:t.moduleType.name}),i=t.create(e),s=i.injector.get(Hn,null);if(!s)throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return i.onDestroy(()=>Sl(this._modules,i)),n.runOutsideAngular(()=>n.onError.subscribe({next:t=>{s.handleError(t)}})),function(t,e,n){try{const r=n();return os(r)?r.catch(n=>{throw e.runOutsideAngular(()=>t.handleError(n)),n}):r}catch(r){throw e.runOutsideAngular(()=>t.handleError(r)),r}}(s,n,()=>{const t=i.injector.get(Ho);return t.runInitializers(),t.donePromise.then(()=>(Po(i.injector.get(Qo,"en-US")||"en-US"),this._moduleDoBootstrap(i),i))})})}bootstrapModule(t,e=[]){const n=El({},e);return wl(this.injector,n,t).then(t=>this.bootstrapModuleFactory(t,n))}_moduleDoBootstrap(t){const e=t.injector.get(Tl);if(t._bootstrapComponents.length>0)t._bootstrapComponents.forEach(t=>e.bootstrap(t));else{if(!t.instance.ngDoBootstrap)throw new Error(`The module ${pt(t.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. `+"Please define one of these.");t.instance.ngDoBootstrap(e)}this._modules.push(t)}onDestroy(t){this._destroyListeners.push(t)}get injector(){return this._injector}destroy(){if(this._destroyed)throw new Error("The platform has already been destroyed!");this._modules.slice().forEach(t=>t.destroy()),this._destroyListeners.forEach(t=>t()),this._destroyed=!0}get destroyed(){return this._destroyed}}return t.\u0275fac=function(e){return new(e||t)(Lt(Bi))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();function El(t,e){return Array.isArray(e)?e.reduce(El,t):Object.assign(Object.assign({},t),e)}let Tl=(()=>{class t{constructor(t,e,n,r,i,s){this._zone=t,this._console=e,this._injector=n,this._exceptionHandler=r,this._componentFactoryResolver=i,this._initStatus=s,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._enforceNoNewChanges=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._enforceNoNewChanges=qn(),this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run(()=>{this.tick()})}});const o=new v(t=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular(()=>{t.next(this._stable),t.complete()})}),l=new v(t=>{let e;this._zone.runOutsideAngular(()=>{e=this._zone.onStable.subscribe(()=>{ll.assertNotInAngularZone(),ol(()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,t.next(!0))})})});const n=this._zone.onUnstable.subscribe(()=>{ll.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular(()=>{t.next(!1)}))});return()=>{e.unsubscribe(),n.unsubscribe()}});this.isStable=function(...t){let e=Number.POSITIVE_INFINITY,n=null,r=t[t.length-1];var i;return(i=r)&&"function"==typeof i.schedule?(n=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof r&&(e=t.pop()),null===n&&1===t.length&&t[0]instanceof v?t[0]:function(t=Number.POSITIVE_INFINITY){return function t(e,n,r=Number.POSITIVE_INFINITY){return"function"==typeof n?i=>i.pipe(t((t,r)=>z(e(t,r)).pipe(M((e,i)=>n(t,e,r,i))),r)):("number"==typeof n&&(r=n),t=>t.lift(new F(e,r)))}(H,t)}(e)(function(t,e){return e?j(t,e):new v(T(t))}(t,n))}(o,l.pipe(t=>{return G()((e=Y,function(t){let n;n="function"==typeof e?e:function(){return e};const r=Object.create(t,Z);return r.source=t,r.subjectFactory=n,r})(t));var e}))}bootstrap(t,e){if(!this._initStatus.done)throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");let n;n=t instanceof Ls?t:this._componentFactoryResolver.resolveComponentFactory(t),this.componentTypes.push(n.componentType);const r=n.isBoundToModule?void 0:this._injector.get(Kt),i=n.create(Bi.NULL,[],e||n.selector,r);i.onDestroy(()=>{this._unloadComponent(i)});const s=i.injector.get(gl,null);return s&&i.injector.get(yl).registerApplication(i.location.nativeElement,s),this._loadComponent(i),qn()&&this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode."),i}tick(){if(this._runningTick)throw new Error("ApplicationRef.tick is called recursively");try{this._runningTick=!0;for(let t of this._views)t.detectChanges();if(this._enforceNoNewChanges)for(let t of this._views)t.checkNoChanges()}catch(t){this._zone.runOutsideAngular(()=>this._exceptionHandler.handleError(t))}finally{this._runningTick=!1}}attachView(t){const e=t;this._views.push(e),e.attachToAppRef(this)}detachView(t){const e=t;Sl(this._views,e),e.detachFromAppRef()}_loadComponent(t){this.attachView(t.hostView),this.tick(),this.components.push(t),this._injector.get(Ko,[]).concat(this._bootstrapListeners).forEach(e=>e(t))}_unloadComponent(t){this.detachView(t.hostView),Sl(this.components,t)}ngOnDestroy(){this._views.slice().forEach(t=>t.destroy())}get viewCount(){return this._views.length}}return t.\u0275fac=function(e){return new(e||t)(Lt(ll),Lt(Yo),Lt(Bi),Lt(Hn),Lt(Xs),Lt(Ho))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();function Sl(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}const Il=kl(null,"core",[{provide:Zo,useValue:"unknown"},{provide:xl,deps:[Bi]},{provide:yl,deps:[]},{provide:Yo,deps:[]}]),Ol=[{provide:Tl,useClass:Tl,deps:[ll,Yo,Bi,Hn,Xs,Ho]},{provide:Ao,deps:[ll],useFactory:function(t){let e=[];return t.onStable.subscribe(()=>{for(;e.length;)e.pop()()}),function(t){e.push(t)}}},{provide:Ho,useClass:Ho,deps:[[new U,Bo]]},{provide:rl,useClass:rl,deps:[]},Lo,{provide:co,useFactory:function(){return po},deps:[]},{provide:ho,useFactory:function(){return go},deps:[]},{provide:Qo,useFactory:function(t){return Po(t=t||"undefined"!=typeof $localize&&$localize.locale||"en-US"),t},deps:[[new J(Qo),new U,new tt]]},{provide:Wo,useValue:"USD"}];let Nl=(()=>{class t{constructor(t){}}return t.\u0275mod=ae({type:t}),t.\u0275inj=st({factory:function(e){return new(e||t)(Lt(Tl))},providers:Ol}),t})(),Dl=null;function Pl(){return Dl}const Ml=new Pt("DocumentToken"),Vl=function(){var t={Zero:0,One:1,Two:2,Few:3,Many:4,Other:5};return t[t.Zero]="Zero",t[t.One]="One",t[t.Two]="Two",t[t.Few]="Few",t[t.Many]="Many",t[t.Other]="Other",t}();class Rl{}let jl=(()=>{class t extends Rl{constructor(t){super(),this.locale=t}getPluralCategory(t,e){switch(function(t){return function(t){const e=function(t){return t.toLowerCase().replace(/_/g,"-")}(t);let n=Oo(e);if(n)return n;const r=e.split("-")[0];if(n=Oo(r),n)return n;if("en"===r)return So;throw new Error(`Missing locale data for the locale "${t}".`)}(t)[No.PluralCase]}(e||this.locale)(t)){case Vl.Zero:return"zero";case Vl.One:return"one";case Vl.Two:return"two";case Vl.Few:return"few";case Vl.Many:return"many";default:return"other"}}}return t.\u0275fac=function(e){return new(e||t)(Lt(Qo))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})(),zl=(()=>{class t{constructor(t,e,n,r){this._iterableDiffers=t,this._keyValueDiffers=e,this._ngEl=n,this._renderer=r,this._iterableDiffer=null,this._keyValueDiffer=null,this._initialClasses=[],this._rawClass=null}set klass(t){this._removeClasses(this._initialClasses),this._initialClasses="string"==typeof t?t.split(/\s+/):[],this._applyClasses(this._initialClasses),this._applyClasses(this._rawClass)}set ngClass(t){this._removeClasses(this._rawClass),this._applyClasses(this._initialClasses),this._iterableDiffer=null,this._keyValueDiffer=null,this._rawClass="string"==typeof t?t.split(/\s+/):t,this._rawClass&&(Yi(this._rawClass)?this._iterableDiffer=this._iterableDiffers.find(this._rawClass).create():this._keyValueDiffer=this._keyValueDiffers.find(this._rawClass).create())}ngDoCheck(){if(this._iterableDiffer){const t=this._iterableDiffer.diff(this._rawClass);t&&this._applyIterableChanges(t)}else if(this._keyValueDiffer){const t=this._keyValueDiffer.diff(this._rawClass);t&&this._applyKeyValueChanges(t)}}_applyKeyValueChanges(t){t.forEachAddedItem(t=>this._toggleClass(t.key,t.currentValue)),t.forEachChangedItem(t=>this._toggleClass(t.key,t.currentValue)),t.forEachRemovedItem(t=>{t.previousValue&&this._toggleClass(t.key,!1)})}_applyIterableChanges(t){t.forEachAddedItem(t=>{if("string"!=typeof t.item)throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${pt(t.item)}`);this._toggleClass(t.item,!0)}),t.forEachRemovedItem(t=>this._toggleClass(t.item,!1))}_applyClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(t=>this._toggleClass(t,!0)):Object.keys(t).forEach(e=>this._toggleClass(e,!!t[e])))}_removeClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(t=>this._toggleClass(t,!1)):Object.keys(t).forEach(t=>this._toggleClass(t,!1)))}_toggleClass(t,e){(t=t.trim())&&t.split(/\s+/g).forEach(t=>{e?this._renderer.addClass(this._ngEl.nativeElement,t):this._renderer.removeClass(this._ngEl.nativeElement,t)})}}return t.\u0275fac=function(e){return new(e||t)(ts(co),ts(ho),ts(Zs),ts(Ws))},t.\u0275dir=ce({type:t,selectors:[["","ngClass",""]],inputs:{klass:["class","klass"],ngClass:"ngClass"}}),t})();class Fl{constructor(t,e,n,r){this.$implicit=t,this.ngForOf=e,this.index=n,this.count=r}get first(){return 0===this.index}get last(){return this.index===this.count-1}get even(){return this.index%2==0}get odd(){return!this.even}}let Bl=(()=>{class t{constructor(t,e,n){this._viewContainer=t,this._template=e,this._differs=n,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}set ngForOf(t){this._ngForOf=t,this._ngForOfDirty=!0}set ngForTrackBy(t){qn()&&null!=t&&"function"!=typeof t&&console&&console.warn&&console.warn(`trackBy must be a function, but received ${JSON.stringify(t)}. `+"See https://angular.io/api/common/NgForOf#change-propagation for more information."),this._trackByFn=t}get ngForTrackBy(){return this._trackByFn}set ngForTemplate(t){t&&(this._template=t)}ngDoCheck(){if(this._ngForOfDirty){this._ngForOfDirty=!1;const n=this._ngForOf;if(!this._differ&&n)try{this._differ=this._differs.find(n).create(this.ngForTrackBy)}catch(e){throw new Error(`Cannot find a differ supporting object '${n}' of type '${t=n,t.name||typeof t}'. NgFor only supports binding to Iterables such as Arrays.`)}}var t;if(this._differ){const t=this._differ.diff(this._ngForOf);t&&this._applyChanges(t)}}_applyChanges(t){const e=[];t.forEachOperation((t,n,r)=>{if(null==t.previousIndex){const n=this._viewContainer.createEmbeddedView(this._template,new Fl(null,this._ngForOf,-1,-1),null===r?void 0:r),i=new Hl(t,n);e.push(i)}else if(null==r)this._viewContainer.remove(null===n?void 0:n);else if(null!==n){const i=this._viewContainer.get(n);this._viewContainer.move(i,r);const s=new Hl(t,i);e.push(s)}});for(let n=0;n<e.length;n++)this._perViewChange(e[n].view,e[n].record);for(let n=0,r=this._viewContainer.length;n<r;n++){const t=this._viewContainer.get(n);t.context.index=n,t.context.count=r,t.context.ngForOf=this._ngForOf}t.forEachIdentityChange(t=>{this._viewContainer.get(t.currentIndex).context.$implicit=t.item})}_perViewChange(t,e){t.context.$implicit=e.item}static ngTemplateContextGuard(t,e){return!0}}return t.\u0275fac=function(e){return new(e||t)(ts(vo),ts(yo),ts(co))},t.\u0275dir=ce({type:t,selectors:[["","ngFor","","ngForOf",""]],inputs:{ngForOf:"ngForOf",ngForTrackBy:"ngForTrackBy",ngForTemplate:"ngForTemplate"}}),t})();class Hl{constructor(t,e){this.record=t,this.view=e}}let Gl=(()=>{class t{constructor(t,e){this._viewContainer=t,this._context=new Ll,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this._thenTemplateRef=e}set ngIf(t){this._context.$implicit=this._context.ngIf=t,this._updateView()}set ngIfThen(t){ql("ngIfThen",t),this._thenTemplateRef=t,this._thenViewRef=null,this._updateView()}set ngIfElse(t){ql("ngIfElse",t),this._elseTemplateRef=t,this._elseViewRef=null,this._updateView()}_updateView(){this._context.$implicit?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}static ngTemplateContextGuard(t,e){return!0}}return t.\u0275fac=function(e){return new(e||t)(ts(vo),ts(yo))},t.\u0275dir=ce({type:t,selectors:[["","ngIf",""]],inputs:{ngIf:"ngIf",ngIfThen:"ngIfThen",ngIfElse:"ngIfElse"}}),t})();class Ll{constructor(){this.$implicit=null,this.ngIf=null}}function ql(t,e){if(e&&!e.createEmbeddedView)throw new Error(`${t} must be a TemplateRef, but received '${pt(e)}'.`)}let Xl=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=st({factory:function(e){return new(e||t)},providers:[{provide:Rl,useClass:jl}]}),t})();class Zl extends class extends class{}{constructor(){super()}supportsDOMEvents(){return!0}}{static makeCurrent(){var t;t=new Zl,Dl||(Dl=t)}getProperty(t,e){return t[e]}log(t){window.console&&window.console.log&&window.console.log(t)}logGroup(t){window.console&&window.console.group&&window.console.group(t)}logGroupEnd(){window.console&&window.console.groupEnd&&window.console.groupEnd()}onAndCancel(t,e,n){return t.addEventListener(e,n,!1),()=>{t.removeEventListener(e,n,!1)}}dispatchEvent(t,e){t.dispatchEvent(e)}remove(t){return t.parentNode&&t.parentNode.removeChild(t),t}getValue(t){return t.value}createElement(t,e){return(e=e||this.getDefaultDocument()).createElement(t)}createHtmlDocument(){return document.implementation.createHTMLDocument("fakeTitle")}getDefaultDocument(){return document}isElementNode(t){return t.nodeType===Node.ELEMENT_NODE}isShadowRoot(t){return t instanceof DocumentFragment}getGlobalEventTarget(t,e){return"window"===e?window:"document"===e?t:"body"===e?t.body:null}getHistory(){return window.history}getLocation(){return window.location}getBaseHref(t){const e=Yl||(Yl=document.querySelector("base"),Yl)?Yl.getAttribute("href"):null;return null==e?null:(n=e,Kl||(Kl=document.createElement("a")),Kl.setAttribute("href",n),"/"===Kl.pathname.charAt(0)?Kl.pathname:"/"+Kl.pathname);var n}resetBaseElement(){Yl=null}getUserAgent(){return window.navigator.userAgent}performanceNow(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}supportsCookies(){return!0}getCookie(t){return function(t,e){e=encodeURIComponent(e);for(const n of t.split(";")){const t=n.indexOf("="),[r,i]=-1==t?[n,""]:[n.slice(0,t),n.slice(t+1)];if(r.trim()===e)return decodeURIComponent(i)}return null}(document.cookie,t)}}let Kl,Yl=null;const Ql=new Pt("TRANSITION_ID"),Wl=[{provide:Bo,useFactory:function(t,e,n){return()=>{n.get(Ho).donePromise.then(()=>{const n=Pl();Array.prototype.slice.apply(e.querySelectorAll("style[ng-transition]")).filter(e=>e.getAttribute("ng-transition")===t).forEach(t=>n.remove(t))})}},deps:[Ql,Ml,Bi],multi:!0}];class Jl{static init(){var t;t=new Jl,bl=t}addToWindow(t){xt.getAngularTestability=(e,n=!0)=>{const r=t.findTestabilityInTree(e,n);if(null==r)throw new Error("Could not find testability for element.");return r},xt.getAllAngularTestabilities=()=>t.getAllTestabilities(),xt.getAllAngularRootElements=()=>t.getAllRootElements(),xt.frameworkStabilizers||(xt.frameworkStabilizers=[]),xt.frameworkStabilizers.push(t=>{const e=xt.getAllAngularTestabilities();let n=e.length,r=!1;const i=function(e){r=r||e,n--,0==n&&t(r)};e.forEach((function(t){t.whenStable(i)}))})}findTestabilityInTree(t,e,n){if(null==e)return null;const r=t.getTestability(e);return null!=r?r:n?Pl().isShadowRoot(e)?this.findTestabilityInTree(t,e.host,!0):this.findTestabilityInTree(t,e.parentElement,!0):null}}const Ul=new Pt("EventManagerPlugins");let _l=(()=>{class t{constructor(t,e){this._zone=e,this._eventNameToPlugin=new Map,t.forEach(t=>t.manager=this),this._plugins=t.slice().reverse()}addEventListener(t,e,n){return this._findPluginFor(e).addEventListener(t,e,n)}addGlobalEventListener(t,e,n){return this._findPluginFor(e).addGlobalEventListener(t,e,n)}getZone(){return this._zone}_findPluginFor(t){const e=this._eventNameToPlugin.get(t);if(e)return e;const n=this._plugins;for(let r=0;r<n.length;r++){const e=n[r];if(e.supports(t))return this._eventNameToPlugin.set(t,e),e}throw new Error(`No event manager plugin found for event ${t}`)}}return t.\u0275fac=function(e){return new(e||t)(Lt(Ul),Lt(ll))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();class $l{constructor(t){this._doc=t}addGlobalEventListener(t,e,n){const r=Pl().getGlobalEventTarget(this._doc,t);if(!r)throw new Error(`Unsupported event target ${r} for event ${e}`);return this.addEventListener(r,e,n)}}let ta=(()=>{class t{constructor(){this._stylesSet=new Set}addStyles(t){const e=new Set;t.forEach(t=>{this._stylesSet.has(t)||(this._stylesSet.add(t),e.add(t))}),this.onStylesAdded(e)}onStylesAdded(t){}getAllStyles(){return Array.from(this._stylesSet)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})(),ea=(()=>{class t extends ta{constructor(t){super(),this._doc=t,this._hostNodes=new Set,this._styleNodes=new Set,this._hostNodes.add(t.head)}_addStylesToHost(t,e){t.forEach(t=>{const n=this._doc.createElement("style");n.textContent=t,this._styleNodes.add(e.appendChild(n))})}addHost(t){this._addStylesToHost(this._stylesSet,t),this._hostNodes.add(t)}removeHost(t){this._hostNodes.delete(t)}onStylesAdded(t){this._hostNodes.forEach(e=>this._addStylesToHost(t,e))}ngOnDestroy(){this._styleNodes.forEach(t=>Pl().remove(t))}}return t.\u0275fac=function(e){return new(e||t)(Lt(Ml))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const na={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ra=/%COMP%/g;function ia(t,e,n){for(let r=0;r<e.length;r++){let i=e[r];Array.isArray(i)?ia(t,i,n):(i=i.replace(ra,t),n.push(i))}return n}function sa(t){return e=>{if("__ngUnwrap__"===e)return t;!1===t(e)&&(e.preventDefault(),e.returnValue=!1)}}let oa=(()=>{class t{constructor(t,e,n){this.eventManager=t,this.sharedStylesHost=e,this.appId=n,this.rendererByCompId=new Map,this.defaultRenderer=new la(t)}createRenderer(t,e){if(!t||!e)return this.defaultRenderer;switch(e.encapsulation){case te.Emulated:{let n=this.rendererByCompId.get(e.id);return n||(n=new aa(this.eventManager,this.sharedStylesHost,e,this.appId),this.rendererByCompId.set(e.id,n)),n.applyToHost(t),n}case te.Native:case te.ShadowDom:return new ua(this.eventManager,this.sharedStylesHost,t,e);default:if(!this.rendererByCompId.has(e.id)){const t=ia(e.id,e.styles,[]);this.sharedStylesHost.addStyles(t),this.rendererByCompId.set(e.id,this.defaultRenderer)}return this.defaultRenderer}}begin(){}end(){}}return t.\u0275fac=function(e){return new(e||t)(Lt(_l),Lt(ea),Lt(Go))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();class la{constructor(t){this.eventManager=t,this.data=Object.create(null)}destroy(){}createElement(t,e){return e?document.createElementNS(na[e]||e,t):document.createElement(t)}createComment(t){return document.createComment(t)}createText(t){return document.createTextNode(t)}appendChild(t,e){t.appendChild(e)}insertBefore(t,e,n){t&&t.insertBefore(e,n)}removeChild(t,e){t&&t.removeChild(e)}selectRootElement(t,e){let n="string"==typeof t?document.querySelector(t):t;if(!n)throw new Error(`The selector "${t}" did not match any elements`);return e||(n.textContent=""),n}parentNode(t){return t.parentNode}nextSibling(t){return t.nextSibling}setAttribute(t,e,n,r){if(r){e=r+":"+e;const i=na[r];i?t.setAttributeNS(i,e,n):t.setAttribute(e,n)}else t.setAttribute(e,n)}removeAttribute(t,e,n){if(n){const r=na[n];r?t.removeAttributeNS(r,e):t.removeAttribute(`${n}:${e}`)}else t.removeAttribute(e)}addClass(t,e){t.classList.add(e)}removeClass(t,e){t.classList.remove(e)}setStyle(t,e,n,r){r&Qs.DashCase?t.style.setProperty(e,n,r&Qs.Important?"important":""):t.style[e]=n}removeStyle(t,e,n){n&Qs.DashCase?t.style.removeProperty(e):t.style[e]=""}setProperty(t,e,n){t[e]=n}setValue(t,e){t.nodeValue=e}listen(t,e,n){return"string"==typeof t?this.eventManager.addGlobalEventListener(t,e,sa(n)):this.eventManager.addEventListener(t,e,sa(n))}}class aa extends la{constructor(t,e,n,r){super(t),this.component=n;const i=ia(r+"-"+n.id,n.styles,[]);e.addStyles(i),this.contentAttr="_ngcontent-%COMP%".replace(ra,r+"-"+n.id),this.hostAttr=function(t){return"_nghost-%COMP%".replace(ra,t)}(r+"-"+n.id)}applyToHost(t){super.setAttribute(t,this.hostAttr,"")}createElement(t,e){const n=super.createElement(t,e);return super.setAttribute(n,this.contentAttr,""),n}}class ua extends la{constructor(t,e,n,r){super(t),this.sharedStylesHost=e,this.hostEl=n,this.component=r,this.shadowRoot=r.encapsulation===te.ShadowDom?n.attachShadow({mode:"open"}):n.createShadowRoot(),this.sharedStylesHost.addHost(this.shadowRoot);const i=ia(r.id,r.styles,[]);for(let s=0;s<i.length;s++){const t=document.createElement("style");t.textContent=i[s],this.shadowRoot.appendChild(t)}}nodeOrShadowRoot(t){return t===this.hostEl?this.shadowRoot:t}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}appendChild(t,e){return super.appendChild(this.nodeOrShadowRoot(t),e)}insertBefore(t,e,n){return super.insertBefore(this.nodeOrShadowRoot(t),e,n)}removeChild(t,e){return super.removeChild(this.nodeOrShadowRoot(t),e)}parentNode(t){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(t)))}}let ca=(()=>{class t extends $l{constructor(t){super(t)}supports(t){return!0}addEventListener(t,e,n){return t.addEventListener(e,n,!1),()=>this.removeEventListener(t,e,n)}removeEventListener(t,e,n){return t.removeEventListener(e,n)}}return t.\u0275fac=function(e){return new(e||t)(Lt(Ml))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const ha=["alt","control","meta","shift"],da={"\b":"Backspace","\t":"Tab","\x7f":"Delete","\x1b":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},fa={A:"1",B:"2",C:"3",D:"4",E:"5",F:"6",G:"7",H:"8",I:"9",J:"*",K:"+",M:"-",N:".",O:"/","`":"0","\x90":"NumLock"},pa={alt:t=>t.altKey,control:t=>t.ctrlKey,meta:t=>t.metaKey,shift:t=>t.shiftKey};let ga=(()=>{class t extends $l{constructor(t){super(t)}supports(e){return null!=t.parseEventName(e)}addEventListener(e,n,r){const i=t.parseEventName(n),s=t.eventCallback(i.fullKey,r,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>Pl().onAndCancel(e,i.domEventName,s))}static parseEventName(e){const n=e.toLowerCase().split("."),r=n.shift();if(0===n.length||"keydown"!==r&&"keyup"!==r)return null;const i=t._normalizeKey(n.pop());let s="";if(ha.forEach(t=>{const e=n.indexOf(t);e>-1&&(n.splice(e,1),s+=t+".")}),s+=i,0!=n.length||0===i.length)return null;const o={};return o.domEventName=r,o.fullKey=s,o}static getEventFullKey(t){let e="",n=function(t){let e=t.key;if(null==e){if(e=t.keyIdentifier,null==e)return"Unidentified";e.startsWith("U+")&&(e=String.fromCharCode(parseInt(e.substring(2),16)),3===t.location&&fa.hasOwnProperty(e)&&(e=fa[e]))}return da[e]||e}(t);return n=n.toLowerCase()," "===n?n="space":"."===n&&(n="dot"),ha.forEach(r=>{r!=n&&(0,pa[r])(t)&&(e+=r+".")}),e+=n,e}static eventCallback(e,n,r){return i=>{t.getEventFullKey(i)===e&&r.runGuarded(()=>n(i))}}static _normalizeKey(t){switch(t){case"esc":return"escape";default:return t}}}return t.\u0275fac=function(e){return new(e||t)(Lt(Ml))},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})();const ya=kl(Il,"browser",[{provide:Zo,useValue:"browser"},{provide:Xo,useValue:function(){Zl.makeCurrent(),Jl.init()},multi:!0},{provide:Ml,useFactory:function(){return function(t){Ce=t}(document),document},deps:[]}]),ma=[[],{provide:Ei,useValue:"root"},{provide:Hn,useFactory:function(){return new Hn},deps:[]},{provide:Ul,useClass:ca,multi:!0,deps:[Ml,ll,Zo]},{provide:Ul,useClass:ga,multi:!0,deps:[Ml]},[],{provide:oa,useClass:oa,deps:[_l,ea,Go]},{provide:Ys,useExisting:oa},{provide:ta,useExisting:ea},{provide:ea,useClass:ea,deps:[Ml]},{provide:gl,useClass:gl,deps:[ll]},{provide:_l,useClass:_l,deps:[Ul,ll]},[]];let va=(()=>{class t{constructor(t){if(t)throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.")}static withServerTransition(e){return{ngModule:t,providers:[{provide:Go,useValue:e.appId},{provide:Ql,useExisting:Go},Wl]}}}return t.\u0275mod=ae({type:t}),t.\u0275inj=st({factory:function(e){return new(e||t)(Lt(t,12))},providers:ma,imports:[Xl,Nl]}),t})();"undefined"!=typeof window&&window;class ba{constructor(t,e,n,r){this.category=t,this.subCategory=e,this.name=n,this.location=r}}var wa=n("NFKh");class Ca{static setCookie(t,e){const n=new Date,r=e;n.setTime(n.getTime()+6048e5),document.cookie=t+"="+r+"; expires="+n.toUTCString()+"; path=/"}static getCookie(t){const e=("; "+document.cookie).split("; "+t+"=");if(2===e.length)return e.pop().split(";").shift()}static deleteCookie(t){const e=new Date;e.setTime(e.getTime()+-864e5),document.cookie=t+"=; expires="+e.toUTCString()+"; path=/"}}let ka=(()=>{class t{}return t.cookieName="sttwins",t})(),Aa=(()=>{class t{getData(){return this.deserializeData()}getSerializedData(){let t;return t="",""}deserializeData(){let e=[];if(void 0===t.decryptedData){let r;const i=Ca.getCookie(ka.cookieName);if(void 0!==i)try{r=wa.AES.decrypt(this.getSerializedData(),i+"!").toString(wa.enc.Utf8);const n=JSON.parse(r);for(const t of n)e.push(new ba(t.category,t.subCategory,t.name,t.location));t.decryptedData=e}catch(n){console.log(n)}}else e=t.decryptedData;return e}}return t.decryptedData=void 0,t})();function xa(t,e){return new v(n=>{const r=t.length;if(0===r)return void n.complete();const i=new Array(r);let s=0,o=0;for(let l=0;l<r;l++){const a=z(t[l]);let u=!1;n.add(a.subscribe({next:t=>{u||(u=!0,o++),i[l]=t},error:t=>n.error(t),complete:()=>{s++,s!==r&&u||(o===r&&n.next(e?e.reduce((t,e,n)=>(t[e]=i[n],t),{}):i),n.complete())}}))}})}const Ea=new Pt("NgValueAccessor"),Ta={provide:Ea,useExisting:mt(()=>Sa),multi:!0};let Sa=(()=>{class t{constructor(t,e){this._renderer=t,this._elementRef=e,this.onChange=t=>{},this.onTouched=()=>{}}writeValue(t){this._renderer.setProperty(this._elementRef.nativeElement,"checked",t)}registerOnChange(t){this.onChange=t}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs))},t.\u0275dir=ce({type:t,selectors:[["input","type","checkbox","formControlName",""],["input","type","checkbox","formControl",""],["input","type","checkbox","ngModel",""]],hostBindings:function(t,e){1&t&&ls("change",(function(t){return e.onChange(t.target.checked)}))("blur",(function(){return e.onTouched()}))},features:[Gs([Ta])]}),t})();const Ia={provide:Ea,useExisting:mt(()=>Na),multi:!0},Oa=new Pt("CompositionEventMode");let Na=(()=>{class t{constructor(t,e,n){this._renderer=t,this._elementRef=e,this._compositionMode=n,this.onChange=t=>{},this.onTouched=()=>{},this._composing=!1,null==this._compositionMode&&(this._compositionMode=!function(){const t=Pl()?Pl().getUserAgent():"";return/android (\d+)/.test(t.toLowerCase())}())}writeValue(t){this._renderer.setProperty(this._elementRef.nativeElement,"value",null==t?"":t)}registerOnChange(t){this.onChange=t}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}_handleInput(t){(!this._compositionMode||this._compositionMode&&!this._composing)&&this.onChange(t)}_compositionStart(){this._composing=!0}_compositionEnd(t){this._composing=!1,this._compositionMode&&this.onChange(t)}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs),ts(Oa,8))},t.\u0275dir=ce({type:t,selectors:[["input","formControlName","",3,"type","checkbox"],["textarea","formControlName",""],["input","formControl","",3,"type","checkbox"],["textarea","formControl",""],["input","ngModel","",3,"type","checkbox"],["textarea","ngModel",""],["","ngDefaultControl",""]],hostBindings:function(t,e){1&t&&ls("input",(function(t){return e._handleInput(t.target.value)}))("blur",(function(){return e.onTouched()}))("compositionstart",(function(){return e._compositionStart()}))("compositionend",(function(t){return e._compositionEnd(t.target.value)}))},features:[Gs([Ia])]}),t})(),Da=(()=>{class t{get value(){return this.control?this.control.value:null}get valid(){return this.control?this.control.valid:null}get invalid(){return this.control?this.control.invalid:null}get pending(){return this.control?this.control.pending:null}get disabled(){return this.control?this.control.disabled:null}get enabled(){return this.control?this.control.enabled:null}get errors(){return this.control?this.control.errors:null}get pristine(){return this.control?this.control.pristine:null}get dirty(){return this.control?this.control.dirty:null}get touched(){return this.control?this.control.touched:null}get status(){return this.control?this.control.status:null}get untouched(){return this.control?this.control.untouched:null}get statusChanges(){return this.control?this.control.statusChanges:null}get valueChanges(){return this.control?this.control.valueChanges:null}get path(){return null}reset(t){this.control&&this.control.reset(t)}hasError(t,e){return!!this.control&&this.control.hasError(t,e)}getError(t,e){return this.control?this.control.getError(t,e):null}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275dir=ce({type:t}),t})(),Pa=(()=>{class t extends Da{get formDirective(){return null}get path(){return null}}return t.\u0275fac=function(e){return Ma(e||t)},t.\u0275dir=ce({type:t,features:[Es]}),t})();const Ma=jn(Pa);function Va(){throw new Error("unimplemented")}class Ra extends Da{constructor(){super(...arguments),this._parent=null,this.name=null,this.valueAccessor=null,this._rawValidators=[],this._rawAsyncValidators=[]}get validator(){return Va()}get asyncValidator(){return Va()}}let ja=(()=>{class t extends class{constructor(t){this._cd=t}get ngClassUntouched(){return!!this._cd.control&&this._cd.control.untouched}get ngClassTouched(){return!!this._cd.control&&this._cd.control.touched}get ngClassPristine(){return!!this._cd.control&&this._cd.control.pristine}get ngClassDirty(){return!!this._cd.control&&this._cd.control.dirty}get ngClassValid(){return!!this._cd.control&&this._cd.control.valid}get ngClassInvalid(){return!!this._cd.control&&this._cd.control.invalid}get ngClassPending(){return!!this._cd.control&&this._cd.control.pending}}{constructor(t){super(t)}}return t.\u0275fac=function(e){return new(e||t)(ts(Ra,2))},t.\u0275dir=ce({type:t,selectors:[["","formControlName",""],["","ngModel",""],["","formControl",""]],hostVars:14,hostBindings:function(t,e){2&t&&ys("ng-untouched",e.ngClassUntouched)("ng-touched",e.ngClassTouched)("ng-pristine",e.ngClassPristine)("ng-dirty",e.ngClassDirty)("ng-valid",e.ngClassValid)("ng-invalid",e.ngClassInvalid)("ng-pending",e.ngClassPending)},features:[Es]}),t})();function za(t){return null==t||0===t.length}const Fa=new Pt("NgValidators"),Ba=new Pt("NgAsyncValidators"),Ha=/^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;class Ga{static min(t){return e=>{if(za(e.value)||za(t))return null;const n=parseFloat(e.value);return!isNaN(n)&&n<t?{min:{min:t,actual:e.value}}:null}}static max(t){return e=>{if(za(e.value)||za(t))return null;const n=parseFloat(e.value);return!isNaN(n)&&n>t?{max:{max:t,actual:e.value}}:null}}static required(t){return za(t.value)?{required:!0}:null}static requiredTrue(t){return!0===t.value?null:{required:!0}}static email(t){return za(t.value)||Ha.test(t.value)?null:{email:!0}}static minLength(t){return e=>{if(za(e.value))return null;const n=e.value?e.value.length:0;return n<t?{minlength:{requiredLength:t,actualLength:n}}:null}}static maxLength(t){return e=>{const n=e.value?e.value.length:0;return n>t?{maxlength:{requiredLength:t,actualLength:n}}:null}}static pattern(t){if(!t)return Ga.nullValidator;let e,n;return"string"==typeof t?(n="","^"!==t.charAt(0)&&(n+="^"),n+=t,"$"!==t.charAt(t.length-1)&&(n+="$"),e=new RegExp(n)):(n=t.toString(),e=t),t=>{if(za(t.value))return null;const r=t.value;return e.test(r)?null:{pattern:{requiredPattern:n,actualValue:r}}}}static nullValidator(t){return null}static compose(t){if(!t)return null;const e=t.filter(La);return 0==e.length?null:function(t){return Xa(function(t,e){return e.map(e=>e(t))}(t,e))}}static composeAsync(t){if(!t)return null;const e=t.filter(La);return 0==e.length?null:function(t){return function(...t){if(1===t.length){const e=t[0];if(a(e))return xa(e,null);if(u(e)&&Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);return xa(t.map(t=>e[t]),t)}}if("function"==typeof t[t.length-1]){const e=t.pop();return xa(t=1===t.length&&a(t[0])?t[0]:t,null).pipe(M(t=>e(...t)))}return xa(t,null)}(function(t,e){return e.map(e=>e(t))}(t,e).map(qa)).pipe(M(Xa))}}}function La(t){return null!=t}function qa(t){const e=os(t)?z(t):t;if(!(n=e)||"function"!=typeof n.subscribe)throw new Error("Expected validator to return Promise or Observable.");var n;return e}function Xa(t){let e={};return t.forEach(t=>{e=null!=t?Object.assign(Object.assign({},e),t):e}),0===Object.keys(e).length?null:e}function Za(t){return t.validate?e=>t.validate(e):t}function Ka(t){return t.validate?e=>t.validate(e):t}const Ya={provide:Ea,useExisting:mt(()=>Qa),multi:!0};let Qa=(()=>{class t{constructor(t,e){this._renderer=t,this._elementRef=e,this.onChange=t=>{},this.onTouched=()=>{}}writeValue(t){this._renderer.setProperty(this._elementRef.nativeElement,"value",null==t?"":t)}registerOnChange(t){this.onChange=e=>{t(""==e?null:parseFloat(e))}}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs))},t.\u0275dir=ce({type:t,selectors:[["input","type","number","formControlName",""],["input","type","number","formControl",""],["input","type","number","ngModel",""]],hostBindings:function(t,e){1&t&&ls("change",(function(t){return e.onChange(t.target.value)}))("input",(function(t){return e.onChange(t.target.value)}))("blur",(function(){return e.onTouched()}))},features:[Gs([Ya])]}),t})();const Wa={provide:Ea,useExisting:mt(()=>Ua),multi:!0};let Ja=(()=>{class t{constructor(){this._accessors=[]}add(t,e){this._accessors.push([t,e])}remove(t){for(let e=this._accessors.length-1;e>=0;--e)if(this._accessors[e][1]===t)return void this._accessors.splice(e,1)}select(t){this._accessors.forEach(e=>{this._isSameGroup(e,t)&&e[1]!==t&&e[1].fireUncheck(t.value)})}_isSameGroup(t,e){return!!t[0].control&&t[0]._parent===e._control._parent&&t[1].name===e.name}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275prov=it({token:t,factory:t.\u0275fac}),t})(),Ua=(()=>{class t{constructor(t,e,n,r){this._renderer=t,this._elementRef=e,this._registry=n,this._injector=r,this.onChange=()=>{},this.onTouched=()=>{}}ngOnInit(){this._control=this._injector.get(Ra),this._checkName(),this._registry.add(this._control,this)}ngOnDestroy(){this._registry.remove(this)}writeValue(t){this._state=t===this.value,this._renderer.setProperty(this._elementRef.nativeElement,"checked",this._state)}registerOnChange(t){this._fn=t,this.onChange=()=>{t(this.value),this._registry.select(this)}}fireUncheck(t){this.writeValue(t)}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}_checkName(){this.name&&this.formControlName&&this.name!==this.formControlName&&this._throwNameError(),!this.name&&this.formControlName&&(this.name=this.formControlName)}_throwNameError(){throw new Error('\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type="radio" formControlName="food" name="food">\n    ')}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs),ts(Ja),ts(Bi))},t.\u0275dir=ce({type:t,selectors:[["input","type","radio","formControlName",""],["input","type","radio","formControl",""],["input","type","radio","ngModel",""]],hostBindings:function(t,e){1&t&&ls("change",(function(){return e.onChange()}))("blur",(function(){return e.onTouched()}))},inputs:{name:"name",formControlName:"formControlName",value:"value"},features:[Gs([Wa])]}),t})();const _a={provide:Ea,useExisting:mt(()=>$a),multi:!0};let $a=(()=>{class t{constructor(t,e){this._renderer=t,this._elementRef=e,this.onChange=t=>{},this.onTouched=()=>{}}writeValue(t){this._renderer.setProperty(this._elementRef.nativeElement,"value",parseFloat(t))}registerOnChange(t){this.onChange=e=>{t(""==e?null:parseFloat(e))}}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs))},t.\u0275dir=ce({type:t,selectors:[["input","type","range","formControlName",""],["input","type","range","formControl",""],["input","type","range","ngModel",""]],hostBindings:function(t,e){1&t&&ls("change",(function(t){return e.onChange(t.target.value)}))("input",(function(t){return e.onChange(t.target.value)}))("blur",(function(){return e.onTouched()}))},features:[Gs([_a])]}),t})();const tu='\n    <div [formGroup]="myGroup">\n       <div formGroupName="person">\n          <input formControlName="firstName">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });',eu='\n    <form>\n       <div ngModelGroup="person">\n          <input [(ngModel)]="person.name" name="firstName">\n       </div>\n    </form>',nu={provide:Ea,useExisting:mt(()=>ru),multi:!0};let ru=(()=>{class t{constructor(t,e){this._renderer=t,this._elementRef=e,this._optionMap=new Map,this._idCounter=0,this.onChange=t=>{},this.onTouched=()=>{},this._compareWith=Ki}set compareWith(t){if("function"!=typeof t)throw new Error(`compareWith must be a function, but received ${JSON.stringify(t)}`);this._compareWith=t}writeValue(t){this.value=t;const e=this._getOptionId(t);null==e&&this._renderer.setProperty(this._elementRef.nativeElement,"selectedIndex",-1);const n=function(t,e){return null==t?`${e}`:(e&&"object"==typeof e&&(e="Object"),`${t}: ${e}`.slice(0,50))}(e,t);this._renderer.setProperty(this._elementRef.nativeElement,"value",n)}registerOnChange(t){this.onChange=e=>{this.value=this._getOptionValue(e),t(this.value)}}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}_registerOption(){return(this._idCounter++).toString()}_getOptionId(t){for(const e of Array.from(this._optionMap.keys()))if(this._compareWith(this._optionMap.get(e),t))return e;return null}_getOptionValue(t){const e=function(t){return t.split(":")[0]}(t);return this._optionMap.has(e)?this._optionMap.get(e):t}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs))},t.\u0275dir=ce({type:t,selectors:[["select","formControlName","",3,"multiple",""],["select","formControl","",3,"multiple",""],["select","ngModel","",3,"multiple",""]],hostBindings:function(t,e){1&t&&ls("change",(function(t){return e.onChange(t.target.value)}))("blur",(function(){return e.onTouched()}))},inputs:{compareWith:"compareWith"},features:[Gs([nu])]}),t})();const iu={provide:Ea,useExisting:mt(()=>su),multi:!0};let su=(()=>{class t{constructor(t,e){this._renderer=t,this._elementRef=e,this._optionMap=new Map,this._idCounter=0,this.onChange=t=>{},this.onTouched=()=>{},this._compareWith=Ki}set compareWith(t){if("function"!=typeof t)throw new Error(`compareWith must be a function, but received ${JSON.stringify(t)}`);this._compareWith=t}writeValue(t){let e;if(this.value=t,Array.isArray(t)){const n=t.map(t=>this._getOptionId(t));e=(t,e)=>{t._setSelected(n.indexOf(e.toString())>-1)}}else e=(t,e)=>{t._setSelected(!1)};this._optionMap.forEach(e)}registerOnChange(t){this.onChange=e=>{const n=[];if(e.hasOwnProperty("selectedOptions")){const t=e.selectedOptions;for(let e=0;e<t.length;e++){const r=t.item(e),i=this._getOptionValue(r.value);n.push(i)}}else{const t=e.options;for(let e=0;e<t.length;e++){const r=t.item(e);if(r.selected){const t=this._getOptionValue(r.value);n.push(t)}}}this.value=n,t(n)}}registerOnTouched(t){this.onTouched=t}setDisabledState(t){this._renderer.setProperty(this._elementRef.nativeElement,"disabled",t)}_registerOption(t){const e=(this._idCounter++).toString();return this._optionMap.set(e,t),e}_getOptionId(t){for(const e of Array.from(this._optionMap.keys()))if(this._compareWith(this._optionMap.get(e)._value,t))return e;return null}_getOptionValue(t){const e=function(t){return t.split(":")[0]}(t);return this._optionMap.has(e)?this._optionMap.get(e)._value:t}}return t.\u0275fac=function(e){return new(e||t)(ts(Ws),ts(Zs))},t.\u0275dir=ce({type:t,selectors:[["select","multiple","","formControlName",""],["select","multiple","","formControl",""],["select","multiple","","ngModel",""]],hostBindings:function(t,e){1&t&&ls("change",(function(t){return e.onChange(t.target)}))("blur",(function(){return e.onTouched()}))},inputs:{compareWith:"compareWith"},features:[Gs([iu])]}),t})();function ou(t,e){return[...e.path,t]}function lu(t,e){t||uu(e,"Cannot find control with"),e.valueAccessor||uu(e,"No value accessor for form control with"),t.validator=Ga.compose([t.validator,e.validator]),t.asyncValidator=Ga.composeAsync([t.asyncValidator,e.asyncValidator]),e.valueAccessor.writeValue(t.value),function(t,e){e.valueAccessor.registerOnChange(n=>{t._pendingValue=n,t._pendingChange=!0,t._pendingDirty=!0,"change"===t.updateOn&&au(t,e)})}(t,e),function(t,e){t.registerOnChange((t,n)=>{e.valueAccessor.writeValue(t),n&&e.viewToModelUpdate(t)})}(t,e),function(t,e){e.valueAccessor.registerOnTouched(()=>{t._pendingTouched=!0,"blur"===t.updateOn&&t._pendingChange&&au(t,e),"submit"!==t.updateOn&&t.markAsTouched()})}(t,e),e.valueAccessor.setDisabledState&&t.registerOnDisabledChange(t=>{e.valueAccessor.setDisabledState(t)}),e._rawValidators.forEach(e=>{e.registerOnValidatorChange&&e.registerOnValidatorChange(()=>t.updateValueAndValidity())}),e._rawAsyncValidators.forEach(e=>{e.registerOnValidatorChange&&e.registerOnValidatorChange(()=>t.updateValueAndValidity())})}function au(t,e){t._pendingDirty&&t.markAsDirty(),t.setValue(t._pendingValue,{emitModelToViewChange:!1}),e.viewToModelUpdate(t._pendingValue),t._pendingChange=!1}function uu(t,e){let n;throw n=t.path.length>1?`path: '${t.path.join(" -> ")}'`:t.path[0]?`name: '${t.path}'`:"unspecified name attribute",new Error(`${e} ${n}`)}function cu(t){return null!=t?Ga.compose(t.map(Za)):null}function hu(t){return null!=t?Ga.composeAsync(t.map(Ka)):null}const du=[Sa,$a,Qa,ru,su,Ua];function fu(t){const e=gu(t)?t.validators:t;return Array.isArray(e)?cu(e):e||null}function pu(t,e){const n=gu(e)?e.asyncValidators:t;return Array.isArray(n)?hu(n):n||null}function gu(t){return null!=t&&!Array.isArray(t)&&"object"==typeof t}class yu{constructor(t,e){this.validator=t,this.asyncValidator=e,this._onCollectionChange=()=>{},this.pristine=!0,this.touched=!1,this._onDisabledChange=[]}get parent(){return this._parent}get valid(){return"VALID"===this.status}get invalid(){return"INVALID"===this.status}get pending(){return"PENDING"==this.status}get disabled(){return"DISABLED"===this.status}get enabled(){return"DISABLED"!==this.status}get dirty(){return!this.pristine}get untouched(){return!this.touched}get updateOn(){return this._updateOn?this._updateOn:this.parent?this.parent.updateOn:"change"}setValidators(t){this.validator=fu(t)}setAsyncValidators(t){this.asyncValidator=pu(t)}clearValidators(){this.validator=null}clearAsyncValidators(){this.asyncValidator=null}markAsTouched(t={}){this.touched=!0,this._parent&&!t.onlySelf&&this._parent.markAsTouched(t)}markAllAsTouched(){this.markAsTouched({onlySelf:!0}),this._forEachChild(t=>t.markAllAsTouched())}markAsUntouched(t={}){this.touched=!1,this._pendingTouched=!1,this._forEachChild(t=>{t.markAsUntouched({onlySelf:!0})}),this._parent&&!t.onlySelf&&this._parent._updateTouched(t)}markAsDirty(t={}){this.pristine=!1,this._parent&&!t.onlySelf&&this._parent.markAsDirty(t)}markAsPristine(t={}){this.pristine=!0,this._pendingDirty=!1,this._forEachChild(t=>{t.markAsPristine({onlySelf:!0})}),this._parent&&!t.onlySelf&&this._parent._updatePristine(t)}markAsPending(t={}){this.status="PENDING",!1!==t.emitEvent&&this.statusChanges.emit(this.status),this._parent&&!t.onlySelf&&this._parent.markAsPending(t)}disable(t={}){const e=this._parentMarkedDirty(t.onlySelf);this.status="DISABLED",this.errors=null,this._forEachChild(e=>{e.disable(Object.assign(Object.assign({},t),{onlySelf:!0}))}),this._updateValue(),!1!==t.emitEvent&&(this.valueChanges.emit(this.value),this.statusChanges.emit(this.status)),this._updateAncestors(Object.assign(Object.assign({},t),{skipPristineCheck:e})),this._onDisabledChange.forEach(t=>t(!0))}enable(t={}){const e=this._parentMarkedDirty(t.onlySelf);this.status="VALID",this._forEachChild(e=>{e.enable(Object.assign(Object.assign({},t),{onlySelf:!0}))}),this.updateValueAndValidity({onlySelf:!0,emitEvent:t.emitEvent}),this._updateAncestors(Object.assign(Object.assign({},t),{skipPristineCheck:e})),this._onDisabledChange.forEach(t=>t(!1))}_updateAncestors(t){this._parent&&!t.onlySelf&&(this._parent.updateValueAndValidity(t),t.skipPristineCheck||this._parent._updatePristine(),this._parent._updateTouched())}setParent(t){this._parent=t}updateValueAndValidity(t={}){this._setInitialStatus(),this._updateValue(),this.enabled&&(this._cancelExistingSubscription(),this.errors=this._runValidator(),this.status=this._calculateStatus(),"VALID"!==this.status&&"PENDING"!==this.status||this._runAsyncValidator(t.emitEvent)),!1!==t.emitEvent&&(this.valueChanges.emit(this.value),this.statusChanges.emit(this.status)),this._parent&&!t.onlySelf&&this._parent.updateValueAndValidity(t)}_updateTreeValidity(t={emitEvent:!0}){this._forEachChild(e=>e._updateTreeValidity(t)),this.updateValueAndValidity({onlySelf:!0,emitEvent:t.emitEvent})}_setInitialStatus(){this.status=this._allControlsDisabled()?"DISABLED":"VALID"}_runValidator(){return this.validator?this.validator(this):null}_runAsyncValidator(t){if(this.asyncValidator){this.status="PENDING";const e=qa(this.asyncValidator(this));this._asyncValidationSubscription=e.subscribe(e=>this.setErrors(e,{emitEvent:t}))}}_cancelExistingSubscription(){this._asyncValidationSubscription&&this._asyncValidationSubscription.unsubscribe()}setErrors(t,e={}){this.errors=t,this._updateControlsErrors(!1!==e.emitEvent)}get(t){return function(t,e,n){if(null==e)return null;if(Array.isArray(e)||(e=e.split(".")),Array.isArray(e)&&0===e.length)return null;let r=t;return e.forEach(t=>{r=r instanceof vu?r.controls.hasOwnProperty(t)?r.controls[t]:null:r instanceof bu&&r.at(t)||null}),r}(this,t)}getError(t,e){const n=e?this.get(e):this;return n&&n.errors?n.errors[t]:null}hasError(t,e){return!!this.getError(t,e)}get root(){let t=this;for(;t._parent;)t=t._parent;return t}_updateControlsErrors(t){this.status=this._calculateStatus(),t&&this.statusChanges.emit(this.status),this._parent&&this._parent._updateControlsErrors(t)}_initObservables(){this.valueChanges=new zo,this.statusChanges=new zo}_calculateStatus(){return this._allControlsDisabled()?"DISABLED":this.errors?"INVALID":this._anyControlsHaveStatus("PENDING")?"PENDING":this._anyControlsHaveStatus("INVALID")?"INVALID":"VALID"}_anyControlsHaveStatus(t){return this._anyControls(e=>e.status===t)}_anyControlsDirty(){return this._anyControls(t=>t.dirty)}_anyControlsTouched(){return this._anyControls(t=>t.touched)}_updatePristine(t={}){this.pristine=!this._anyControlsDirty(),this._parent&&!t.onlySelf&&this._parent._updatePristine(t)}_updateTouched(t={}){this.touched=this._anyControlsTouched(),this._parent&&!t.onlySelf&&this._parent._updateTouched(t)}_isBoxedValue(t){return"object"==typeof t&&null!==t&&2===Object.keys(t).length&&"value"in t&&"disabled"in t}_registerOnCollectionChange(t){this._onCollectionChange=t}_setUpdateStrategy(t){gu(t)&&null!=t.updateOn&&(this._updateOn=t.updateOn)}_parentMarkedDirty(t){return!t&&this._parent&&this._parent.dirty&&!this._parent._anyControlsDirty()}}class mu extends yu{constructor(t=null,e,n){super(fu(e),pu(n,e)),this._onChange=[],this._applyFormState(t),this._setUpdateStrategy(e),this.updateValueAndValidity({onlySelf:!0,emitEvent:!1}),this._initObservables()}setValue(t,e={}){this.value=this._pendingValue=t,this._onChange.length&&!1!==e.emitModelToViewChange&&this._onChange.forEach(t=>t(this.value,!1!==e.emitViewToModelChange)),this.updateValueAndValidity(e)}patchValue(t,e={}){this.setValue(t,e)}reset(t=null,e={}){this._applyFormState(t),this.markAsPristine(e),this.markAsUntouched(e),this.setValue(this.value,e),this._pendingChange=!1}_updateValue(){}_anyControls(t){return!1}_allControlsDisabled(){return this.disabled}registerOnChange(t){this._onChange.push(t)}_clearChangeFns(){this._onChange=[],this._onDisabledChange=[],this._onCollectionChange=()=>{}}registerOnDisabledChange(t){this._onDisabledChange.push(t)}_forEachChild(t){}_syncPendingControls(){return!("submit"!==this.updateOn||(this._pendingDirty&&this.markAsDirty(),this._pendingTouched&&this.markAsTouched(),!this._pendingChange)||(this.setValue(this._pendingValue,{onlySelf:!0,emitModelToViewChange:!1}),0))}_applyFormState(t){this._isBoxedValue(t)?(this.value=this._pendingValue=t.value,t.disabled?this.disable({onlySelf:!0,emitEvent:!1}):this.enable({onlySelf:!0,emitEvent:!1})):this.value=this._pendingValue=t}}class vu extends yu{constructor(t,e,n){super(fu(e),pu(n,e)),this.controls=t,this._initObservables(),this._setUpdateStrategy(e),this._setUpControls(),this.updateValueAndValidity({onlySelf:!0,emitEvent:!1})}registerControl(t,e){return this.controls[t]?this.controls[t]:(this.controls[t]=e,e.setParent(this),e._registerOnCollectionChange(this._onCollectionChange),e)}addControl(t,e){this.registerControl(t,e),this.updateValueAndValidity(),this._onCollectionChange()}removeControl(t){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),delete this.controls[t],this.updateValueAndValidity(),this._onCollectionChange()}setControl(t,e){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),delete this.controls[t],e&&this.registerControl(t,e),this.updateValueAndValidity(),this._onCollectionChange()}contains(t){return this.controls.hasOwnProperty(t)&&this.controls[t].enabled}setValue(t,e={}){this._checkAllValuesPresent(t),Object.keys(t).forEach(n=>{this._throwIfControlMissing(n),this.controls[n].setValue(t[n],{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}patchValue(t,e={}){Object.keys(t).forEach(n=>{this.controls[n]&&this.controls[n].patchValue(t[n],{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}reset(t={},e={}){this._forEachChild((n,r)=>{n.reset(t[r],{onlySelf:!0,emitEvent:e.emitEvent})}),this._updatePristine(e),this._updateTouched(e),this.updateValueAndValidity(e)}getRawValue(){return this._reduceChildren({},(t,e,n)=>(t[n]=e instanceof mu?e.value:e.getRawValue(),t))}_syncPendingControls(){let t=this._reduceChildren(!1,(t,e)=>!!e._syncPendingControls()||t);return t&&this.updateValueAndValidity({onlySelf:!0}),t}_throwIfControlMissing(t){if(!Object.keys(this.controls).length)throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");if(!this.controls[t])throw new Error(`Cannot find form control with name: ${t}.`)}_forEachChild(t){Object.keys(this.controls).forEach(e=>t(this.controls[e],e))}_setUpControls(){this._forEachChild(t=>{t.setParent(this),t._registerOnCollectionChange(this._onCollectionChange)})}_updateValue(){this.value=this._reduceValue()}_anyControls(t){let e=!1;return this._forEachChild((n,r)=>{e=e||this.contains(r)&&t(n)}),e}_reduceValue(){return this._reduceChildren({},(t,e,n)=>((e.enabled||this.disabled)&&(t[n]=e.value),t))}_reduceChildren(t,e){let n=t;return this._forEachChild((t,r)=>{n=e(n,t,r)}),n}_allControlsDisabled(){for(const t of Object.keys(this.controls))if(this.controls[t].enabled)return!1;return Object.keys(this.controls).length>0||this.disabled}_checkAllValuesPresent(t){this._forEachChild((e,n)=>{if(void 0===t[n])throw new Error(`Must supply a value for form control with name: '${n}'.`)})}}class bu extends yu{constructor(t,e,n){super(fu(e),pu(n,e)),this.controls=t,this._initObservables(),this._setUpdateStrategy(e),this._setUpControls(),this.updateValueAndValidity({onlySelf:!0,emitEvent:!1})}at(t){return this.controls[t]}push(t){this.controls.push(t),this._registerControl(t),this.updateValueAndValidity(),this._onCollectionChange()}insert(t,e){this.controls.splice(t,0,e),this._registerControl(e),this.updateValueAndValidity()}removeAt(t){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),this.controls.splice(t,1),this.updateValueAndValidity()}setControl(t,e){this.controls[t]&&this.controls[t]._registerOnCollectionChange(()=>{}),this.controls.splice(t,1),e&&(this.controls.splice(t,0,e),this._registerControl(e)),this.updateValueAndValidity(),this._onCollectionChange()}get length(){return this.controls.length}setValue(t,e={}){this._checkAllValuesPresent(t),t.forEach((t,n)=>{this._throwIfControlMissing(n),this.at(n).setValue(t,{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}patchValue(t,e={}){t.forEach((t,n)=>{this.at(n)&&this.at(n).patchValue(t,{onlySelf:!0,emitEvent:e.emitEvent})}),this.updateValueAndValidity(e)}reset(t=[],e={}){this._forEachChild((n,r)=>{n.reset(t[r],{onlySelf:!0,emitEvent:e.emitEvent})}),this._updatePristine(e),this._updateTouched(e),this.updateValueAndValidity(e)}getRawValue(){return this.controls.map(t=>t instanceof mu?t.value:t.getRawValue())}clear(){this.controls.length<1||(this._forEachChild(t=>t._registerOnCollectionChange(()=>{})),this.controls.splice(0),this.updateValueAndValidity())}_syncPendingControls(){let t=this.controls.reduce((t,e)=>!!e._syncPendingControls()||t,!1);return t&&this.updateValueAndValidity({onlySelf:!0}),t}_throwIfControlMissing(t){if(!this.controls.length)throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");if(!this.at(t))throw new Error(`Cannot find form control at index ${t}`)}_forEachChild(t){this.controls.forEach((e,n)=>{t(e,n)})}_updateValue(){this.value=this.controls.filter(t=>t.enabled||this.disabled).map(t=>t.value)}_anyControls(t){return this.controls.some(e=>e.enabled&&t(e))}_setUpControls(){this._forEachChild(t=>this._registerControl(t))}_checkAllValuesPresent(t){this._forEachChild((e,n)=>{if(void 0===t[n])throw new Error(`Must supply a value for form control at index: ${n}.`)})}_allControlsDisabled(){for(const t of this.controls)if(t.enabled)return!1;return this.controls.length>0||this.disabled}_registerControl(t){t.setParent(this),t._registerOnCollectionChange(this._onCollectionChange)}}const wu={provide:Pa,useExisting:mt(()=>ku)},Cu=(()=>Promise.resolve(null))();let ku=(()=>{class t extends Pa{constructor(t,e){super(),this.submitted=!1,this._directives=[],this.ngSubmit=new zo,this.form=new vu({},cu(t),hu(e))}ngAfterViewInit(){this._setUpdateStrategy()}get formDirective(){return this}get control(){return this.form}get path(){return[]}get controls(){return this.form.controls}addControl(t){Cu.then(()=>{const e=this._findContainer(t.path);t.control=e.registerControl(t.name,t.control),lu(t.control,t),t.control.updateValueAndValidity({emitEvent:!1}),this._directives.push(t)})}getControl(t){return this.form.get(t.path)}removeControl(t){Cu.then(()=>{const e=this._findContainer(t.path);e&&e.removeControl(t.name),function(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}(this._directives,t)})}addFormGroup(t){Cu.then(()=>{const e=this._findContainer(t.path),n=new vu({});(function(t,e){null==t&&uu(e,"Cannot find control with"),t.validator=Ga.compose([t.validator,e.validator]),t.asyncValidator=Ga.composeAsync([t.asyncValidator,e.asyncValidator])})(n,t),e.registerControl(t.name,n),n.updateValueAndValidity({emitEvent:!1})})}removeFormGroup(t){Cu.then(()=>{const e=this._findContainer(t.path);e&&e.removeControl(t.name)})}getFormGroup(t){return this.form.get(t.path)}updateModel(t,e){Cu.then(()=>{this.form.get(t.path).setValue(e)})}setValue(t){this.control.setValue(t)}onSubmit(t){return this.submitted=!0,e=this._directives,this.form._syncPendingControls(),e.forEach(t=>{const e=t.control;"submit"===e.updateOn&&e._pendingChange&&(t.viewToModelUpdate(e._pendingValue),e._pendingChange=!1)}),this.ngSubmit.emit(t),!1;var e}onReset(){this.resetForm()}resetForm(t){this.form.reset(t),this.submitted=!1}_setUpdateStrategy(){this.options&&null!=this.options.updateOn&&(this.form._updateOn=this.options.updateOn)}_findContainer(t){return t.pop(),t.length?this.form.get(t):this.form}}return t.\u0275fac=function(e){return new(e||t)(ts(Fa,10),ts(Ba,10))},t.\u0275dir=ce({type:t,selectors:[["form",3,"ngNoForm","",3,"formGroup",""],["ng-form"],["","ngForm",""]],hostBindings:function(t,e){1&t&&ls("submit",(function(t){return e.onSubmit(t)}))("reset",(function(){return e.onReset()}))},inputs:{options:["ngFormOptions","options"]},outputs:{ngSubmit:"ngSubmit"},exportAs:["ngForm"],features:[Gs([wu]),Es]}),t})(),Au=(()=>{class t extends Pa{ngOnInit(){this._checkParentType(),this.formDirective.addFormGroup(this)}ngOnDestroy(){this.formDirective&&this.formDirective.removeFormGroup(this)}get control(){return this.formDirective.getFormGroup(this)}get path(){return ou(null==this.name?this.name:this.name.toString(),this._parent)}get formDirective(){return this._parent?this._parent.formDirective:null}get validator(){return cu(this._validators)}get asyncValidator(){return hu(this._asyncValidators)}_checkParentType(){}}return t.\u0275fac=function(e){return xu(e||t)},t.\u0275dir=ce({type:t,features:[Es]}),t})();const xu=jn(Au);class Eu{static modelParentException(){throw new Error('\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup\'s partner directive "formControlName" instead.  Example:\n\n      \n    <div [formGroup]="myGroup">\n      <input formControlName="firstName">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });\n\n      Or, if you\'d like to avoid registering this form control, indicate that it\'s standalone in ngModelOptions:\n\n      Example:\n\n      \n    <div [formGroup]="myGroup">\n       <input formControlName="firstName">\n       <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">\n    </div>\n  ')}static formGroupNameException(){throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${tu}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${eu}`)}static missingNameException(){throw new Error('If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as \'standalone\' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]="person.firstName" name="first">\n      Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">')}static modelGroupParentException(){throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${tu}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${eu}`)}}const Tu={provide:Pa,useExisting:mt(()=>Su)};let Su=(()=>{class t extends Au{constructor(t,e,n){super(),this._parent=t,this._validators=e,this._asyncValidators=n}_checkParentType(){this._parent instanceof t||this._parent instanceof ku||Eu.modelGroupParentException()}}return t.\u0275fac=function(e){return new(e||t)(ts(Pa,5),ts(Fa,10),ts(Ba,10))},t.\u0275dir=ce({type:t,selectors:[["","ngModelGroup",""]],inputs:{name:["ngModelGroup","name"]},exportAs:["ngModelGroup"],features:[Gs([Tu]),Es]}),t})();const Iu={provide:Ra,useExisting:mt(()=>Nu)},Ou=(()=>Promise.resolve(null))();let Nu=(()=>{class t extends Ra{constructor(t,e,n,r){super(),this.control=new mu,this._registered=!1,this.update=new zo,this._parent=t,this._rawValidators=e||[],this._rawAsyncValidators=n||[],this.valueAccessor=function(t,e){if(!e)return null;Array.isArray(e)||uu(t,"Value accessor was not provided as an array for form control with");let n=void 0,r=void 0,i=void 0;return e.forEach(e=>{var s;e.constructor===Na?n=e:(s=e,du.some(t=>s.constructor===t)?(r&&uu(t,"More than one built-in value accessor matches form control with"),r=e):(i&&uu(t,"More than one custom value accessor matches form control with"),i=e))}),i||r||n||(uu(t,"No valid value accessor for form control with"),null)}(this,r)}ngOnChanges(t){this._checkForErrors(),this._registered||this._setUpControl(),"isDisabled"in t&&this._updateDisabled(t),function(t,e){if(!t.hasOwnProperty("model"))return!1;const n=t.model;return!!n.isFirstChange()||!Ki(e,n.currentValue)}(t,this.viewModel)&&(this._updateValue(this.model),this.viewModel=this.model)}ngOnDestroy(){this.formDirective&&this.formDirective.removeControl(this)}get path(){return this._parent?ou(this.name,this._parent):[this.name]}get formDirective(){return this._parent?this._parent.formDirective:null}get validator(){return cu(this._rawValidators)}get asyncValidator(){return hu(this._rawAsyncValidators)}viewToModelUpdate(t){this.viewModel=t,this.update.emit(t)}_setUpControl(){this._setUpdateStrategy(),this._isStandalone()?this._setUpStandalone():this.formDirective.addControl(this),this._registered=!0}_setUpdateStrategy(){this.options&&null!=this.options.updateOn&&(this.control._updateOn=this.options.updateOn)}_isStandalone(){return!this._parent||!(!this.options||!this.options.standalone)}_setUpStandalone(){lu(this.control,this),this.control.updateValueAndValidity({emitEvent:!1})}_checkForErrors(){this._isStandalone()||this._checkParentType(),this._checkName()}_checkParentType(){!(this._parent instanceof Su)&&this._parent instanceof Au?Eu.formGroupNameException():this._parent instanceof Su||this._parent instanceof ku||Eu.modelParentException()}_checkName(){this.options&&this.options.name&&(this.name=this.options.name),this._isStandalone()||this.name||Eu.missingNameException()}_updateValue(t){Ou.then(()=>{this.control.setValue(t,{emitViewToModelChange:!1})})}_updateDisabled(t){const e=t.isDisabled.currentValue,n=""===e||e&&"false"!==e;Ou.then(()=>{n&&!this.control.disabled?this.control.disable():!n&&this.control.disabled&&this.control.enable()})}}return t.\u0275fac=function(e){return new(e||t)(ts(Pa,9),ts(Fa,10),ts(Ba,10),ts(Ea,10))},t.\u0275dir=ce({type:t,selectors:[["","ngModel","",3,"formControlName","",3,"formControl",""]],inputs:{name:"name",isDisabled:["disabled","isDisabled"],model:["ngModel","model"],options:["ngModelOptions","options"]},outputs:{update:"ngModelChange"},exportAs:["ngModel"],features:[Gs([Iu]),Es,Ds]}),t})();const Du={provide:Fa,useExisting:mt(()=>Pu),multi:!0};let Pu=(()=>{class t{get required(){return this._required}set required(t){this._required=null!=t&&!1!==t&&"false"!==`${t}`,this._onChange&&this._onChange()}validate(t){return this.required?Ga.required(t):null}registerOnValidatorChange(t){this._onChange=t}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275dir=ce({type:t,selectors:[["","required","","formControlName","",3,"type","checkbox"],["","required","","formControl","",3,"type","checkbox"],["","required","","ngModel","",3,"type","checkbox"]],hostVars:1,hostBindings:function(t,e){2&t&&Ji("required",e.required?"":null)},inputs:{required:"required"},features:[Gs([Du])]}),t})(),Mu=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=st({factory:function(e){return new(e||t)}}),t})(),Vu=(()=>{class t{}return t.\u0275mod=ae({type:t}),t.\u0275inj=st({factory:function(e){return new(e||t)},providers:[Ja],imports:[Mu]}),t})();function Ru(t,e){1&t&&(rs(0,"div"),rs(1,"div",7),Cs(2,"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u042d\u0442\u043e \u0436\u0435 \u044d\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u043e, \u0412\u0430\u0442\u0441\u043e\u043d!"),is(),is())}let ju=(()=>{class t{constructor(){this.hint="\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b",this.checked=!1,this.checked=!1,void 0===this.password&&(this.password="")}get isInvalidPass(){return this.checked&&!t.isLoggedIn()}static isLoggedIn(){return(new Aa).getData().length>0}checkPassword(){this.password&&(Ca.setCookie(ka.cookieName,this.password),this.checked=!0)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=ie({type:t,selectors:[["app-login"]],decls:9,vars:3,consts:[[1,"overflow-hidden","h-100","w-100",2,"background-image","url('assets/monument.jpg')","background-size","cover","background-position-x","center"],[1,"container"],[1,"form-signin"],["type","text","id","inputPassword","required","","autofocus","",1,"form-control",3,"placeholder","ngModel","ngModelChange"],["type","submit",1,"btn","btn-lg","btn-primary","btn-block",3,"click"],[1,"mt-5","mb-3","text-muted"],[4,"ngIf"],["role","alert",1,"alert","alert-danger"]],template:function(t,e){1&t&&(rs(0,"div",0),rs(1,"div",1),rs(2,"div",2),rs(3,"input",3),ls("ngModelChange",(function(t){return e.password=t}))("ngModelChange",(function(){return e.checked=!1})),is(),rs(4,"button",4),ls("click",(function(){return e.checkPassword()})),Cs(5,"\u0412\u043e\u0439\u0442\u0438"),is(),rs(6,"p",5),Cs(7,"\xa9 2020"),is(),_i(8,Ru,3,0,"div",6),is(),is(),is()),2&t&&(ir(3),hs("placeholder",e.hint),es("ngModel",e.password),ir(5),es("ngIf",e.isInvalidPass))},directives:[Na,Pu,ja,Nu,Gl],styles:[""]}),t})();class zu{constructor(t){this.name=t.name,this.location=t.location}}class Fu{constructor(t){this.entries=new Array,this.name=t.subCategory,this.addItem(t)}addItem(t){this.entries.push(new zu(t)),this.entries.sort((t,e)=>t.name===e.name?t.location.localeCompare(e.location):t.name.localeCompare(e.name))}get isEmpty(){return 0===this.entries.length}}class Bu{constructor(t){this.subcategories=new Array,this.name=t.category,this.addItem(t)}addItem(t){this.subcategories.push(new Fu(t)),this.subcategories.sort((t,e)=>t.name.localeCompare(e.name))}get isEmpty(){return 0===this.subcategories.length}items(){const t=new Array;for(const e of this.subcategories)t.push(e.name);return t}byName(t){return this.subcategories.find(e=>t===e.name)}}let Hu=(()=>{class t{constructor(){this.clear()}categorySortFunc(e,n){return e.name===n.name?0:e.name===t.population?-1:n.name===t.population?1:e.name.localeCompare(n.name)}clear(){this.results=new Array}addItem(t){let e=this.byName(t.category);if(void 0===e)e=new Bu(t),this.results.push(e),this.results.sort(this.categorySortFunc);else{const n=e.byName(t.subCategory);void 0===n?e.addItem(t):n.addItem(t)}}get isEmpty(){return 0===this.results.length}items(){const t=new Array;for(const e of this.results)t.push(e.name);return t}byName(t){return this.results.find(e=>t===e.name)}}return t.population="\u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435",t})();class Gu{constructor(t,e){this.sector=t,this.house=e}}let Lu=(()=>{class t{constructor(){this.items=(new Aa).getData()}searchFor(t){const e=new Hu;let n=!1;null!==t&&(t=t.toUpperCase()).length>1&&t.startsWith('"')&&t.endsWith('"')&&(n=!0,t=t.substr(1,t.length-2));for(const r of this.items)(null===t||n&&(r.category.toUpperCase()===t||r.subCategory.toUpperCase()===t||r.name.toUpperCase()===t||r.location.toUpperCase()===t)||!n&&(r.category.toUpperCase().includes(t)||r.subCategory.toUpperCase().includes(t)||r.name.toUpperCase().includes(t)||r.location.toUpperCase().includes(t)))&&e.addItem(r);return e}getLocationInfo(t){let e=t.split("-");const n=e[0];e=e[1].split("/");const r=Number(e[0]);return new Gu(n,r)}searchNeighbors(e){const n=new Hu;if(null!==e){const r=this.getLocationInfo(e);for(const e of this.items){const i=this.getLocationInfo(e.location);r.sector===i.sector&&Math.abs(r.house-i.house)<=t.maxNeighborDistance&&n.addItem(e)}}return n}}return t.maxNeighborDistance=5,t})();class qu extends h{constructor(t,e){super()}schedule(t,e=0){return this}}class Xu extends qu{constructor(t,e){super(t,e),this.scheduler=t,this.work=e,this.pending=!1}schedule(t,e=0){if(this.closed)return this;this.state=t;const n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this}requestAsyncId(t,e,n=0){return setInterval(t.flush.bind(t,this),n)}recycleAsyncId(t,e,n=0){if(null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)}execute(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;const n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(t,e){let n=!1,r=void 0;try{this.work(t)}catch(i){n=!0,r=!!i&&i||new Error(i)}if(n)return this.unsubscribe(),r}_unsubscribe(){const t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null}}let Zu=(()=>{class t{constructor(e,n=t.now){this.SchedulerAction=e,this.now=n}schedule(t,e=0,n){return new this.SchedulerAction(this,t).schedule(n,e)}}return t.now=()=>Date.now(),t})();class Ku extends Zu{constructor(t,e=Zu.now){super(t,()=>Ku.delegate&&Ku.delegate!==this?Ku.delegate.now():e()),this.actions=[],this.active=!1,this.scheduled=void 0}schedule(t,e=0,n){return Ku.delegate&&Ku.delegate!==this?Ku.delegate.schedule(t,e,n):super.schedule(t,e,n)}flush(t){const{actions:e}=this;if(this.active)return void e.push(t);let n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}}const Yu=new Ku(Xu);class Qu{constructor(t,e){this.dueTime=t,this.scheduler=e}call(t,e){return e.subscribe(new Wu(t,this.dueTime,this.scheduler))}}class Wu extends p{constructor(t,e,n){super(t),this.dueTime=e,this.scheduler=n,this.debouncedSubscription=null,this.lastValue=null,this.hasValue=!1}_next(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(Ju,this.dueTime,this))}_complete(){this.debouncedNext(),this.destination.complete()}debouncedNext(){if(this.clearDebounce(),this.hasValue){const{lastValue:t}=this;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}}clearDebounce(){const t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)}}function Ju(t){t.debouncedNext()}function Uu(t,e){if(1&t){const t=Re();rs(0,"div",21),rs(1,"div",22),Cs(2),is(),rs(3,"div",23),rs(4,"button",24),ls("click",(function(){Me.lFrame.contextLView=t;const n=e.$implicit;return cs(4).ShowNeighbors(n.location)})),ss(5,"span",25),is(),Cs(6),is(),is()}if(2&t){const t=e.$implicit;ir(2),As(" ",t.name," "),ir(4),As(" ",t.location," ")}}function _u(t,e){if(1&t&&(rs(0,"div"),rs(1,"h2"),Cs(2),is(),_i(3,Uu,7,2,"div",20),is()),2&t){const t=e.$implicit,n=cs().$implicit,r=cs(2);ir(2),ks(t),ir(1),es("ngForOf",r.foundItems.byName(n).byName(t).entries)}}function $u(t,e){if(1&t&&(rs(0,"div"),rs(1,"h1"),Cs(2),is(),_i(3,_u,4,2,"div",18),is()),2&t){const t=e.$implicit,n=cs(2);ir(2),ks(t),ir(1),es("ngForOf",n.foundItems.byName(t).items())}}function tc(t,e){if(1&t&&(rs(0,"div"),_i(1,$u,4,2,"div",18),ss(2,"div",19),is()),2&t){const t=cs();ir(1),es("ngForOf",t.foundItems.items())}}function ec(t,e){if(1&t&&(rs(0,"div",26),Cs(1),ss(2,"span",27),is()),2&t){const t=cs();ir(1),As("\u041d\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u043b\u044f ",t.textToSearch&&t.textToSearch.length>1&&t.textToSearch.startsWith('"')&&t.textToSearch.endsWith('"')?"\u0442\u043e\u0447\u043d\u043e\u0439 \u0444\u0440\u0430\u0437\u044b "+t.textToSearch:'\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 "'+t.textToSearch+'"'," ")}}function nc(t,e){if(1&t&&(rs(0,"div",21),rs(1,"div",28),Cs(2),is(),rs(3,"div",29),Cs(4),is(),is()),2&t){const t=e.$implicit;ir(2),As(" ",t.name," "),ir(2),As(" ",t.location," ")}}function rc(t,e){if(1&t&&(rs(0,"div"),rs(1,"h2"),Cs(2),is(),_i(3,nc,5,2,"div",20),is()),2&t){const t=e.$implicit,n=cs().$implicit,r=cs(2);ir(2),ks(t),ir(1),es("ngForOf",r.neighbors.byName(n).byName(t).entries)}}function ic(t,e){if(1&t&&(rs(0,"div"),rs(1,"h1"),Cs(2),is(),_i(3,rc,4,2,"div",18),is()),2&t){const t=e.$implicit,n=cs(2);ir(2),ks(t),ir(1),es("ngForOf",n.neighbors.byName(t).items())}}function sc(t,e){if(1&t&&(rs(0,"div"),_i(1,ic,4,2,"div",18),ss(2,"div",4),is()),2&t){const t=cs();ir(1),es("ngForOf",t.neighbors.items())}}function oc(t,e){1&t&&(rs(0,"div",26),Cs(1,"\u041d\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 :("),is())}let lc=(()=>{class t{constructor(){this.addressBook=new Lu,this.textToSearchChange=new A,this.textToSearch=null,this.foundItems=this.addressBook.searchFor(this.textToSearch)}ngOnInit(){this.textToSearchChange.pipe(function(t,e=Yu){return n=>n.lift(new Qu(t,e))}(300)).subscribe(()=>{this.foundItems=this.addressBook.searchFor(this.textToSearch)})}performSearch(){this.textToSearchChange.next()}ShowNeighbors(t){this.currentLocation=t,this.neighbors=this.addressBook.searchNeighbors(t),$("#exampleModalScrollable").modal("show")}closeNeighbors(){$("#exampleModalScrollable").modal("hide")}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=ie({type:t,selectors:[["app-address-book"]],decls:27,vars:6,consts:[[1,"container-fluid"],[1,"container"],[1,"sticky-top",2,"margin-top","20px"],["placeholder",'\u041f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043b\u0438 "\u0442\u043e\u0447\u043d\u0430\u044f \u0444\u0440\u0430\u0437\u0430"',1,"form-control",3,"ngModel","ngModelChange"],[2,"min-height","10px"],[4,"ngIf","ngIfElse"],["elseBlock",""],["id","exampleModalScrollable","tabindex","-1","role","dialog","aria-labelledby","exampleModalScrollableTitle","aria-hidden","true",1,"modal","fade"],["role","document",1,"modal-dialog","modal-dialog-scrollable"],[1,"modal-content"],[1,"modal-header"],["id","exampleModalScrollableTitle",1,"modal-title"],["type","button","aria-label","\u0417\u0430\u043a\u0440\u044b\u0442\u044c",1,"close",3,"click"],["aria-hidden","true"],[1,"modal-body"],["style","",4,"ngIf","ngIfElse"],[1,"modal-footer"],["type","button",1,"btn","btn-primary",3,"click"],[4,"ngFor","ngForOf"],[2,"min-height","50px"],["class","row flex-nowrap row-cols-6",4,"ngFor","ngForOf"],[1,"row","flex-nowrap","row-cols-6"],[1,"col-7","col-lg-10"],[1,"col-5","col-lg-2"],["type","button","title","\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043e\u0441\u0435\u0434\u0435\u0439",1,"btn","btn-sm","btn-outline-info",3,"click"],[1,"fa","fa-map-marked-alt"],["role","alert",1,"alert","alert-warning"],[1,"fa","fa-frown"],[1,"col-8"],[1,"col-3"]],template:function(t,e){if(1&t&&(rs(0,"div",0),rs(1,"div",1),rs(2,"div",2),rs(3,"input",3),ls("ngModelChange",(function(t){return e.textToSearch=t}))("ngModelChange",(function(){return e.performSearch()})),is(),is(),ss(4,"div",4),_i(5,tc,3,1,"div",5),_i(6,ec,3,1,"ng-template",null,6,Fo),is(),is(),rs(8,"div",7),rs(9,"div",8),rs(10,"div",9),rs(11,"div",10),rs(12,"h5",11),Cs(13,"\u0420\u044f\u0434\u043e\u043c \u0441 "),rs(14,"strong"),Cs(15),is(),Cs(16," \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f"),is(),rs(17,"button",12),ls("click",(function(){return e.closeNeighbors()})),rs(18,"span",13),Cs(19,"\xd7"),is(),is(),is(),rs(20,"div",14),_i(21,sc,3,1,"div",15),_i(22,oc,2,0,"ng-template",null,6,Fo),is(),rs(24,"div",16),rs(25,"button",17),ls("click",(function(){return e.closeNeighbors()})),Cs(26,"\u0417\u0430\u043a\u0440\u044b\u0442\u044c"),is(),is(),is(),is(),is()),2&t){const t=$i(7);ir(3),es("ngModel",e.textToSearch),ir(2),es("ngIf",e.foundItems&&!e.foundItems.isEmpty)("ngIfElse",t),ir(10),ks(e.currentLocation),ir(6),es("ngIf",e.neighbors&&!e.neighbors.isEmpty)("ngIfElse",t)}},directives:[Na,ja,Nu,Gl,Bl],styles:[""]}),t})();function ac(t,e){1&t&&(rs(0,"div"),ss(1,"app-address-book"),is())}function uc(t,e){1&t&&ss(0,"app-login")}const cc=function(t){return{active:t}};let hc=(()=>{class t{constructor(){this.title="StTwins",this.activeTab="book"}selectPage(t){this.activeTab=t}isAuthenticated(){return ju.isLoggedIn()}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=ie({type:t,selectors:[["app-root"]],decls:10,vars:8,consts:[[1,"h-100","d-flex","flex-column","flex-nowrap"],["role","tablist",1,"nav","nav-tabs"],[1,"flex-grow-1"],[1,"tab-content","h-100"],["id","site","role","tabpanel",1,"tab-pane","h-100",3,"ngClass"],["_src",""],["id","book","role","tabpanel",1,"tab-pane","h-100",2,"overflow-y","auto","max-height","calc(100vh/* - 50px*/)",3,"ngClass"],["style","",4,"ngIf","ngIfElse"],["elseBlock",""]],template:function(t,e){if(1&t&&(rs(0,"div",0),ss(1,"ul",1),rs(2,"div",2),rs(3,"div",3),rs(4,"div",4),ss(5,"iframe",5),is(),rs(6,"div",6),_i(7,ac,2,0,"div",7),_i(8,uc,1,0,"ng-template",null,8,Fo),is(),is(),is(),is()),2&t){const t=$i(9);ir(4),es("ngClass",jo(4,cc,"site"===e.activeTab)),ir(2),es("ngClass",jo(6,cc,"book"===e.activeTab)),ir(1),es("ngIf",e.isAuthenticated())("ngIfElse",t)}},directives:[zl,Gl,lc,ju],styles:[""]}),t})(),dc=(()=>{class t{}return t.\u0275mod=ae({type:t,bootstrap:[hc]}),t.\u0275inj=st({factory:function(e){return new(e||t)},providers:[],imports:[[va,Vu]]}),t})();(function(){if(Ln)throw new Error("Cannot enable prod mode after platform setup.");Gn=!1})(),ya().bootstrapModule(dc).catch(t=>console.error(t))},zn8P:function(t,e){function n(t){return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}))}n.keys=function(){return[]},n.resolve=n,t.exports=n,n.id="zn8P"}},[[0,0]]]);